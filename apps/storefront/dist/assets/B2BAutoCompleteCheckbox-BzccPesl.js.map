{"version":3,"file":"B2BAutoCompleteCheckbox-BzccPesl.js","sources":["../../src/components/ui/B2BAutoCompleteCheckbox.tsx"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Check } from '@mui/icons-material';\nimport {\n  Checkbox,\n  FormControl,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n} from '@mui/material';\n\nimport useMobile from '@/hooks/useMobile';\nimport { useAppSelector } from '@/store';\n\ninterface B2BAutoCompleteCheckboxProps {\n  handleChangeCompanyIds: (companyIds: number[]) => void;\n}\n\nfunction B2BAutoCompleteCheckbox({ handleChangeCompanyIds }: B2BAutoCompleteCheckboxProps) {\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n  const { id: currentCompanyId, companyName } = useAppSelector(\n    ({ company }) => company.companyInfo,\n  );\n  const { selectCompanyHierarchyId, companyHierarchyList, companyHierarchySelectSubsidiariesList } =\n    useAppSelector(({ company }) => company.companyHierarchyInfo);\n\n  const [isCheckedAll, setIsCheckedAll] = useState<boolean>(false);\n  const [companyNames, setCompanyNames] = useState<string[]>([companyName]);\n\n  const [companyIds, setCompanyIds] = useState<number[]>([\n    Number(selectCompanyHierarchyId) || Number(currentCompanyId),\n  ]);\n  const newCompanyHierarchyList = useMemo(() => {\n    const allCompany = {\n      companyId: -1,\n      companyName: 'All',\n      parentCompanyId: null,\n      parentCompanyName: '',\n    };\n\n    return [\n      allCompany,\n      ...(selectCompanyHierarchyId ? companyHierarchySelectSubsidiariesList : companyHierarchyList),\n    ];\n  }, [companyHierarchyList, selectCompanyHierarchyId, companyHierarchySelectSubsidiariesList]);\n\n  useEffect(() => {\n    setCompanyIds([Number(selectCompanyHierarchyId) || Number(currentCompanyId)]);\n  }, [selectCompanyHierarchyId, currentCompanyId]);\n\n  const handleChange = (event: SelectChangeEvent<string[]>) => {\n    const { value } = event.target;\n    const currentValues = typeof value === 'string' ? [value] : value;\n    let selectCompanies: number[] = [];\n    if (currentValues.includes('All')) {\n      if (\n        companyNames.includes('All') &&\n        (currentValues.length !== newCompanyHierarchyList.length ||\n          (newCompanyHierarchyList.length === 2 && isCheckedAll))\n      ) {\n        setIsCheckedAll(false);\n        selectCompanies = [];\n        newCompanyHierarchyList.forEach(\n          ({ companyName, companyId }: { companyName: string; companyId: number }) => {\n            if (currentValues.includes(companyName) && companyName !== 'All') {\n              selectCompanies.push(companyId);\n            }\n          },\n        );\n      } else {\n        selectCompanies = [-1];\n        setIsCheckedAll(true);\n      }\n    }\n\n    if (!currentValues.includes('All')) {\n      if (isCheckedAll) {\n        selectCompanies = [Number(selectCompanyHierarchyId) || Number(currentCompanyId)];\n        setIsCheckedAll(false);\n      } else {\n        selectCompanies = [];\n        currentValues.forEach((item: string) => {\n          const company = newCompanyHierarchyList.find((company) => company.companyName === item);\n          if (company) {\n            selectCompanies.push(company.companyId);\n          }\n        });\n        if (!currentValues.length) {\n          selectCompanies = [-1];\n          setIsCheckedAll(true);\n        }\n      }\n    }\n\n    setCompanyIds(selectCompanies);\n    let selectedCompanyIds = selectCompanies;\n    if (selectCompanyHierarchyId && selectCompanies.includes(-1)) {\n      selectedCompanyIds = [];\n      companyHierarchySelectSubsidiariesList.forEach(({ companyId }: { companyId: number }) => {\n        selectedCompanyIds.push(companyId);\n      });\n    }\n    handleChangeCompanyIds(selectedCompanyIds);\n  };\n\n  useEffect(() => {\n    const newSelectedCompany: string[] = [];\n    if (companyIds.length) {\n      companyIds.forEach((id) => {\n        const currentCompany = newCompanyHierarchyList.find(\n          (company) => Number(company.companyId) === Number(id),\n        );\n\n        if (currentCompany) {\n          newSelectedCompany.push(currentCompany.companyName);\n        }\n      });\n    } else {\n      const activeCompany = selectCompanyHierarchyId || currentCompanyId;\n      const currentCompany = newCompanyHierarchyList.find(\n        (company) => Number(company.companyId) === Number(activeCompany),\n      );\n      if (currentCompany) {\n        newSelectedCompany.push(currentCompany.companyName);\n      }\n    }\n\n    setCompanyNames(newSelectedCompany);\n    // ignore selectCompanyHierarchyId because it is not a value that must be monitored\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [companyIds, newCompanyHierarchyList, currentCompanyId]);\n\n  const showName = useMemo(() => {\n    if (companyNames.includes('All')) {\n      return ['All'];\n    }\n    return companyNames;\n  }, [companyNames]);\n\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: 300,\n      },\n    },\n  };\n\n  return (\n    <FormControl variant=\"filled\" sx={{ width: isMobile ? '100%' : 235 }}>\n      <InputLabel id=\"autoComplete-multiple-checkbox-label\">\n        {b3Lang('global.B2BAutoCompleteCheckbox.input.label')}\n      </InputLabel>\n      <Select\n        labelId=\"autoComplete-multiple-checkbox-label\"\n        id=\"autoComplete-multiple-checkbox\"\n        multiple\n        value={showName}\n        onChange={handleChange}\n        renderValue={(selected) => selected.join(', ')}\n        MenuProps={MenuProps}\n        sx={{\n          backgroundColor: '#efeae7',\n          '& #autoComplete-multiple-checkbox': {\n            paddingTop: '20px',\n          },\n        }}\n      >\n        {newCompanyHierarchyList.map((company) => (\n          <MenuItem\n            key={`${company.companyId}-${company.companyName}`}\n            value={company.companyName}\n            sx={{\n              width: isMobile ? '100%' : '300px',\n              alignItems: 'flex-start',\n            }}\n          >\n            <Checkbox\n              checked={\n                companyNames.includes(company.companyName) && companyIds.includes(company.companyId)\n              }\n            />\n            <ListItemText\n              primary={company.companyName}\n              title={company.companyName}\n              sx={{\n                '& span': {\n                  width: '100%',\n                  whiteSpace: 'break-spaces',\n                  wordWrap: 'break-word',\n                  paddingTop: '9px',\n                },\n              }}\n            />\n            {companyNames.includes(company.companyName) &&\n              companyIds.includes(company.companyId) && <Check sx={{ marginTop: '9px' }} />}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n\nexport default B2BAutoCompleteCheckbox;\n"],"names":["B2BAutoCompleteCheckbox","handleChangeCompanyIds","b3Lang","useB3Lang","isMobile","useMobile","currentCompanyId","companyName","useAppSelector","company","selectCompanyHierarchyId","companyHierarchyList","companyHierarchySelectSubsidiariesList","isCheckedAll","setIsCheckedAll","useState","companyNames","setCompanyNames","companyIds","setCompanyIds","newCompanyHierarchyList","useMemo","useEffect","handleChange","event","value","currentValues","selectCompanies","companyId","item","selectedCompanyIds","newSelectedCompany","id","currentCompany","activeCompany","showName","MenuProps","jsxs","FormControl","jsx","InputLabel","Select","selected","MenuItem","Checkbox","ListItemText","Check"],"mappings":"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"}