{"version":3,"file":"B2BAutoCompleteCheckbox-legacy-CCIIHHaB.js","sources":["../../src/components/ui/B2BAutoCompleteCheckbox.tsx"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Check } from '@mui/icons-material';\nimport {\n  Checkbox,\n  FormControl,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n} from '@mui/material';\n\nimport useMobile from '@/hooks/useMobile';\nimport { useAppSelector } from '@/store';\n\ninterface B2BAutoCompleteCheckboxProps {\n  handleChangeCompanyIds: (companyIds: number[]) => void;\n}\n\nfunction B2BAutoCompleteCheckbox({ handleChangeCompanyIds }: B2BAutoCompleteCheckboxProps) {\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n  const { id: currentCompanyId, companyName } = useAppSelector(\n    ({ company }) => company.companyInfo,\n  );\n  const { selectCompanyHierarchyId, companyHierarchyList, companyHierarchySelectSubsidiariesList } =\n    useAppSelector(({ company }) => company.companyHierarchyInfo);\n\n  const [isCheckedAll, setIsCheckedAll] = useState<boolean>(false);\n  const [companyNames, setCompanyNames] = useState<string[]>([companyName]);\n\n  const [companyIds, setCompanyIds] = useState<number[]>([\n    Number(selectCompanyHierarchyId) || Number(currentCompanyId),\n  ]);\n  const newCompanyHierarchyList = useMemo(() => {\n    const allCompany = {\n      companyId: -1,\n      companyName: 'All',\n      parentCompanyId: null,\n      parentCompanyName: '',\n    };\n\n    return [\n      allCompany,\n      ...(selectCompanyHierarchyId ? companyHierarchySelectSubsidiariesList : companyHierarchyList),\n    ];\n  }, [companyHierarchyList, selectCompanyHierarchyId, companyHierarchySelectSubsidiariesList]);\n\n  useEffect(() => {\n    setCompanyIds([Number(selectCompanyHierarchyId) || Number(currentCompanyId)]);\n  }, [selectCompanyHierarchyId, currentCompanyId]);\n\n  const handleChange = (event: SelectChangeEvent<string[]>) => {\n    const { value } = event.target;\n    const currentValues = typeof value === 'string' ? [value] : value;\n    let selectCompanies: number[] = [];\n    if (currentValues.includes('All')) {\n      if (\n        companyNames.includes('All') &&\n        (currentValues.length !== newCompanyHierarchyList.length ||\n          (newCompanyHierarchyList.length === 2 && isCheckedAll))\n      ) {\n        setIsCheckedAll(false);\n        selectCompanies = [];\n        newCompanyHierarchyList.forEach(\n          ({ companyName, companyId }: { companyName: string; companyId: number }) => {\n            if (currentValues.includes(companyName) && companyName !== 'All') {\n              selectCompanies.push(companyId);\n            }\n          },\n        );\n      } else {\n        selectCompanies = [-1];\n        setIsCheckedAll(true);\n      }\n    }\n\n    if (!currentValues.includes('All')) {\n      if (isCheckedAll) {\n        selectCompanies = [Number(selectCompanyHierarchyId) || Number(currentCompanyId)];\n        setIsCheckedAll(false);\n      } else {\n        selectCompanies = [];\n        currentValues.forEach((item: string) => {\n          const company = newCompanyHierarchyList.find((company) => company.companyName === item);\n          if (company) {\n            selectCompanies.push(company.companyId);\n          }\n        });\n        if (!currentValues.length) {\n          selectCompanies = [-1];\n          setIsCheckedAll(true);\n        }\n      }\n    }\n\n    setCompanyIds(selectCompanies);\n    let selectedCompanyIds = selectCompanies;\n    if (selectCompanyHierarchyId && selectCompanies.includes(-1)) {\n      selectedCompanyIds = [];\n      companyHierarchySelectSubsidiariesList.forEach(({ companyId }: { companyId: number }) => {\n        selectedCompanyIds.push(companyId);\n      });\n    }\n    handleChangeCompanyIds(selectedCompanyIds);\n  };\n\n  useEffect(() => {\n    const newSelectedCompany: string[] = [];\n    if (companyIds.length) {\n      companyIds.forEach((id) => {\n        const currentCompany = newCompanyHierarchyList.find(\n          (company) => Number(company.companyId) === Number(id),\n        );\n\n        if (currentCompany) {\n          newSelectedCompany.push(currentCompany.companyName);\n        }\n      });\n    } else {\n      const activeCompany = selectCompanyHierarchyId || currentCompanyId;\n      const currentCompany = newCompanyHierarchyList.find(\n        (company) => Number(company.companyId) === Number(activeCompany),\n      );\n      if (currentCompany) {\n        newSelectedCompany.push(currentCompany.companyName);\n      }\n    }\n\n    setCompanyNames(newSelectedCompany);\n    // ignore selectCompanyHierarchyId because it is not a value that must be monitored\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [companyIds, newCompanyHierarchyList, currentCompanyId]);\n\n  const showName = useMemo(() => {\n    if (companyNames.includes('All')) {\n      return ['All'];\n    }\n    return companyNames;\n  }, [companyNames]);\n\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: 300,\n      },\n    },\n  };\n\n  return (\n    <FormControl variant=\"filled\" sx={{ width: isMobile ? '100%' : 235 }}>\n      <InputLabel id=\"autoComplete-multiple-checkbox-label\">\n        {b3Lang('global.B2BAutoCompleteCheckbox.input.label')}\n      </InputLabel>\n      <Select\n        labelId=\"autoComplete-multiple-checkbox-label\"\n        id=\"autoComplete-multiple-checkbox\"\n        multiple\n        value={showName}\n        onChange={handleChange}\n        renderValue={(selected) => selected.join(', ')}\n        MenuProps={MenuProps}\n        sx={{\n          backgroundColor: '#efeae7',\n          '& #autoComplete-multiple-checkbox': {\n            paddingTop: '20px',\n          },\n        }}\n      >\n        {newCompanyHierarchyList.map((company) => (\n          <MenuItem\n            key={`${company.companyId}-${company.companyName}`}\n            value={company.companyName}\n            sx={{\n              width: isMobile ? '100%' : '300px',\n              alignItems: 'flex-start',\n            }}\n          >\n            <Checkbox\n              checked={\n                companyNames.includes(company.companyName) && companyIds.includes(company.companyId)\n              }\n            />\n            <ListItemText\n              primary={company.companyName}\n              title={company.companyName}\n              sx={{\n                '& span': {\n                  width: '100%',\n                  whiteSpace: 'break-spaces',\n                  wordWrap: 'break-word',\n                  paddingTop: '9px',\n                },\n              }}\n            />\n            {companyNames.includes(company.companyName) &&\n              companyIds.includes(company.companyId) && <Check sx={{ marginTop: '9px' }} />}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n\nexport default B2BAutoCompleteCheckbox;\n"],"names":["handleChangeCompanyIds","b3Lang","useB3Lang","isMobile","useMobile","id","currentCompanyId","companyName","useAppSelector","company","companyInfo","selectCompanyHierarchyId","companyHierarchyList","companyHierarchySelectSubsidiariesList","companyHierarchyInfo","isCheckedAll","setIsCheckedAll","useState","companyNames","setCompanyNames","companyIds","setCompanyIds","Number","newCompanyHierarchyList","useMemo","companyId","parentCompanyId","parentCompanyName","useEffect","newSelectedCompany","length","forEach","currentCompany","find","push","activeCompany","showName","includes","jsxs","FormControl","variant","sx","width","children","jsx","InputLabel","Select","labelId","multiple","value","onChange","event","target","currentValues","selectCompanies","item","selectedCompanyIds","renderValue","selected","join","MenuProps","PaperProps","style","maxHeight","backgroundColor","paddingTop","map","MenuItem","alignItems","Checkbox","checked","ListItemText","primary","title","whiteSpace","wordWrap","Check","marginTop"],"mappings":"qXAoBA,UAAiCA,uBAAEA,IACjC,MAAMC,EAASC,KACRC,GAAYC,KACXC,GAAIC,EAAkBC,YAAAA,GAAgBC,GAC5C,EAAGC,aAAcA,EAAQC,eAErBC,yBAAEA,EAA0BC,qBAAAA,EAAAC,uCAAsBA,GACtDL,GAAe,EAAGC,aAAcA,EAAQK,wBAEnCC,EAAcC,GAAmBC,EAAAA,UAAkB,IACnDC,EAAcC,GAAmBF,EAAAA,SAAmB,CAACV,KAErDa,EAAYC,GAAiBJ,WAAmB,CACrDK,OAAOX,IAA6BW,OAAOhB,KAEvCiB,EAA0BC,EAAAA,SAAQ,IAQ/B,CAPY,CACjBC,WAAW,EACXlB,YAAa,MACbmB,gBAAiB,KACjBC,kBAAmB,OAKfhB,EAA2BE,EAAyCD,IAEzE,CAACA,EAAsBD,EAA0BE,IAEpDe,EAAAA,WAAU,KACRP,EAAc,CAACC,OAAOX,IAA6BW,OAAOhB,IAAkB,GAC3E,CAACK,EAA0BL,IAyD9BsB,EAAAA,WAAU,KACR,MAAMC,EAA+B,GACrC,GAAIT,EAAWU,OACFV,EAAAW,SAAS1B,IAClB,MAAM2B,EAAiBT,EAAwBU,MAC5CxB,GAAYa,OAAOb,EAAQgB,aAAeH,OAAOjB,KAGhD2B,GACiBH,EAAAK,KAAKF,EAAezB,YAAW,QAGjD,CACL,MAAM4B,EAAgBxB,GAA4BL,EAC5C0B,EAAiBT,EAAwBU,MAC5CxB,GAAYa,OAAOb,EAAQgB,aAAeH,OAAOa,KAEhDH,GACiBH,EAAAK,KAAKF,EAAezB,YACzC,CAGFY,EAAgBU,EAAkB,GAGjC,CAACT,EAAYG,EAAyBjB,IAEnC,MAAA8B,EAAWZ,EAAAA,SAAQ,IACnBN,EAAamB,SAAS,OACjB,CAAC,OAEHnB,GACN,CAACA,IAWF,OAAAoB,OAACC,EAAY,CAAAC,QAAQ,SAASC,GAAI,CAAEC,MAAOvC,EAAW,OAAS,KAC7DwC,SAAA,CAAAC,MAACC,EAAW,CAAAxC,GAAG,uCACZsC,SAAA1C,EAAO,gDAEV2C,EAAAA,IAACE,EAAA,CACCC,QAAQ,uCACR1C,GAAG,iCACH2C,UAAQ,EACRC,MAAOb,EACPc,SA3GgBC,IACd,MAAAF,MAAEA,GAAUE,EAAMC,OAClBC,EAAiC,iBAAVJ,EAAqB,CAACA,GAASA,EAC5D,IAAIK,EAA4B,GAC5BD,EAAchB,SAAS,SAEvBnB,EAAamB,SAAS,SACrBgB,EAAcvB,SAAWP,EAAwBO,QACZ,IAAnCP,EAAwBO,QAAgBf,IAE3CC,GAAgB,GAChBsC,EAAkB,GACM/B,EAAAQ,SACtB,EAAGxB,YAAAA,EAAakB,gBACV4B,EAAchB,SAAS9B,IAAgC,QAAhBA,GACzC+C,EAAgBpB,KAAKT,EAAS,MAKpC6B,EAAkB,EAAC,GACnBtC,GAAgB,KAIfqC,EAAchB,SAAS,SACtBtB,GACFuC,EAAkB,CAAChC,OAAOX,IAA6BW,OAAOhB,IAC9DU,GAAgB,KAEhBsC,EAAkB,GACJD,EAAAtB,SAASwB,IACrB,MAAM9C,EAAUc,EAAwBU,MAAMxB,GAAYA,EAAQF,cAAgBgD,IAC9E9C,GACc6C,EAAApB,KAAKzB,EAAQgB,UAAS,IAGrC4B,EAAcvB,SACjBwB,EAAkB,EAAC,GACnBtC,GAAgB,MAKtBK,EAAciC,GACd,IAAIE,EAAqBF,EACrB3C,GAA4B2C,EAAgBjB,UAAW,KACzDmB,EAAqB,GACrB3C,EAAuCkB,SAAQ,EAAGN,gBAChD+B,EAAmBtB,KAAKT,EAAS,KAGrCzB,EAAuBwD,EAAkB,EAwDrCC,YAAcC,GAAaA,EAASC,KAAK,MACzCC,UApBY,CAChBC,WAAY,CACVC,MAAO,CACLC,UAAW,OAkBXtB,GAAI,CACFuB,gBAAiB,UACjB,oCAAqC,CACnCC,WAAY,SAIftB,SAAApB,EAAwB2C,KAAKzD,GAC5B6B,EAAAA,KAAC6B,EAAA,CAEClB,MAAOxC,EAAQF,YACfkC,GAAI,CACFC,MAAOvC,EAAW,OAAS,QAC3BiE,WAAY,cAGdzB,SAAA,CAAAC,EAAAA,IAACyB,EAAA,CACCC,QACEpD,EAAamB,SAAS5B,EAAQF,cAAgBa,EAAWiB,SAAS5B,EAAQgB,aAG9EmB,EAAAA,IAAC2B,EAAA,CACCC,QAAS/D,EAAQF,YACjBkE,MAAOhE,EAAQF,YACfkC,GAAI,CACF,SAAU,CACRC,MAAO,OACPgC,WAAY,eACZC,SAAU,aACVV,WAAY,UAIjB/C,EAAamB,SAAS5B,EAAQF,cAC7Ba,EAAWiB,SAAS5B,EAAQgB,kBAAemD,EAAM,CAAAnC,GAAI,CAAEoC,UAAW,WAzB/D,GAAGpE,EAAQgB,aAAahB,EAAQF,qBA+BjD"}