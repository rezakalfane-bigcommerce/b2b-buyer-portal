{"version":3,"file":"B3HoverButton--k0HAPul.js","sources":["../../src/components/outSideComponents/B3HoverButton.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { Box, Button, Snackbar, SnackbarOrigin, SxProps } from '@mui/material';\n\nimport {\n  CHECKOUT_URL,\n  FINISH_QUOTE_DEFAULT_VALUE,\n  TRANSLATION_FINISH_QUOTE_VARIABLE,\n} from '@/constants';\nimport { useGetButtonText } from '@/hooks';\nimport useMobile from '@/hooks/useMobile';\nimport { type SetOpenPage } from '@/pages/SetOpenPage';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { useAppSelector } from '@/store';\n\nimport {\n  getHoverColor,\n  getLocation,\n  getPosition,\n  getStyles,\n  setMUIMediaStyle,\n  splitCustomCssValue,\n} from './utils/b3CustomStyles';\n\ninterface B3HoverButtonProps {\n  isOpen: boolean;\n  productQuoteEnabled: boolean;\n  setOpenPage: SetOpenPage;\n}\n\nexport default function B3HoverButton(props: B3HoverButtonProps) {\n  const { isOpen, setOpenPage, productQuoteEnabled } = props;\n\n  const [showFinishQuote, setShowFinishQuote] = useState<boolean>(false);\n  const draftQuoteListLength = useAppSelector(({ quoteInfo }) => quoteInfo.draftQuoteList.length);\n\n  useEffect(() => {\n    if (draftQuoteListLength) {\n      setShowFinishQuote(true);\n    } else setShowFinishQuote(false);\n  }, [isOpen, draftQuoteListLength]);\n\n  const { href } = window.location;\n\n  const {\n    state: { floatingAction },\n  } = useContext(CustomStyleContext);\n\n  const [isMobile] = useMobile();\n\n  const {\n    text = '',\n    color = '#3385d6',\n    customCss = '',\n    location = 'bottomRight',\n    horizontalPadding = '',\n    verticalPadding = '',\n    enabled = false,\n  } = floatingAction;\n\n  const buttonText = useGetButtonText(\n    TRANSLATION_FINISH_QUOTE_VARIABLE,\n    text,\n    FINISH_QUOTE_DEFAULT_VALUE,\n  );\n\n  const defaultLocation: SnackbarOrigin = {\n    vertical: 'bottom',\n    horizontal: 'right',\n  };\n\n  const cssInfo = splitCustomCssValue(customCss);\n  const {\n    cssValue,\n    mediaBlocks,\n  }: {\n    cssValue: string;\n    mediaBlocks: string[];\n  } = cssInfo;\n  const MUIMediaStyle = setMUIMediaStyle(mediaBlocks);\n\n  const defaultSx: SxProps = {\n    backgroundColor: color,\n    padding: '6px 16px',\n    ...getStyles(cssValue),\n  };\n\n  const positionStyles = isMobile ? {} : getPosition(horizontalPadding, verticalPadding, location);\n\n  if (href.includes(CHECKOUT_URL)) return null;\n  return (\n    <Snackbar\n      sx={{\n        zIndex: '99999999993',\n        width: 'auto',\n        ...positionStyles,\n      }}\n      anchorOrigin={getLocation(location) || defaultLocation}\n      open\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          width: 'auto',\n        }}\n      >\n        {enabled &&\n          showFinishQuote &&\n          !isOpen &&\n          productQuoteEnabled &&\n          !href.includes('/cart') && (\n            <Button\n              sx={{\n                height: '42px',\n                ':hover': {\n                  backgroundColor: getHoverColor(color, 0.2),\n                },\n                ...defaultSx,\n                ...MUIMediaStyle,\n              }}\n              onClick={() => {\n                setOpenPage({\n                  isOpen: true,\n                  openUrl: '/quoteDraft',\n                  params: {\n                    quoteBtn: 'open',\n                  },\n                });\n              }}\n              variant=\"contained\"\n            >\n              {buttonText}\n            </Button>\n          )}\n      </Box>\n    </Snackbar>\n  );\n}\n"],"names":["B3HoverButton","props","isOpen","setOpenPage","productQuoteEnabled","showFinishQuote","setShowFinishQuote","useState","draftQuoteListLength","useAppSelector","quoteInfo","useEffect","href","floatingAction","useContext","CustomStyleContext","isMobile","useMobile","text","color","customCss","location","horizontalPadding","verticalPadding","enabled","buttonText","useGetButtonText","TRANSLATION_FINISH_QUOTE_VARIABLE","FINISH_QUOTE_DEFAULT_VALUE","defaultLocation","cssInfo","splitCustomCssValue","cssValue","mediaBlocks","MUIMediaStyle","setMUIMediaStyle","defaultSx","getStyles","positionStyles","getPosition","CHECKOUT_URL","jsx","Snackbar","getLocation","Box","Button","getHoverColor"],"mappings":"yoBA6BA,SAAwBA,GAAcC,EAA2B,CAC/D,KAAM,CAAE,OAAAC,EAAQ,YAAAC,EAAa,oBAAAC,CAAwB,EAAAH,EAE/C,CAACI,EAAiBC,CAAkB,EAAIC,EAAAA,SAAkB,EAAK,EAC/DC,EAAuBC,EAAe,CAAC,CAAE,UAAAC,KAAgBA,EAAU,eAAe,MAAM,EAE9FC,EAAAA,UAAU,IAAM,CAEZL,EADE,EAAAE,CACqB,CACM,EAC9B,CAACN,EAAQM,CAAoB,CAAC,EAE3B,KAAA,CAAE,KAAAI,GAAS,OAAO,SAElB,CACJ,MAAO,CAAE,eAAAC,CAAe,CAAA,EACtBC,EAAAA,WAAWC,CAAkB,EAE3B,CAACC,CAAQ,EAAIC,EAAU,EAEvB,CACJ,KAAAC,EAAO,GACP,MAAAC,EAAQ,UACR,UAAAC,EAAY,GACZ,SAAAC,EAAW,cACX,kBAAAC,EAAoB,GACpB,gBAAAC,EAAkB,GAClB,QAAAC,EAAU,EAAA,EACRX,EAEEY,EAAaC,EACjBC,EACAT,EACAU,CACF,EAEMC,EAAkC,CACtC,SAAU,SACV,WAAY,OACd,EAEMC,EAAUC,EAAoBX,CAAS,EACvC,CACJ,SAAAY,EACA,YAAAC,CAAA,EAIEH,EACEI,EAAgBC,EAAiBF,CAAW,EAE5CG,EAAqB,CACzB,gBAAiBjB,EACjB,QAAS,WACT,GAAGkB,EAAUL,CAAQ,CACvB,EAEMM,EAAiBtB,EAAW,GAAKuB,EAAYjB,EAAmBC,EAAiBF,CAAQ,EAE/F,OAAIT,EAAK,SAAS4B,CAAY,EAAU,KAEtCC,EAAA,IAACC,EAAA,CACC,GAAI,CACF,OAAQ,cACR,MAAO,OACP,GAAGJ,CACL,EACA,aAAcK,EAAYtB,CAAQ,GAAKQ,EACvC,KAAI,GAEJ,SAAAY,EAAA,IAACG,EAAA,CACC,GAAI,CACF,QAAS,OACT,cAAe,SACf,MAAO,MACT,EAEC,SAAApB,GACCnB,GACA,CAACH,GACDE,GACA,CAACQ,EAAK,SAAS,OAAO,GACpB6B,EAAA,IAACI,EAAA,CACC,GAAI,CACF,OAAQ,OACR,SAAU,CACR,gBAAiBC,EAAc3B,EAAO,EAAG,CAC3C,EACA,GAAGiB,EACH,GAAGF,CACL,EACA,QAAS,IAAM,CACD/B,EAAA,CACV,OAAQ,GACR,QAAS,cACT,OAAQ,CACN,SAAU,MAAA,CACZ,CACD,CACH,EACA,QAAQ,YAEP,SAAAsB,CAAA,CAAA,CACH,CAAA,CAEN,CACF,CAEJ"}