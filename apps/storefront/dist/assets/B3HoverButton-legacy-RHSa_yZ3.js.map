{"version":3,"file":"B3HoverButton-legacy-RHSa_yZ3.js","sources":["../../src/components/outSideComponents/B3HoverButton.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { Box, Button, Snackbar, SnackbarOrigin, SxProps } from '@mui/material';\n\nimport {\n  CHECKOUT_URL,\n  FINISH_QUOTE_DEFAULT_VALUE,\n  TRANSLATION_FINISH_QUOTE_VARIABLE,\n} from '@/constants';\nimport { useGetButtonText } from '@/hooks';\nimport useMobile from '@/hooks/useMobile';\nimport { type SetOpenPage } from '@/pages/SetOpenPage';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { useAppSelector } from '@/store';\n\nimport {\n  getHoverColor,\n  getLocation,\n  getPosition,\n  getStyles,\n  setMUIMediaStyle,\n  splitCustomCssValue,\n} from './utils/b3CustomStyles';\n\ninterface B3HoverButtonProps {\n  isOpen: boolean;\n  productQuoteEnabled: boolean;\n  setOpenPage: SetOpenPage;\n}\n\nexport default function B3HoverButton(props: B3HoverButtonProps) {\n  const { isOpen, setOpenPage, productQuoteEnabled } = props;\n\n  const [showFinishQuote, setShowFinishQuote] = useState<boolean>(false);\n  const draftQuoteListLength = useAppSelector(({ quoteInfo }) => quoteInfo.draftQuoteList.length);\n\n  useEffect(() => {\n    if (draftQuoteListLength) {\n      setShowFinishQuote(true);\n    } else setShowFinishQuote(false);\n  }, [isOpen, draftQuoteListLength]);\n\n  const { href } = window.location;\n\n  const {\n    state: { floatingAction },\n  } = useContext(CustomStyleContext);\n\n  const [isMobile] = useMobile();\n\n  const {\n    text = '',\n    color = '#3385d6',\n    customCss = '',\n    location = 'bottomRight',\n    horizontalPadding = '',\n    verticalPadding = '',\n    enabled = false,\n  } = floatingAction;\n\n  const buttonText = useGetButtonText(\n    TRANSLATION_FINISH_QUOTE_VARIABLE,\n    text,\n    FINISH_QUOTE_DEFAULT_VALUE,\n  );\n\n  const defaultLocation: SnackbarOrigin = {\n    vertical: 'bottom',\n    horizontal: 'right',\n  };\n\n  const cssInfo = splitCustomCssValue(customCss);\n  const {\n    cssValue,\n    mediaBlocks,\n  }: {\n    cssValue: string;\n    mediaBlocks: string[];\n  } = cssInfo;\n  const MUIMediaStyle = setMUIMediaStyle(mediaBlocks);\n\n  const defaultSx: SxProps = {\n    backgroundColor: color,\n    padding: '6px 16px',\n    ...getStyles(cssValue),\n  };\n\n  const positionStyles = isMobile ? {} : getPosition(horizontalPadding, verticalPadding, location);\n\n  if (href.includes(CHECKOUT_URL)) return null;\n  return (\n    <Snackbar\n      sx={{\n        zIndex: '99999999993',\n        width: 'auto',\n        ...positionStyles,\n      }}\n      anchorOrigin={getLocation(location) || defaultLocation}\n      open\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          width: 'auto',\n        }}\n      >\n        {enabled &&\n          showFinishQuote &&\n          !isOpen &&\n          productQuoteEnabled &&\n          !href.includes('/cart') && (\n            <Button\n              sx={{\n                height: '42px',\n                ':hover': {\n                  backgroundColor: getHoverColor(color, 0.2),\n                },\n                ...defaultSx,\n                ...MUIMediaStyle,\n              }}\n              onClick={() => {\n                setOpenPage({\n                  isOpen: true,\n                  openUrl: '/quoteDraft',\n                  params: {\n                    quoteBtn: 'open',\n                  },\n                });\n              }}\n              variant=\"contained\"\n            >\n              {buttonText}\n            </Button>\n          )}\n      </Box>\n    </Snackbar>\n  );\n}\n"],"names":["props","isOpen","setOpenPage","productQuoteEnabled","showFinishQuote","setShowFinishQuote","useState","draftQuoteListLength","useAppSelector","quoteInfo","draftQuoteList","length","useEffect","href","window","location","state","floatingAction","useContext","CustomStyleContext","isMobile","useMobile","text","color","customCss","horizontalPadding","verticalPadding","enabled","buttonText","useGetButtonText","TRANSLATION_FINISH_QUOTE_VARIABLE","FINISH_QUOTE_DEFAULT_VALUE","cssInfo","splitCustomCssValue","cssValue","mediaBlocks","MUIMediaStyle","setMUIMediaStyle","defaultSx","backgroundColor","padding","getStyles","positionStyles","getPosition","includes","CHECKOUT_URL","jsx","Snackbar","sx","zIndex","width","anchorOrigin","getLocation","vertical","horizontal","open","children","Box","display","flexDirection","Button","height","getHoverColor","onClick","openUrl","params","quoteBtn","variant"],"mappings":"q1BA6BA,SAAsCA,GACpC,MAAMC,OAAEA,EAAAC,YAAQA,EAAaC,oBAAAA,GAAwBH,GAE9CI,EAAiBC,GAAsBC,EAAAA,UAAkB,GAC1DC,EAAuBC,GAAe,EAAGC,eAAgBA,EAAUC,eAAeC,SAExFC,EAAAA,WAAU,KAENP,IADEE,EAE2B,GAC9B,CAACN,EAAQM,IAEN,MAAAM,KAAEA,GAASC,OAAOC,UAGtBC,OAAOC,eAAEA,IACPC,EAAAA,WAAWC,IAERC,GAAYC,KAEbC,KACJA,EAAO,GAAAC,MACPA,EAAQ,UAAAC,UACRA,EAAY,GAAAT,SACZA,EAAW,cAAAU,kBACXA,EAAoB,GAAAC,gBACpBA,EAAkB,GAAAC,QAClBA,GAAU,GACRV,EAEEW,EAAaC,EACjBC,EACAR,EACAS,GAQIC,EAAUC,EAAoBT,IAC9BU,SACJA,EAAAC,YACAA,GAIEH,EACEI,EAAgBC,EAAiBF,GAEjCG,EAAqB,CACzBC,gBAAiBhB,EACjBiB,QAAS,cACNC,EAAUP,IAGTQ,EAAiBtB,EAAW,GAAKuB,EAAYlB,EAAmBC,EAAiBX,GAEvF,OAAIF,EAAK+B,SAASC,GAAsB,KAEtCC,EAAAA,IAACC,EAAA,CACCC,GAAI,CACFC,OAAQ,cACRC,MAAO,UACJR,GAELS,aAAcC,EAAYrC,IA/BU,CACtCsC,SAAU,SACVC,WAAY,SA8BVC,MAAI,EAEJC,SAAAV,EAAAA,IAACW,EAAA,CACCT,GAAI,CACFU,QAAS,OACTC,cAAe,SACfT,MAAO,QAGRM,SAAA7B,GACCvB,IACCH,GACDE,IACCU,EAAK+B,SAAS,UACbE,EAAAA,IAACc,EAAA,CACCZ,GAAI,CACFa,OAAQ,OACR,SAAU,CACRtB,gBAAiBuB,EAAcvC,EAAO,QAErCe,KACAF,GAEL2B,QAASA,KACK7D,EAAA,CACVD,QAAQ,EACR+D,QAAS,cACTC,OAAQ,CACNC,SAAU,SAEb,EAEHC,QAAQ,YAEPX,SAAA5B,OAMf"}