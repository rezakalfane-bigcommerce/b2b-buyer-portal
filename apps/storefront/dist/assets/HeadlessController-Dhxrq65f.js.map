{"version":3,"file":"HeadlessController-Dhxrq65f.js","sources":["../../src/utils/b3CallbackManager.ts","../../src/components/HeadlessController.tsx"],"sourcesContent":["import { EventType } from '@b3/hooks';\n\nimport b2bLogger from './b3Logger';\n\ntype CallbackEvent = {\n  data: CustomFieldItems;\n  preventDefault: () => void;\n};\n\ntype Callback = (event: CallbackEvent) => any;\n\nexport default class CallbackManager {\n  private callbacks: Map<EventType, Callback[]> = new Map();\n\n  /**\n   * Registers a callback function for a specific event and returns a unique hash for it.\n   * @param callbackKey The event key (e.g., 'onAddToCart').\n   * @param callback The callback function to register.\n   * @returns A unique hash identifying the registered callback.\n   */\n  addEventListener(callbackKey: EventType, callback: Callback): void {\n    if (typeof callback !== 'function') {\n      console.error('callback should be a function'); // eslint-disable-line no-console\n      return;\n    }\n\n    if (!this.callbacks.has(callbackKey)) {\n      this.callbacks.set(callbackKey, [callback]);\n    } else {\n      const list = this.callbacks.get(callbackKey) ?? [];\n      const inList = list.find((cb) => cb === callback);\n\n      if (!inList) {\n        list.push(callback);\n      }\n    }\n  }\n\n  /**\n   * Unregister a callback identified by a hash and event key.\n   * @param callbackKey The event key (e.g., 'onAddToCart').\n   * @param hash The unique hash of the callback to unregister.\n   * @returns True if the callback was successfully removed, false otherwise.\n   */\n  removeEventListener(callbackKey: EventType, callback: Callback): boolean {\n    if (!this.callbacks.has(callbackKey)) {\n      return false;\n    }\n    const list = this.callbacks.get(callbackKey) ?? [];\n    const index = list.findIndex((cb) => cb === callback);\n    if (index === -1) {\n      return false;\n    }\n    list.splice(index, 1);\n    this.callbacks.set(callbackKey, list);\n    return true;\n  }\n\n  /**\n   * Triggers all callbacks registered for a specific event.\n   * @param callbackKey The event key (e.g., 'onAddToCart').\n   * @param data The data to pass to the callback.\n   * @returns True if all callbacks were successfully executed, false otherwise.\n   */\n  dispatchEvent(callbackKey: EventType, data?: any): boolean {\n    let success = true;\n    const event = {\n      data,\n      preventDefault: () => {\n        success = false;\n      },\n    };\n    if (!this.callbacks.has(callbackKey)) {\n      return true;\n    }\n    const list = this.callbacks.get(callbackKey) ?? [];\n    list.forEach((callback) => {\n      try {\n        callback(event);\n      } catch (e) {\n        success = false;\n        if (e instanceof Error) {\n          b2bLogger.error(e.message);\n        }\n      }\n    });\n    return success;\n  }\n}\n","import { useContext, useEffect, useRef } from 'react';\nimport Cookies from 'js-cookie';\n\nimport { HeadlessRoutes } from '@/constants';\nimport { addProductFromPage as addProductFromPageToShoppingList } from '@/hooks/dom/useOpenPDP';\nimport { addProductsFromCartToQuote, addProductsToDraftQuote } from '@/hooks/dom/utils';\nimport { addProductsToShoppingList, useAddedToShoppingListAlert } from '@/pages/PDP';\nimport { type SetOpenPage } from '@/pages/SetOpenPage';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { GlobalContext } from '@/shared/global';\nimport { getAllowedRoutesWithoutComponent } from '@/shared/routeList';\nimport { superAdminCompanies } from '@/shared/service/b2b';\nimport B3Request from '@/shared/service/request/b3Fetch';\nimport {\n  formattedQuoteDraftListSelector,\n  isB2BUserSelector,\n  useAppDispatch,\n  useAppSelector,\n} from '@/store';\nimport { setB2BToken } from '@/store/slices/company';\nimport { QuoteItem } from '@/types/quotes';\nimport CallbackManager from '@/utils/b3CallbackManager';\nimport b2bLogger from '@/utils/b3Logger';\nimport { logoutSession } from '@/utils/b3logout';\nimport { LineItems } from '@/utils/b3Product/b3Product';\nimport createShoppingList from '@/utils/b3ShoppingList/b3ShoppingList';\nimport { getCurrentCustomerInfo } from '@/utils/loginInfo';\nimport { endMasquerade, startMasquerade } from '@/utils/masquerade';\n\nexport interface FormattedQuoteItem\n  extends Omit<QuoteItem['node'], 'optionList' | 'calculatedValue' | 'productsSearch'> {\n  optionSelections: {\n    optionId: string | number;\n    optionValue: number;\n  }[];\n}\n\ninterface HeadlessControllerProps {\n  setOpenPage: SetOpenPage;\n}\n\nconst transformOptionSelectionsToAttributes = (items: LineItems[]) =>\n  items.map((product) => {\n    const { selectedOptions } = product;\n\n    return {\n      ...product,\n      selectedOptions: selectedOptions?.reduce(\n        (accumulator: Record<string, number>, { optionEntityId, optionValueEntityId }) => {\n          accumulator[`attribute[${optionEntityId}]`] = optionValueEntityId;\n\n          return accumulator;\n        },\n        {},\n      ),\n    };\n  });\n\nexport type ProductMappedAttributes = ReturnType<typeof transformOptionSelectionsToAttributes>;\n\nconst Manager = new CallbackManager();\n\nexport default function HeadlessController({ setOpenPage }: HeadlessControllerProps) {\n  const storeDispatch = useAppDispatch();\n\n  const { state: globalState } = useContext(GlobalContext);\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const productList = useAppSelector(formattedQuoteDraftListSelector);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const B2BToken = useAppSelector(({ company }) => company.tokens.B2BToken);\n\n  const displayAddedToShoppingListAlert = useAddedToShoppingListAlert();\n\n  const {\n    state: { addQuoteBtn, shoppingListBtn, addToAllQuoteBtn },\n  } = useContext(CustomStyleContext);\n  const { addToQuoteFromCart, addToQuoteFromCookie } = addProductsFromCartToQuote(setOpenPage);\n\n  const {\n    registerEnabled,\n    productQuoteEnabled,\n    cartQuoteEnabled,\n    shoppingListEnabled,\n    quoteConfig,\n  } = globalState;\n\n  const saveFn = () => {\n    setOpenPage({\n      isOpen: true,\n      openUrl: '/register',\n    });\n  };\n\n  const customerId = customer.id;\n  // Keep updated values\n  const salesRepCompanyIdRef = useRef(Number(salesRepCompanyId));\n  const customerIdRef = useRef(customerId);\n  const customerRef = useRef(customer);\n  const roleRef = useRef(Number(role));\n  const isB2BUserRef = useRef(isB2BUser);\n  const productQuoteEnabledRef = useRef(productQuoteEnabled);\n  const shoppingListEnabledRef = useRef(shoppingListEnabled);\n  const cartQuoteEnabledRef = useRef(cartQuoteEnabled);\n  const addQuoteBtnRef = useRef(addQuoteBtn);\n  const shoppingListBtnRef = useRef(shoppingListBtn);\n  const addToAllQuoteBtnRef = useRef(addToAllQuoteBtn);\n\n  salesRepCompanyIdRef.current = Number(salesRepCompanyId);\n  customerIdRef.current = customerId;\n  customerRef.current = customer;\n  roleRef.current = Number(role);\n  isB2BUserRef.current = isB2BUser;\n  productQuoteEnabledRef.current = productQuoteEnabled;\n  shoppingListEnabledRef.current = shoppingListEnabled;\n  cartQuoteEnabledRef.current = cartQuoteEnabled;\n  addQuoteBtnRef.current = addQuoteBtn;\n  shoppingListBtnRef.current = shoppingListBtn;\n  addToAllQuoteBtnRef.current = addToAllQuoteBtn;\n\n  useEffect(() => {\n    window.b2b = {\n      ...window.b2b,\n      callbacks: Manager,\n      utils: {\n        getRoutes: () => getAllowedRoutesWithoutComponent(globalState),\n        openPage: (page) =>\n          setTimeout(() => {\n            if (page === 'CLOSE') {\n              setOpenPage({ isOpen: false });\n              return;\n            }\n            const openUrl = page.startsWith('/') ? page : HeadlessRoutes[page];\n            setOpenPage({ isOpen: true, openUrl });\n          }, 0),\n        quote: {\n          addProductFromPage: (item) => addProductsToDraftQuote([item], setOpenPage),\n          addProductsFromCart: addToQuoteFromCookie,\n          addProductsFromCartId: addToQuoteFromCart,\n          addProducts: (items) => addProductsToDraftQuote(items, setOpenPage),\n          getQuoteConfigs: () => quoteConfig,\n          getCurrent: () => ({ productList }),\n          getButtonInfo: () => ({\n            ...addQuoteBtnRef.current,\n            enabled: productQuoteEnabledRef.current,\n          }),\n          getButtonInfoAddAllFromCartToQuote: () => ({\n            ...addToAllQuoteBtnRef.current,\n            enabled: cartQuoteEnabledRef.current,\n          }),\n        },\n        user: {\n          getProfile: () => ({ ...customerRef.current, role }),\n          getMasqueradeState: async () => {\n            if (typeof customerRef.current.b2bId !== 'number') {\n              return {\n                current_company_id: salesRepCompanyIdRef.current,\n                companies: [],\n              };\n            }\n            // get companies list\n            const {\n              superAdminCompanies: { edges: companies = [] },\n            } = await superAdminCompanies(customerRef.current.b2bId, {\n              first: 50,\n              offset: 0,\n              orderBy: 'companyName',\n            });\n\n            return {\n              current_company_id: salesRepCompanyIdRef.current,\n              companies: companies.map(({ node }: { node: CustomFieldStringItems }) => node),\n            };\n          },\n          getB2BToken: () => B2BToken,\n          setMasqueradeCompany: (companyId) => {\n            if (typeof customerRef.current.b2bId !== 'number') return;\n            startMasquerade({\n              companyId,\n              customerId: customerIdRef.current,\n            });\n          },\n          endMasquerade: () => {\n            if (typeof customerRef.current.b2bId !== 'number') return;\n            endMasquerade();\n          },\n          graphqlBCProxy: B3Request.graphqlBCProxy,\n          loginWithB2BStorefrontToken: async (token: string) => {\n            storeDispatch(setB2BToken(token));\n            await getCurrentCustomerInfo(token);\n          },\n          logout: async () => {\n            try {\n              if (isAgenting) {\n                await endMasquerade();\n              }\n            } catch (e) {\n              b2bLogger.error(e);\n            } finally {\n              window.sessionStorage.clear();\n              logoutSession();\n              window.b2b.callbacks.dispatchEvent('on-logout');\n            }\n          },\n        },\n        shoppingList: {\n          itemFromCurrentPage: [],\n          addProductFromPage: (item) => {\n            window.b2b.utils.shoppingList.itemFromCurrentPage =\n              transformOptionSelectionsToAttributes([item]);\n            addProductFromPageToShoppingList({\n              role: roleRef.current,\n              storeDispatch,\n              saveFn,\n              setOpenPage,\n              registerEnabled,\n            });\n          },\n          addProducts: (shoppingListId, items) =>\n            addProductsToShoppingList({\n              shoppingListId,\n              items: transformOptionSelectionsToAttributes(items),\n              isB2BUser: isB2BUserRef.current,\n              customerGroupId: customerRef.current.customerGroupId,\n            }).then(() => displayAddedToShoppingListAlert(shoppingListId.toString())),\n          createNewShoppingList: async (name, description) => {\n            const { shoppingListsCreate } = await createShoppingList({\n              data: { name, description },\n              isB2BUser: isB2BUserRef.current,\n            });\n\n            return shoppingListsCreate.shoppingList;\n          },\n          getButtonInfo: () => ({\n            ...shoppingListBtnRef.current,\n            enabled: shoppingListEnabledRef.current,\n          }),\n        },\n        cart: {\n          setEntityId: (entityId) => {\n            Cookies.set('cartId', entityId);\n          },\n          getEntityId: () => Cookies.get('cartId'),\n        },\n      },\n    };\n    // disabling because we don't want to run this effect on every render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [productList, B2BToken, globalState, quoteConfig]);\n\n  return null;\n}\n"],"names":["CallbackManager","__publicField","callbackKey","callback","list","_a","cb","index","data","success","event","e","b2bLogger","transformOptionSelectionsToAttributes","items","product","selectedOptions","accumulator","optionEntityId","optionValueEntityId","Manager","HeadlessController","setOpenPage","storeDispatch","useAppDispatch","globalState","useContext","GlobalContext","isB2BUser","useAppSelector","isB2BUserSelector","salesRepCompanyId","b2bFeatures","customer","company","role","productList","formattedQuoteDraftListSelector","isAgenting","B2BToken","displayAddedToShoppingListAlert","useAddedToShoppingListAlert","addQuoteBtn","shoppingListBtn","addToAllQuoteBtn","CustomStyleContext","addToQuoteFromCart","addToQuoteFromCookie","addProductsFromCartToQuote","registerEnabled","productQuoteEnabled","cartQuoteEnabled","shoppingListEnabled","quoteConfig","saveFn","customerId","salesRepCompanyIdRef","useRef","customerIdRef","customerRef","roleRef","isB2BUserRef","productQuoteEnabledRef","shoppingListEnabledRef","cartQuoteEnabledRef","addQuoteBtnRef","shoppingListBtnRef","addToAllQuoteBtnRef","useEffect","getAllowedRoutesWithoutComponent","page","openUrl","HeadlessRoutes","item","addProductsToDraftQuote","companies","superAdminCompanies","node","companyId","startMasquerade","endMasquerade","B3Request","token","setB2BToken","getCurrentCustomerInfo","logoutSession","addProductFromPageToShoppingList","shoppingListId","addProductsToShoppingList","name","description","shoppingListsCreate","createShoppingList","entityId","Cookies"],"mappings":"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"}