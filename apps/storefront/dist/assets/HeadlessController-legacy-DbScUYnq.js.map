{"version":3,"file":"HeadlessController-legacy-DbScUYnq.js","sources":["../../src/components/HeadlessController.tsx","../../src/utils/b3CallbackManager.ts"],"sourcesContent":["import { useContext, useEffect, useRef } from 'react';\nimport Cookies from 'js-cookie';\n\nimport { HeadlessRoutes } from '@/constants';\nimport { addProductFromPage as addProductFromPageToShoppingList } from '@/hooks/dom/useOpenPDP';\nimport { addProductsFromCartToQuote, addProductsToDraftQuote } from '@/hooks/dom/utils';\nimport { addProductsToShoppingList, useAddedToShoppingListAlert } from '@/pages/PDP';\nimport { type SetOpenPage } from '@/pages/SetOpenPage';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { GlobalContext } from '@/shared/global';\nimport { getAllowedRoutesWithoutComponent } from '@/shared/routeList';\nimport { superAdminCompanies } from '@/shared/service/b2b';\nimport B3Request from '@/shared/service/request/b3Fetch';\nimport {\n  formattedQuoteDraftListSelector,\n  isB2BUserSelector,\n  useAppDispatch,\n  useAppSelector,\n} from '@/store';\nimport { setB2BToken } from '@/store/slices/company';\nimport { QuoteItem } from '@/types/quotes';\nimport CallbackManager from '@/utils/b3CallbackManager';\nimport b2bLogger from '@/utils/b3Logger';\nimport { logoutSession } from '@/utils/b3logout';\nimport { LineItems } from '@/utils/b3Product/b3Product';\nimport createShoppingList from '@/utils/b3ShoppingList/b3ShoppingList';\nimport { getCurrentCustomerInfo } from '@/utils/loginInfo';\nimport { endMasquerade, startMasquerade } from '@/utils/masquerade';\n\nexport interface FormattedQuoteItem\n  extends Omit<QuoteItem['node'], 'optionList' | 'calculatedValue' | 'productsSearch'> {\n  optionSelections: {\n    optionId: string | number;\n    optionValue: number;\n  }[];\n}\n\ninterface HeadlessControllerProps {\n  setOpenPage: SetOpenPage;\n}\n\nconst transformOptionSelectionsToAttributes = (items: LineItems[]) =>\n  items.map((product) => {\n    const { selectedOptions } = product;\n\n    return {\n      ...product,\n      selectedOptions: selectedOptions?.reduce(\n        (accumulator: Record<string, number>, { optionEntityId, optionValueEntityId }) => {\n          accumulator[`attribute[${optionEntityId}]`] = optionValueEntityId;\n\n          return accumulator;\n        },\n        {},\n      ),\n    };\n  });\n\nexport type ProductMappedAttributes = ReturnType<typeof transformOptionSelectionsToAttributes>;\n\nconst Manager = new CallbackManager();\n\nexport default function HeadlessController({ setOpenPage }: HeadlessControllerProps) {\n  const storeDispatch = useAppDispatch();\n\n  const { state: globalState } = useContext(GlobalContext);\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const productList = useAppSelector(formattedQuoteDraftListSelector);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const B2BToken = useAppSelector(({ company }) => company.tokens.B2BToken);\n\n  const displayAddedToShoppingListAlert = useAddedToShoppingListAlert();\n\n  const {\n    state: { addQuoteBtn, shoppingListBtn, addToAllQuoteBtn },\n  } = useContext(CustomStyleContext);\n  const { addToQuoteFromCart, addToQuoteFromCookie } = addProductsFromCartToQuote(setOpenPage);\n\n  const {\n    registerEnabled,\n    productQuoteEnabled,\n    cartQuoteEnabled,\n    shoppingListEnabled,\n    quoteConfig,\n  } = globalState;\n\n  const saveFn = () => {\n    setOpenPage({\n      isOpen: true,\n      openUrl: '/register',\n    });\n  };\n\n  const customerId = customer.id;\n  // Keep updated values\n  const salesRepCompanyIdRef = useRef(Number(salesRepCompanyId));\n  const customerIdRef = useRef(customerId);\n  const customerRef = useRef(customer);\n  const roleRef = useRef(Number(role));\n  const isB2BUserRef = useRef(isB2BUser);\n  const productQuoteEnabledRef = useRef(productQuoteEnabled);\n  const shoppingListEnabledRef = useRef(shoppingListEnabled);\n  const cartQuoteEnabledRef = useRef(cartQuoteEnabled);\n  const addQuoteBtnRef = useRef(addQuoteBtn);\n  const shoppingListBtnRef = useRef(shoppingListBtn);\n  const addToAllQuoteBtnRef = useRef(addToAllQuoteBtn);\n\n  salesRepCompanyIdRef.current = Number(salesRepCompanyId);\n  customerIdRef.current = customerId;\n  customerRef.current = customer;\n  roleRef.current = Number(role);\n  isB2BUserRef.current = isB2BUser;\n  productQuoteEnabledRef.current = productQuoteEnabled;\n  shoppingListEnabledRef.current = shoppingListEnabled;\n  cartQuoteEnabledRef.current = cartQuoteEnabled;\n  addQuoteBtnRef.current = addQuoteBtn;\n  shoppingListBtnRef.current = shoppingListBtn;\n  addToAllQuoteBtnRef.current = addToAllQuoteBtn;\n\n  useEffect(() => {\n    window.b2b = {\n      ...window.b2b,\n      callbacks: Manager,\n      utils: {\n        getRoutes: () => getAllowedRoutesWithoutComponent(globalState),\n        openPage: (page) =>\n          setTimeout(() => {\n            if (page === 'CLOSE') {\n              setOpenPage({ isOpen: false });\n              return;\n            }\n            const openUrl = page.startsWith('/') ? page : HeadlessRoutes[page];\n            setOpenPage({ isOpen: true, openUrl });\n          }, 0),\n        quote: {\n          addProductFromPage: (item) => addProductsToDraftQuote([item], setOpenPage),\n          addProductsFromCart: addToQuoteFromCookie,\n          addProductsFromCartId: addToQuoteFromCart,\n          addProducts: (items) => addProductsToDraftQuote(items, setOpenPage),\n          getQuoteConfigs: () => quoteConfig,\n          getCurrent: () => ({ productList }),\n          getButtonInfo: () => ({\n            ...addQuoteBtnRef.current,\n            enabled: productQuoteEnabledRef.current,\n          }),\n          getButtonInfoAddAllFromCartToQuote: () => ({\n            ...addToAllQuoteBtnRef.current,\n            enabled: cartQuoteEnabledRef.current,\n          }),\n        },\n        user: {\n          getProfile: () => ({ ...customerRef.current, role }),\n          getMasqueradeState: async () => {\n            if (typeof customerRef.current.b2bId !== 'number') {\n              return {\n                current_company_id: salesRepCompanyIdRef.current,\n                companies: [],\n              };\n            }\n            // get companies list\n            const {\n              superAdminCompanies: { edges: companies = [] },\n            } = await superAdminCompanies(customerRef.current.b2bId, {\n              first: 50,\n              offset: 0,\n              orderBy: 'companyName',\n            });\n\n            return {\n              current_company_id: salesRepCompanyIdRef.current,\n              companies: companies.map(({ node }: { node: CustomFieldStringItems }) => node),\n            };\n          },\n          getB2BToken: () => B2BToken,\n          setMasqueradeCompany: (companyId) => {\n            if (typeof customerRef.current.b2bId !== 'number') return;\n            startMasquerade({\n              companyId,\n              customerId: customerIdRef.current,\n            });\n          },\n          endMasquerade: () => {\n            if (typeof customerRef.current.b2bId !== 'number') return;\n            endMasquerade();\n          },\n          graphqlBCProxy: B3Request.graphqlBCProxy,\n          loginWithB2BStorefrontToken: async (token: string) => {\n            storeDispatch(setB2BToken(token));\n            await getCurrentCustomerInfo(token);\n          },\n          logout: async () => {\n            try {\n              if (isAgenting) {\n                await endMasquerade();\n              }\n            } catch (e) {\n              b2bLogger.error(e);\n            } finally {\n              window.sessionStorage.clear();\n              logoutSession();\n              window.b2b.callbacks.dispatchEvent('on-logout');\n            }\n          },\n        },\n        shoppingList: {\n          itemFromCurrentPage: [],\n          addProductFromPage: (item) => {\n            window.b2b.utils.shoppingList.itemFromCurrentPage =\n              transformOptionSelectionsToAttributes([item]);\n            addProductFromPageToShoppingList({\n              role: roleRef.current,\n              storeDispatch,\n              saveFn,\n              setOpenPage,\n              registerEnabled,\n            });\n          },\n          addProducts: (shoppingListId, items) =>\n            addProductsToShoppingList({\n              shoppingListId,\n              items: transformOptionSelectionsToAttributes(items),\n              isB2BUser: isB2BUserRef.current,\n              customerGroupId: customerRef.current.customerGroupId,\n            }).then(() => displayAddedToShoppingListAlert(shoppingListId.toString())),\n          createNewShoppingList: async (name, description) => {\n            const { shoppingListsCreate } = await createShoppingList({\n              data: { name, description },\n              isB2BUser: isB2BUserRef.current,\n            });\n\n            return shoppingListsCreate.shoppingList;\n          },\n          getButtonInfo: () => ({\n            ...shoppingListBtnRef.current,\n            enabled: shoppingListEnabledRef.current,\n          }),\n        },\n        cart: {\n          setEntityId: (entityId) => {\n            Cookies.set('cartId', entityId);\n          },\n          getEntityId: () => Cookies.get('cartId'),\n        },\n      },\n    };\n    // disabling because we don't want to run this effect on every render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [productList, B2BToken, globalState, quoteConfig]);\n\n  return null;\n}\n","import { EventType } from '@b3/hooks';\n\nimport b2bLogger from './b3Logger';\n\ntype CallbackEvent = {\n  data: CustomFieldItems;\n  preventDefault: () => void;\n};\n\ntype Callback = (event: CallbackEvent) => any;\n\nexport default class CallbackManager {\n  private callbacks: Map<EventType, Callback[]> = new Map();\n\n  /**\n   * Registers a callback function for a specific event and returns a unique hash for it.\n   * @param callbackKey The event key (e.g., 'onAddToCart').\n   * @param callback The callback function to register.\n   * @returns A unique hash identifying the registered callback.\n   */\n  addEventListener(callbackKey: EventType, callback: Callback): void {\n    if (typeof callback !== 'function') {\n      console.error('callback should be a function'); // eslint-disable-line no-console\n      return;\n    }\n\n    if (!this.callbacks.has(callbackKey)) {\n      this.callbacks.set(callbackKey, [callback]);\n    } else {\n      const list = this.callbacks.get(callbackKey) ?? [];\n      const inList = list.find((cb) => cb === callback);\n\n      if (!inList) {\n        list.push(callback);\n      }\n    }\n  }\n\n  /**\n   * Unregister a callback identified by a hash and event key.\n   * @param callbackKey The event key (e.g., 'onAddToCart').\n   * @param hash The unique hash of the callback to unregister.\n   * @returns True if the callback was successfully removed, false otherwise.\n   */\n  removeEventListener(callbackKey: EventType, callback: Callback): boolean {\n    if (!this.callbacks.has(callbackKey)) {\n      return false;\n    }\n    const list = this.callbacks.get(callbackKey) ?? [];\n    const index = list.findIndex((cb) => cb === callback);\n    if (index === -1) {\n      return false;\n    }\n    list.splice(index, 1);\n    this.callbacks.set(callbackKey, list);\n    return true;\n  }\n\n  /**\n   * Triggers all callbacks registered for a specific event.\n   * @param callbackKey The event key (e.g., 'onAddToCart').\n   * @param data The data to pass to the callback.\n   * @returns True if all callbacks were successfully executed, false otherwise.\n   */\n  dispatchEvent(callbackKey: EventType, data?: any): boolean {\n    let success = true;\n    const event = {\n      data,\n      preventDefault: () => {\n        success = false;\n      },\n    };\n    if (!this.callbacks.has(callbackKey)) {\n      return true;\n    }\n    const list = this.callbacks.get(callbackKey) ?? [];\n    list.forEach((callback) => {\n      try {\n        callback(event);\n      } catch (e) {\n        success = false;\n        if (e instanceof Error) {\n          b2bLogger.error(e.message);\n        }\n      }\n    });\n    return success;\n  }\n}\n"],"names":["setOpenPage","storeDispatch","useAppDispatch","state","globalState","useContext","GlobalContext","isB2BUser","useAppSelector","isB2BUserSelector","salesRepCompanyId","b2bFeatures","masqueradeCompany","id","customer","company","role","productList","formattedQuoteDraftListSelector","isAgenting","B2BToken","tokens","displayAddedToShoppingListAlert","useAddedToShoppingListAlert","addQuoteBtn","shoppingListBtn","addToAllQuoteBtn","CustomStyleContext","addToQuoteFromCart","addToQuoteFromCookie","addProductsFromCartToQuote","registerEnabled","productQuoteEnabled","cartQuoteEnabled","shoppingListEnabled","quoteConfig","saveFn","isOpen","openUrl","customerId","salesRepCompanyIdRef","useRef","Number","customerIdRef","customerRef","roleRef","isB2BUserRef","productQuoteEnabledRef","shoppingListEnabledRef","cartQuoteEnabledRef","addQuoteBtnRef","shoppingListBtnRef","addToAllQuoteBtnRef","current","useEffect","window","b2b","callbacks","Manager","utils","getRoutes","getAllowedRoutesWithoutComponent","openPage","page","setTimeout","startsWith","HeadlessRoutes","quote","addProductFromPage","item","addProductsToDraftQuote","addProductsFromCart","addProductsFromCartId","addProducts","items","getQuoteConfigs","getCurrent","getButtonInfo","enabled","getButtonInfoAddAllFromCartToQuote","user","getProfile","getMasqueradeState","async","b2bId","current_company_id","companies","superAdminCompanies","edges","first","offset","orderBy","map","node","getB2BToken","setMasqueradeCompany","companyId","startMasquerade","endMasquerade","graphqlBCProxy","B3Request","loginWithB2BStorefrontToken","setB2BToken","token","getCurrentCustomerInfo","logout","e","b2bLogger","error","sessionStorage","clear","logoutSession","dispatchEvent","shoppingList","itemFromCurrentPage","transformOptionSelectionsToAttributes","addProductFromPageToShoppingList","shoppingListId","addProductsToShoppingList","customerGroupId","then","toString","createNewShoppingList","name","description","shoppingListsCreate","createShoppingList","data","cart","setEntityId","entityId","Cookies","set","getEntityId","get","product","selectedOptions","reduce","accumulator","optionEntityId","optionValueEntityId","Map","addEventListener","callbackKey","callback","this","has","list","find","cb","push","console","removeEventListener","index","findIndex","splice","success","event","preventDefault","forEach","Error","message"],"mappings":"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"}