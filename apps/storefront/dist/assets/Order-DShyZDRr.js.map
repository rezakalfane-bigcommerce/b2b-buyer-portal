{"version":3,"file":"Order-DShyZDRr.js","sources":["../../src/pages/order/config.ts","../../src/pages/order/OrderItemCard.tsx","../../src/pages/order/Order.tsx"],"sourcesContent":["import { CustomerRole } from '@/types';\nimport { OrderStatusType } from '@/types/gql/graphql';\n\nexport interface FilterSearchProps {\n  [key: string]: string | number | number[] | null;\n  beginDateAt: string | null;\n  endDateAt: string | null;\n  orderBy: string;\n  createdBy: string;\n  q: string;\n  companyName: string;\n  isShowMy: number;\n  companyId: string;\n  companyIds: number[];\n}\n\nexport interface FilterMoreProps {\n  startValue?: string;\n  endValue?: string;\n  PlacedBy?: string;\n  company?: string;\n  orderStatus?: string | number;\n}\n\nexport const defaultSortKey = 'orderId';\n\nexport const sortKeys = {\n  orderId: 'bcOrderId',\n  poNumber: 'poNumber',\n  totalIncTax: 'totalIncTax',\n  status: 'status',\n  placedBy: 'placedBy',\n  createdAt: 'createdAt',\n};\n\nconst b2bFilterSearch: FilterSearchProps = {\n  q: '',\n  companyId: '',\n  beginDateAt: null,\n  endDateAt: null,\n  companyName: '',\n  orderBy: `-${sortKeys[defaultSortKey]}`,\n  createdBy: '',\n  orderNumber: '',\n  poNumber: '',\n  isShowMy: 0,\n  companyIds: [],\n};\n\nconst bcFilterSearch = {\n  beginDateAt: null,\n  endDateAt: null,\n  orderBy: `-${sortKeys[defaultSortKey]}`,\n  createdBy: '',\n  q: '',\n};\n\nexport const getFilterMoreData = (\n  isB2BUser: boolean,\n  role: string | number,\n  isCompanyOrder: boolean,\n  isAgenting: boolean,\n  createdByUsers: any,\n  orderStatuses: OrderStatusType[] = [],\n) => {\n  const newOrderStatuses = orderStatuses.filter(\n    (item) => item.statusCode !== '0' && item.statusCode !== '1',\n  );\n  const newCreatedByUsers =\n    createdByUsers?.createdByUser?.results.map((item: any) => ({\n      createdBy: `${item.firstName} ${item.lastName} (${item.email})`,\n    })) || [];\n  const filterMoreList = [\n    {\n      name: 'company',\n      label: 'Company',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n      idLang: 'orders.company',\n    },\n    {\n      name: 'orderStatus',\n      label: 'Order status',\n      required: false,\n      default: '',\n      fieldType: 'dropdown',\n      options: newOrderStatuses,\n      replaceOptions: {\n        label: 'customLabel',\n        value: 'customLabel',\n      },\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n      idLang: 'orders.orderStatus',\n    },\n    {\n      name: 'PlacedBy',\n      label: 'Placed by',\n      required: false,\n      default: '',\n      fieldType: 'dropdown',\n      options: newCreatedByUsers,\n      replaceOptions: {\n        label: 'createdBy',\n        value: 'createdBy',\n      },\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n      idLang: 'orders.placedBy',\n    },\n  ];\n\n  const filterCondition = isB2BUser && !(Number(role) === 3 && !isAgenting);\n  const filterCurrentMoreList = filterMoreList.filter((item) => {\n    if (\n      (!isB2BUser || filterCondition) &&\n      !isCompanyOrder &&\n      (item.name === 'company' || item.name === 'PlacedBy')\n    )\n      return false;\n    if (Number(role) === 3 && !isAgenting && item.name === 'PlacedBy') return false;\n    if (\n      (isB2BUser || (Number(role) === CustomerRole.SUPER_ADMIN && isAgenting)) &&\n      isCompanyOrder &&\n      item.name === 'company'\n    )\n      return false;\n    return true;\n  });\n\n  return filterCurrentMoreList;\n};\n\nexport const getInitFilter = (\n  isCompanyOrder: boolean,\n  isB2BUser: boolean,\n): Partial<FilterSearchProps> => {\n  if (isB2BUser) b2bFilterSearch.isShowMy = isCompanyOrder ? 0 : 1;\n\n  return isB2BUser ? b2bFilterSearch : bcFilterSearch;\n};\n\nexport const currencySymbol = (currencyItem: string) => {\n  try {\n    if (currencyItem) {\n      const currencyToken = JSON.parse(JSON.parse(currencyItem))?.currency_token || '';\n\n      return currencyToken;\n    }\n\n    return '';\n  } catch (e) {\n    return '';\n  }\n};\n\nexport const getOrderStatusText = (status: number | string, getOrderStatuses: any) =>\n  getOrderStatuses.find((item: any) => item.systemLabel === status)?.customLabel || '';\n","import { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport { useTheme } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\n\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { currencyFormat, displayFormat } from '@/utils';\n\nimport OrderStatus from './components/OrderStatus';\n\ninterface ListItem {\n  orderId: string;\n  firstName: string;\n  lastName: string;\n  poNumber?: string;\n  status: string;\n  totalIncTax: string;\n  createdAt: string;\n}\n\nexport interface OrderItemCardProps {\n  allTotal: number;\n  filterData: any;\n  index?: number;\n  item: ListItem;\n  isCompanyOrder: boolean;\n}\n\nconst Flex = styled('div')(() => ({\n  display: 'flex',\n  alignItems: 'center',\n  '&.between-flex': {\n    justifyContent: 'space-between',\n  },\n}));\n\nexport function OrderItemCard({\n  item,\n  allTotal,\n  filterData,\n  index = 0,\n  isCompanyOrder,\n}: OrderItemCardProps) {\n  const theme = useTheme();\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const navigate = useNavigate();\n\n  const goToDetail = (item: ListItem) => {\n    navigate(`/orderDetail/${item.orderId}`, {\n      state: {\n        currentIndex: index || 0,\n        searchParams: filterData,\n        totalCount: allTotal,\n        isCompanyOrder,\n      },\n    });\n  };\n\n  const getName = (item: ListItem) => {\n    if (isB2BUser) {\n      return `by ${item.firstName} ${item.lastName}`;\n    }\n    return `by ${customer.firstName} ${customer.lastName}`;\n  };\n\n  return (\n    <Card key={item.orderId}>\n      <CardContent\n        sx={{\n          color: 'rgba(0, 0, 0, 0.6)',\n        }}\n        onClick={() => goToDetail(item)}\n      >\n        <Flex className=\"between-flex\">\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n            }}\n          >\n            <Typography\n              variant=\"h5\"\n              sx={{\n                color: 'rgba(0, 0, 0, 0.87)',\n              }}\n            >\n              {`# ${item.orderId}`}\n            </Typography>\n            <Typography\n              sx={{\n                ml: 1,\n              }}\n              variant=\"body2\"\n            >\n              {item.poNumber ? item.poNumber : 'â€“'}\n            </Typography>\n          </Box>\n          <Box>\n            <OrderStatus code={item.status} />\n          </Box>\n        </Flex>\n\n        <Typography\n          variant=\"h6\"\n          sx={{\n            marginBottom: theme.spacing(2.5),\n            mt: theme.spacing(1.5),\n            minHeight: '1.43em',\n          }}\n        >\n          {currencyFormat(item.totalIncTax)}\n        </Typography>\n\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Typography\n            variant=\"body2\"\n            sx={{\n              fontWeight: 'normal',\n              marginRight: theme.spacing(2),\n            }}\n          >\n            {getName(item)}\n          </Typography>\n          <Typography>{`${displayFormat(item.createdAt)}`}</Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\n\nimport { B2BAutoCompleteCheckbox } from '@/components';\nimport B3Filter from '@/components/filter/B3Filter';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { B3PaginationTable, GetRequestList } from '@/components/table/B3PaginationTable';\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport { useMobile, useSort } from '@/hooks';\nimport {\n  getB2BAllOrders,\n  getBCAllOrders,\n  getBcOrderStatusType,\n  getOrdersCreatedByUser,\n  getOrderStatusType,\n} from '@/shared/service/b2b';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { CustomerRole } from '@/types';\nimport { currencyFormat, displayFormat, ordersCurrencyFormat } from '@/utils';\n\nimport OrderStatus from './components/OrderStatus';\nimport { orderStatusTranslationVariables } from './shared/getOrderStatus';\nimport {\n  defaultSortKey,\n  FilterSearchProps,\n  getFilterMoreData,\n  getInitFilter,\n  getOrderStatusText,\n  sortKeys,\n} from './config';\nimport { OrderItemCard } from './OrderItemCard';\n\ninterface CompanyInfoProps {\n  companyId: string;\n  companyName: string;\n  companyAddress: string;\n  companyCountry: string;\n  companyState: string;\n  companyCity: string;\n  companyZipCode: string;\n  phoneNumber: string;\n  bcId: string;\n}\n\ninterface ListItem {\n  firstName: string;\n  lastName: string;\n  orderId: string;\n  poNumber?: string;\n  money: string;\n  totalIncTax: string;\n  status: string;\n  createdAt: string;\n  companyName: string;\n  companyInfo?: CompanyInfoProps;\n}\n\ninterface SearchChangeProps {\n  startValue?: string;\n  endValue?: string;\n  PlacedBy?: string;\n  orderStatus?: string | number;\n  company?: string;\n}\n\ninterface OrderProps {\n  isCompanyOrder?: boolean;\n}\n\nfunction useData() {\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyB2BId = useAppSelector(({ company }) => company.companyInfo.id);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n\n  const { order: orderSubViewPermission } = useAppSelector(\n    ({ company }) => company.pagesSubsidiariesPermission,\n  );\n\n  const { selectCompanyHierarchyId, isEnabledCompanyHierarchy } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n  const currentCompanyId =\n    role === CustomerRole.SUPER_ADMIN && isAgenting\n      ? Number(salesRepCompanyId)\n      : Number(companyB2BId);\n\n  const companyId = companyB2BId || salesRepCompanyId;\n\n  return {\n    role,\n    isAgenting,\n    isB2BUser,\n    orderSubViewPermission,\n    selectCompanyHierarchyId,\n    isEnabledCompanyHierarchy,\n    currentCompanyId,\n    companyId,\n  };\n}\n\nfunction Order({ isCompanyOrder = false }: OrderProps) {\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n  const {\n    role,\n    isAgenting,\n    companyId,\n    isB2BUser,\n    orderSubViewPermission,\n    selectCompanyHierarchyId,\n    isEnabledCompanyHierarchy,\n    currentCompanyId,\n  } = useData();\n\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n  const [allTotal, setAllTotal] = useState(0);\n  const [filterData, setFilterData] = useState<Partial<FilterSearchProps> | null>(null);\n  const [filterInfo, setFilterInfo] = useState<Array<any>>([]);\n  const [getOrderStatuses, setOrderStatuses] = useState<Array<any>>([]);\n  const [isAutoRefresh, setIsAutoRefresh] = useState(false);\n\n  const [handleSetOrderBy, order, orderBy] = useSort(\n    sortKeys,\n    defaultSortKey,\n    filterData,\n    setFilterData,\n  );\n\n  useEffect(() => {\n    const search = getInitFilter(isCompanyOrder, isB2BUser);\n    if (isB2BUser) {\n      search.companyIds = [Number(selectCompanyHierarchyId) || Number(currentCompanyId)];\n    }\n    setFilterData(search);\n    setIsAutoRefresh(true);\n    if (role === 100) return;\n\n    const initFilter = async () => {\n      const createdByUsers =\n        isB2BUser && isCompanyOrder ? await getOrdersCreatedByUser(Number(companyId), 0) : {};\n\n      const orderStatuses = isB2BUser ? await getOrderStatusType() : await getBcOrderStatusType();\n\n      const filterInfo = getFilterMoreData(\n        isB2BUser,\n        role,\n        isCompanyOrder,\n        isAgenting,\n        createdByUsers,\n        orderStatuses,\n      );\n      setOrderStatuses(orderStatuses);\n\n      const filterInfoWithTranslatedLabel = filterInfo.map((element) => {\n        const translatedElement = element;\n        translatedElement.label = b3Lang(element.idLang);\n\n        if (element.name === 'orderStatus') {\n          translatedElement.options = element.options.map(\n            (option: { customLabel: string; systemLabel: string }) => {\n              const optionLabel = orderStatusTranslationVariables[option.systemLabel];\n              const elementOption = option;\n              elementOption.customLabel =\n                b3Lang(optionLabel) === elementOption.systemLabel\n                  ? elementOption.customLabel\n                  : b3Lang(optionLabel);\n\n              return option;\n            },\n          );\n        }\n\n        return element;\n      });\n\n      setFilterInfo(filterInfoWithTranslatedLabel);\n    };\n\n    initFilter();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectCompanyHierarchyId]);\n\n  const fetchList: GetRequestList<Partial<FilterSearchProps>, ListItem> = async (params) => {\n    const { edges = [], totalCount } = isB2BUser\n      ? await getB2BAllOrders(params)\n      : await getBCAllOrders(params);\n\n    setAllTotal(totalCount);\n    setIsAutoRefresh(false);\n    return {\n      edges,\n      totalCount,\n    };\n  };\n\n  const navigate = useNavigate();\n\n  const goToDetail = (item: ListItem, index: number) => {\n    navigate(`/orderDetail/${item.orderId}`, {\n      state: {\n        currentIndex: index,\n        searchParams: filterData,\n        totalCount: allTotal,\n        isCompanyOrder,\n        beginDateAt: filterData?.beginDateAt,\n        endDateAt: filterData?.endDateAt,\n      },\n    });\n  };\n\n  const columnAllItems: TableColumnItem<ListItem>[] = [\n    {\n      key: 'orderId',\n      title: b3Lang('orders.order'),\n      width: '10%',\n      isSortable: true,\n    },\n    {\n      key: 'companyName',\n      title: b3Lang('orders.company'),\n      width: '10%',\n      isSortable: false,\n      render: (item: ListItem) => {\n        const { companyInfo } = item;\n\n        return <Box>{companyInfo?.companyName || 'â€“'}</Box>;\n      },\n    },\n    {\n      key: 'poNumber',\n      title: b3Lang('orders.poReference'),\n      render: (item: ListItem) => <Box>{item.poNumber ? item.poNumber : 'â€“'}</Box>,\n      width: '10%',\n      isSortable: true,\n    },\n    {\n      key: 'totalIncTax',\n      title: b3Lang('orders.grandTotal'),\n      render: (item: ListItem) =>\n        item?.money\n          ? ordersCurrencyFormat(JSON.parse(JSON.parse(item.money)), item.totalIncTax)\n          : currencyFormat(item.totalIncTax),\n      width: '8%',\n      style: {\n        textAlign: 'right',\n      },\n      isSortable: true,\n    },\n    {\n      key: 'status',\n      title: b3Lang('orders.orderStatus'),\n      render: (item: ListItem) => (\n        <OrderStatus text={getOrderStatusText(item.status, getOrderStatuses)} code={item.status} />\n      ),\n      width: '10%',\n      isSortable: true,\n    },\n    {\n      key: 'placedBy',\n      title: b3Lang('orders.placedBy'),\n      render: (item: ListItem) => `${item.firstName} ${item.lastName}`,\n      width: '10%',\n      isSortable: true,\n    },\n    {\n      key: 'createdAt',\n      title: b3Lang('orders.createdOn'),\n      render: (item: ListItem) => `${displayFormat(Number(item.createdAt))}`,\n      width: '10%',\n      isSortable: true,\n    },\n  ];\n\n  const getColumnItems = () => {\n    const getNewColumnItems = columnAllItems.filter((item: { key: string }) => {\n      const { key } = item;\n      if (!isB2BUser && key === 'companyName') return false;\n      if ((!isB2BUser || (Number(role) === 3 && !isAgenting)) && key === 'placedBy') return false;\n      if (key === 'companyId' && isB2BUser && (Number(role) !== 3 || isAgenting)) return false;\n      if (\n        (key === 'companyId' || key === 'placedBy') &&\n        !(Number(role) === 3 && !isAgenting) &&\n        !isCompanyOrder\n      )\n        return false;\n      return true;\n    });\n\n    return getNewColumnItems;\n  };\n\n  const handleChange = (key: string, value: string) => {\n    if (key === 'search') {\n      setFilterData({\n        ...filterData,\n        q: value,\n      });\n    }\n  };\n\n  const handleFilterChange = (value: SearchChangeProps) => {\n    let currentStatus = value?.orderStatus || '';\n    if (currentStatus) {\n      const originStatus = getOrderStatuses.find(\n        (status) => status.customLabel === currentStatus || status.systemLabel === currentStatus,\n      );\n\n      currentStatus = originStatus?.systemLabel || currentStatus;\n    }\n\n    const search: Partial<FilterSearchProps> = {\n      beginDateAt: value?.startValue || null,\n      endDateAt: value?.endValue || null,\n      createdBy: value?.PlacedBy || '',\n      statusCode: currentStatus,\n      companyName: value?.company || '',\n    };\n    setFilterData({\n      ...filterData,\n      ...search,\n    });\n  };\n\n  const columnItems = getColumnItems();\n\n  const handleSelectCompanies = (company: number[]) => {\n    const newCompanyIds = company.includes(-1) ? [] : company;\n\n    setFilterData({\n      ...filterData,\n      companyIds: newCompanyIds,\n    });\n  };\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          width: '100%',\n        }}\n      >\n        <Box\n          sx={{\n            width: isMobile ? '100%' : 'auto',\n            display: 'flex',\n            justifyContent: 'flex-start',\n            alignItems: isMobile ? 'flex-start' : 'center',\n            flexDirection: isMobile ? 'column' : 'row',\n\n            '& > div': {\n              width: isMobile ? '100%' : 'auto',\n            },\n          }}\n        >\n          {isEnabledCompanyHierarchy && orderSubViewPermission && (\n            <Box sx={{ mr: isMobile ? 0 : '10px', mb: '30px' }}>\n              <B2BAutoCompleteCheckbox handleChangeCompanyIds={handleSelectCompanies} />\n            </Box>\n          )}\n          <B3Filter\n            startPicker={{\n              isEnabled: true,\n              label: b3Lang('orders.from'),\n              defaultValue: filterData?.beginDateAt || null,\n              pickerKey: 'start',\n            }}\n            endPicker={{\n              isEnabled: true,\n              label: b3Lang('orders.to'),\n              defaultValue: filterData?.endDateAt || null,\n              pickerKey: 'end',\n            }}\n            filterMoreInfo={filterInfo}\n            handleChange={handleChange}\n            handleFilterChange={handleFilterChange}\n            pcTotalWidth=\"100%\"\n            pcContainerWidth=\"100%\"\n            pcSearchContainerWidth=\"100%\"\n          />\n        </Box>\n\n        <B3PaginationTable\n          columnItems={columnItems}\n          rowsPerPageOptions={[10, 20, 30]}\n          getRequestList={fetchList}\n          searchParams={filterData || {}}\n          isCustomRender={false}\n          requestLoading={setIsRequestLoading}\n          tableKey=\"orderId\"\n          pageType=\"orderListPage\"\n          isAutoRefresh={isAutoRefresh}\n          sortDirection={order}\n          orderBy={orderBy}\n          sortByFn={handleSetOrderBy}\n          renderItem={(row, index) => (\n            <OrderItemCard\n              key={row.orderId}\n              item={row}\n              index={index}\n              allTotal={allTotal}\n              filterData={filterData}\n              isCompanyOrder={isCompanyOrder}\n            />\n          )}\n          onClickRow={(item, index) => {\n            if (index !== undefined) {\n              goToDetail(item, index);\n            }\n          }}\n          hover\n        />\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default Order;\n"],"names":["defaultSortKey","sortKeys","b2bFilterSearch","bcFilterSearch","getFilterMoreData","isB2BUser","role","isCompanyOrder","isAgenting","createdByUsers","orderStatuses","newOrderStatuses","item","newCreatedByUsers","_a","filterMoreList","filterCondition","CustomerRole","getInitFilter","getOrderStatusText","status","getOrderStatuses","Flex","styled","OrderItemCard","allTotal","filterData","index","theme","useTheme","useAppSelector","isB2BUserSelector","customer","company","navigate","useNavigate","goToDetail","getName","Card","jsxs","CardContent","Box","jsx","Typography","OrderStatus","currencyFormat","displayFormat","useData","companyB2BId","salesRepCompanyId","b2bFeatures","orderSubViewPermission","selectCompanyHierarchyId","isEnabledCompanyHierarchy","currentCompanyId","Order","b3Lang","useB3Lang","isMobile","useMobile","companyId","isRequestLoading","setIsRequestLoading","useState","setAllTotal","setFilterData","filterInfo","setFilterInfo","setOrderStatuses","isAutoRefresh","setIsAutoRefresh","handleSetOrderBy","order","orderBy","useSort","useEffect","search","getOrdersCreatedByUser","getOrderStatusType","getBcOrderStatusType","filterInfoWithTranslatedLabel","element","translatedElement","option","optionLabel","orderStatusTranslationVariables","elementOption","fetchList","params","edges","totalCount","getB2BAllOrders","getBCAllOrders","columnAllItems","companyInfo","ordersCurrencyFormat","getColumnItems","key","handleChange","value","handleFilterChange","currentStatus","originStatus","columnItems","handleSelectCompanies","newCompanyIds","B3Spin","B2BAutoCompleteCheckbox","B3Filter","B3PaginationTable","row"],"mappings":"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"}