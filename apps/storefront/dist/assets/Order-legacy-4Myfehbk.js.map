{"version":3,"file":"Order-legacy-4Myfehbk.js","sources":["../../src/pages/order/Order.tsx","../../src/pages/order/config.ts","../../src/pages/order/OrderItemCard.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\n\nimport { B2BAutoCompleteCheckbox } from '@/components';\nimport B3Filter from '@/components/filter/B3Filter';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { B3PaginationTable, GetRequestList } from '@/components/table/B3PaginationTable';\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport { useMobile, useSort } from '@/hooks';\nimport {\n  getB2BAllOrders,\n  getBCAllOrders,\n  getBcOrderStatusType,\n  getOrdersCreatedByUser,\n  getOrderStatusType,\n} from '@/shared/service/b2b';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { CustomerRole } from '@/types';\nimport { currencyFormat, displayFormat, ordersCurrencyFormat } from '@/utils';\n\nimport OrderStatus from './components/OrderStatus';\nimport { orderStatusTranslationVariables } from './shared/getOrderStatus';\nimport {\n  defaultSortKey,\n  FilterSearchProps,\n  getFilterMoreData,\n  getInitFilter,\n  getOrderStatusText,\n  sortKeys,\n} from './config';\nimport { OrderItemCard } from './OrderItemCard';\n\ninterface CompanyInfoProps {\n  companyId: string;\n  companyName: string;\n  companyAddress: string;\n  companyCountry: string;\n  companyState: string;\n  companyCity: string;\n  companyZipCode: string;\n  phoneNumber: string;\n  bcId: string;\n}\n\ninterface ListItem {\n  firstName: string;\n  lastName: string;\n  orderId: string;\n  poNumber?: string;\n  money: string;\n  totalIncTax: string;\n  status: string;\n  createdAt: string;\n  companyName: string;\n  companyInfo?: CompanyInfoProps;\n}\n\ninterface SearchChangeProps {\n  startValue?: string;\n  endValue?: string;\n  PlacedBy?: string;\n  orderStatus?: string | number;\n  company?: string;\n}\n\ninterface OrderProps {\n  isCompanyOrder?: boolean;\n}\n\nfunction useData() {\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyB2BId = useAppSelector(({ company }) => company.companyInfo.id);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n\n  const { order: orderSubViewPermission } = useAppSelector(\n    ({ company }) => company.pagesSubsidiariesPermission,\n  );\n\n  const { selectCompanyHierarchyId, isEnabledCompanyHierarchy } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n  const currentCompanyId =\n    role === CustomerRole.SUPER_ADMIN && isAgenting\n      ? Number(salesRepCompanyId)\n      : Number(companyB2BId);\n\n  const companyId = companyB2BId || salesRepCompanyId;\n\n  return {\n    role,\n    isAgenting,\n    isB2BUser,\n    orderSubViewPermission,\n    selectCompanyHierarchyId,\n    isEnabledCompanyHierarchy,\n    currentCompanyId,\n    companyId,\n  };\n}\n\nfunction Order({ isCompanyOrder = false }: OrderProps) {\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n  const {\n    role,\n    isAgenting,\n    companyId,\n    isB2BUser,\n    orderSubViewPermission,\n    selectCompanyHierarchyId,\n    isEnabledCompanyHierarchy,\n    currentCompanyId,\n  } = useData();\n\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n  const [allTotal, setAllTotal] = useState(0);\n  const [filterData, setFilterData] = useState<Partial<FilterSearchProps> | null>(null);\n  const [filterInfo, setFilterInfo] = useState<Array<any>>([]);\n  const [getOrderStatuses, setOrderStatuses] = useState<Array<any>>([]);\n  const [isAutoRefresh, setIsAutoRefresh] = useState(false);\n\n  const [handleSetOrderBy, order, orderBy] = useSort(\n    sortKeys,\n    defaultSortKey,\n    filterData,\n    setFilterData,\n  );\n\n  useEffect(() => {\n    const search = getInitFilter(isCompanyOrder, isB2BUser);\n    if (isB2BUser) {\n      search.companyIds = [Number(selectCompanyHierarchyId) || Number(currentCompanyId)];\n    }\n    setFilterData(search);\n    setIsAutoRefresh(true);\n    if (role === 100) return;\n\n    const initFilter = async () => {\n      const createdByUsers =\n        isB2BUser && isCompanyOrder ? await getOrdersCreatedByUser(Number(companyId), 0) : {};\n\n      const orderStatuses = isB2BUser ? await getOrderStatusType() : await getBcOrderStatusType();\n\n      const filterInfo = getFilterMoreData(\n        isB2BUser,\n        role,\n        isCompanyOrder,\n        isAgenting,\n        createdByUsers,\n        orderStatuses,\n      );\n      setOrderStatuses(orderStatuses);\n\n      const filterInfoWithTranslatedLabel = filterInfo.map((element) => {\n        const translatedElement = element;\n        translatedElement.label = b3Lang(element.idLang);\n\n        if (element.name === 'orderStatus') {\n          translatedElement.options = element.options.map(\n            (option: { customLabel: string; systemLabel: string }) => {\n              const optionLabel = orderStatusTranslationVariables[option.systemLabel];\n              const elementOption = option;\n              elementOption.customLabel =\n                b3Lang(optionLabel) === elementOption.systemLabel\n                  ? elementOption.customLabel\n                  : b3Lang(optionLabel);\n\n              return option;\n            },\n          );\n        }\n\n        return element;\n      });\n\n      setFilterInfo(filterInfoWithTranslatedLabel);\n    };\n\n    initFilter();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectCompanyHierarchyId]);\n\n  const fetchList: GetRequestList<Partial<FilterSearchProps>, ListItem> = async (params) => {\n    const { edges = [], totalCount } = isB2BUser\n      ? await getB2BAllOrders(params)\n      : await getBCAllOrders(params);\n\n    setAllTotal(totalCount);\n    setIsAutoRefresh(false);\n    return {\n      edges,\n      totalCount,\n    };\n  };\n\n  const navigate = useNavigate();\n\n  const goToDetail = (item: ListItem, index: number) => {\n    navigate(`/orderDetail/${item.orderId}`, {\n      state: {\n        currentIndex: index,\n        searchParams: filterData,\n        totalCount: allTotal,\n        isCompanyOrder,\n        beginDateAt: filterData?.beginDateAt,\n        endDateAt: filterData?.endDateAt,\n      },\n    });\n  };\n\n  const columnAllItems: TableColumnItem<ListItem>[] = [\n    {\n      key: 'orderId',\n      title: b3Lang('orders.order'),\n      width: '10%',\n      isSortable: true,\n    },\n    {\n      key: 'companyName',\n      title: b3Lang('orders.company'),\n      width: '10%',\n      isSortable: false,\n      render: (item: ListItem) => {\n        const { companyInfo } = item;\n\n        return <Box>{companyInfo?.companyName || '–'}</Box>;\n      },\n    },\n    {\n      key: 'poNumber',\n      title: b3Lang('orders.poReference'),\n      render: (item: ListItem) => <Box>{item.poNumber ? item.poNumber : '–'}</Box>,\n      width: '10%',\n      isSortable: true,\n    },\n    {\n      key: 'totalIncTax',\n      title: b3Lang('orders.grandTotal'),\n      render: (item: ListItem) =>\n        item?.money\n          ? ordersCurrencyFormat(JSON.parse(JSON.parse(item.money)), item.totalIncTax)\n          : currencyFormat(item.totalIncTax),\n      width: '8%',\n      style: {\n        textAlign: 'right',\n      },\n      isSortable: true,\n    },\n    {\n      key: 'status',\n      title: b3Lang('orders.orderStatus'),\n      render: (item: ListItem) => (\n        <OrderStatus text={getOrderStatusText(item.status, getOrderStatuses)} code={item.status} />\n      ),\n      width: '10%',\n      isSortable: true,\n    },\n    {\n      key: 'placedBy',\n      title: b3Lang('orders.placedBy'),\n      render: (item: ListItem) => `${item.firstName} ${item.lastName}`,\n      width: '10%',\n      isSortable: true,\n    },\n    {\n      key: 'createdAt',\n      title: b3Lang('orders.createdOn'),\n      render: (item: ListItem) => `${displayFormat(Number(item.createdAt))}`,\n      width: '10%',\n      isSortable: true,\n    },\n  ];\n\n  const getColumnItems = () => {\n    const getNewColumnItems = columnAllItems.filter((item: { key: string }) => {\n      const { key } = item;\n      if (!isB2BUser && key === 'companyName') return false;\n      if ((!isB2BUser || (Number(role) === 3 && !isAgenting)) && key === 'placedBy') return false;\n      if (key === 'companyId' && isB2BUser && (Number(role) !== 3 || isAgenting)) return false;\n      if (\n        (key === 'companyId' || key === 'placedBy') &&\n        !(Number(role) === 3 && !isAgenting) &&\n        !isCompanyOrder\n      )\n        return false;\n      return true;\n    });\n\n    return getNewColumnItems;\n  };\n\n  const handleChange = (key: string, value: string) => {\n    if (key === 'search') {\n      setFilterData({\n        ...filterData,\n        q: value,\n      });\n    }\n  };\n\n  const handleFilterChange = (value: SearchChangeProps) => {\n    let currentStatus = value?.orderStatus || '';\n    if (currentStatus) {\n      const originStatus = getOrderStatuses.find(\n        (status) => status.customLabel === currentStatus || status.systemLabel === currentStatus,\n      );\n\n      currentStatus = originStatus?.systemLabel || currentStatus;\n    }\n\n    const search: Partial<FilterSearchProps> = {\n      beginDateAt: value?.startValue || null,\n      endDateAt: value?.endValue || null,\n      createdBy: value?.PlacedBy || '',\n      statusCode: currentStatus,\n      companyName: value?.company || '',\n    };\n    setFilterData({\n      ...filterData,\n      ...search,\n    });\n  };\n\n  const columnItems = getColumnItems();\n\n  const handleSelectCompanies = (company: number[]) => {\n    const newCompanyIds = company.includes(-1) ? [] : company;\n\n    setFilterData({\n      ...filterData,\n      companyIds: newCompanyIds,\n    });\n  };\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          width: '100%',\n        }}\n      >\n        <Box\n          sx={{\n            width: isMobile ? '100%' : 'auto',\n            display: 'flex',\n            justifyContent: 'flex-start',\n            alignItems: isMobile ? 'flex-start' : 'center',\n            flexDirection: isMobile ? 'column' : 'row',\n\n            '& > div': {\n              width: isMobile ? '100%' : 'auto',\n            },\n          }}\n        >\n          {isEnabledCompanyHierarchy && orderSubViewPermission && (\n            <Box sx={{ mr: isMobile ? 0 : '10px', mb: '30px' }}>\n              <B2BAutoCompleteCheckbox handleChangeCompanyIds={handleSelectCompanies} />\n            </Box>\n          )}\n          <B3Filter\n            startPicker={{\n              isEnabled: true,\n              label: b3Lang('orders.from'),\n              defaultValue: filterData?.beginDateAt || null,\n              pickerKey: 'start',\n            }}\n            endPicker={{\n              isEnabled: true,\n              label: b3Lang('orders.to'),\n              defaultValue: filterData?.endDateAt || null,\n              pickerKey: 'end',\n            }}\n            filterMoreInfo={filterInfo}\n            handleChange={handleChange}\n            handleFilterChange={handleFilterChange}\n            pcTotalWidth=\"100%\"\n            pcContainerWidth=\"100%\"\n            pcSearchContainerWidth=\"100%\"\n          />\n        </Box>\n\n        <B3PaginationTable\n          columnItems={columnItems}\n          rowsPerPageOptions={[10, 20, 30]}\n          getRequestList={fetchList}\n          searchParams={filterData || {}}\n          isCustomRender={false}\n          requestLoading={setIsRequestLoading}\n          tableKey=\"orderId\"\n          pageType=\"orderListPage\"\n          isAutoRefresh={isAutoRefresh}\n          sortDirection={order}\n          orderBy={orderBy}\n          sortByFn={handleSetOrderBy}\n          renderItem={(row, index) => (\n            <OrderItemCard\n              key={row.orderId}\n              item={row}\n              index={index}\n              allTotal={allTotal}\n              filterData={filterData}\n              isCompanyOrder={isCompanyOrder}\n            />\n          )}\n          onClickRow={(item, index) => {\n            if (index !== undefined) {\n              goToDetail(item, index);\n            }\n          }}\n          hover\n        />\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default Order;\n","import { CustomerRole } from '@/types';\nimport { OrderStatusType } from '@/types/gql/graphql';\n\nexport interface FilterSearchProps {\n  [key: string]: string | number | number[] | null;\n  beginDateAt: string | null;\n  endDateAt: string | null;\n  orderBy: string;\n  createdBy: string;\n  q: string;\n  companyName: string;\n  isShowMy: number;\n  companyId: string;\n  companyIds: number[];\n}\n\nexport interface FilterMoreProps {\n  startValue?: string;\n  endValue?: string;\n  PlacedBy?: string;\n  company?: string;\n  orderStatus?: string | number;\n}\n\nexport const defaultSortKey = 'orderId';\n\nexport const sortKeys = {\n  orderId: 'bcOrderId',\n  poNumber: 'poNumber',\n  totalIncTax: 'totalIncTax',\n  status: 'status',\n  placedBy: 'placedBy',\n  createdAt: 'createdAt',\n};\n\nconst b2bFilterSearch: FilterSearchProps = {\n  q: '',\n  companyId: '',\n  beginDateAt: null,\n  endDateAt: null,\n  companyName: '',\n  orderBy: `-${sortKeys[defaultSortKey]}`,\n  createdBy: '',\n  orderNumber: '',\n  poNumber: '',\n  isShowMy: 0,\n  companyIds: [],\n};\n\nconst bcFilterSearch = {\n  beginDateAt: null,\n  endDateAt: null,\n  orderBy: `-${sortKeys[defaultSortKey]}`,\n  createdBy: '',\n  q: '',\n};\n\nexport const getFilterMoreData = (\n  isB2BUser: boolean,\n  role: string | number,\n  isCompanyOrder: boolean,\n  isAgenting: boolean,\n  createdByUsers: any,\n  orderStatuses: OrderStatusType[] = [],\n) => {\n  const newOrderStatuses = orderStatuses.filter(\n    (item) => item.statusCode !== '0' && item.statusCode !== '1',\n  );\n  const newCreatedByUsers =\n    createdByUsers?.createdByUser?.results.map((item: any) => ({\n      createdBy: `${item.firstName} ${item.lastName} (${item.email})`,\n    })) || [];\n  const filterMoreList = [\n    {\n      name: 'company',\n      label: 'Company',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n      idLang: 'orders.company',\n    },\n    {\n      name: 'orderStatus',\n      label: 'Order status',\n      required: false,\n      default: '',\n      fieldType: 'dropdown',\n      options: newOrderStatuses,\n      replaceOptions: {\n        label: 'customLabel',\n        value: 'customLabel',\n      },\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n      idLang: 'orders.orderStatus',\n    },\n    {\n      name: 'PlacedBy',\n      label: 'Placed by',\n      required: false,\n      default: '',\n      fieldType: 'dropdown',\n      options: newCreatedByUsers,\n      replaceOptions: {\n        label: 'createdBy',\n        value: 'createdBy',\n      },\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n      idLang: 'orders.placedBy',\n    },\n  ];\n\n  const filterCondition = isB2BUser && !(Number(role) === 3 && !isAgenting);\n  const filterCurrentMoreList = filterMoreList.filter((item) => {\n    if (\n      (!isB2BUser || filterCondition) &&\n      !isCompanyOrder &&\n      (item.name === 'company' || item.name === 'PlacedBy')\n    )\n      return false;\n    if (Number(role) === 3 && !isAgenting && item.name === 'PlacedBy') return false;\n    if (\n      (isB2BUser || (Number(role) === CustomerRole.SUPER_ADMIN && isAgenting)) &&\n      isCompanyOrder &&\n      item.name === 'company'\n    )\n      return false;\n    return true;\n  });\n\n  return filterCurrentMoreList;\n};\n\nexport const getInitFilter = (\n  isCompanyOrder: boolean,\n  isB2BUser: boolean,\n): Partial<FilterSearchProps> => {\n  if (isB2BUser) b2bFilterSearch.isShowMy = isCompanyOrder ? 0 : 1;\n\n  return isB2BUser ? b2bFilterSearch : bcFilterSearch;\n};\n\nexport const currencySymbol = (currencyItem: string) => {\n  try {\n    if (currencyItem) {\n      const currencyToken = JSON.parse(JSON.parse(currencyItem))?.currency_token || '';\n\n      return currencyToken;\n    }\n\n    return '';\n  } catch (e) {\n    return '';\n  }\n};\n\nexport const getOrderStatusText = (status: number | string, getOrderStatuses: any) =>\n  getOrderStatuses.find((item: any) => item.systemLabel === status)?.customLabel || '';\n","import { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport { useTheme } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\n\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { currencyFormat, displayFormat } from '@/utils';\n\nimport OrderStatus from './components/OrderStatus';\n\ninterface ListItem {\n  orderId: string;\n  firstName: string;\n  lastName: string;\n  poNumber?: string;\n  status: string;\n  totalIncTax: string;\n  createdAt: string;\n}\n\nexport interface OrderItemCardProps {\n  allTotal: number;\n  filterData: any;\n  index?: number;\n  item: ListItem;\n  isCompanyOrder: boolean;\n}\n\nconst Flex = styled('div')(() => ({\n  display: 'flex',\n  alignItems: 'center',\n  '&.between-flex': {\n    justifyContent: 'space-between',\n  },\n}));\n\nexport function OrderItemCard({\n  item,\n  allTotal,\n  filterData,\n  index = 0,\n  isCompanyOrder,\n}: OrderItemCardProps) {\n  const theme = useTheme();\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const navigate = useNavigate();\n\n  const goToDetail = (item: ListItem) => {\n    navigate(`/orderDetail/${item.orderId}`, {\n      state: {\n        currentIndex: index || 0,\n        searchParams: filterData,\n        totalCount: allTotal,\n        isCompanyOrder,\n      },\n    });\n  };\n\n  const getName = (item: ListItem) => {\n    if (isB2BUser) {\n      return `by ${item.firstName} ${item.lastName}`;\n    }\n    return `by ${customer.firstName} ${customer.lastName}`;\n  };\n\n  return (\n    <Card key={item.orderId}>\n      <CardContent\n        sx={{\n          color: 'rgba(0, 0, 0, 0.6)',\n        }}\n        onClick={() => goToDetail(item)}\n      >\n        <Flex className=\"between-flex\">\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n            }}\n          >\n            <Typography\n              variant=\"h5\"\n              sx={{\n                color: 'rgba(0, 0, 0, 0.87)',\n              }}\n            >\n              {`# ${item.orderId}`}\n            </Typography>\n            <Typography\n              sx={{\n                ml: 1,\n              }}\n              variant=\"body2\"\n            >\n              {item.poNumber ? item.poNumber : '–'}\n            </Typography>\n          </Box>\n          <Box>\n            <OrderStatus code={item.status} />\n          </Box>\n        </Flex>\n\n        <Typography\n          variant=\"h6\"\n          sx={{\n            marginBottom: theme.spacing(2.5),\n            mt: theme.spacing(1.5),\n            minHeight: '1.43em',\n          }}\n        >\n          {currencyFormat(item.totalIncTax)}\n        </Typography>\n\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Typography\n            variant=\"body2\"\n            sx={{\n              fontWeight: 'normal',\n              marginRight: theme.spacing(2),\n            }}\n          >\n            {getName(item)}\n          </Typography>\n          <Typography>{`${displayFormat(item.createdAt)}`}</Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":["isCompanyOrder","b3Lang","useB3Lang","isMobile","useMobile","role","isAgenting","companyId","isB2BUser","orderSubViewPermission","selectCompanyHierarchyId","isEnabledCompanyHierarchy","currentCompanyId","useAppSelector","isB2BUserSelector","companyB2BId","company","companyInfo","id","customer","salesRepCompanyId","b2bFeatures","masqueradeCompany","order","pagesSubsidiariesPermission","companyHierarchyInfo","CustomerRole","SUPER_ADMIN","Number","useData","isRequestLoading","setIsRequestLoading","useState","allTotal","setAllTotal","filterData","setFilterData","filterInfo","setFilterInfo","getOrderStatuses","setOrderStatuses","isAutoRefresh","setIsAutoRefresh","handleSetOrderBy","orderBy","useSort","sortKeys","defaultSortKey","useEffect","search","getInitFilter","companyIds","async","createdByUsers","getOrdersCreatedByUser","orderStatuses","getOrderStatusType","getBcOrderStatusType","getFilterMoreData","filterInfoWithTranslatedLabel","map","element","translatedElement","label","idLang","name","options","option","optionLabel","orderStatusTranslationVariables","systemLabel","elementOption","customLabel","initFilter","navigate","useNavigate","columnAllItems","key","title","width","isSortable","render","item","jsx","Box","children","companyName","poNumber","money","ordersCurrencyFormat","JSON","parse","totalIncTax","currencyFormat","style","textAlign","OrderStatus","text","getOrderStatusText","status","code","firstName","lastName","displayFormat","createdAt","columnItems","filter","B3Spin","isSpinning","jsxs","sx","display","flexDirection","flex","justifyContent","alignItems","mr","mb","B2BAutoCompleteCheckbox","handleChangeCompanyIds","newCompanyIds","includes","B3Filter","startPicker","isEnabled","defaultValue","beginDateAt","pickerKey","endPicker","endDateAt","filterMoreInfo","handleChange","value","q","handleFilterChange","currentStatus","orderStatus","originStatus","find","startValue","endValue","createdBy","PlacedBy","statusCode","pcTotalWidth","pcContainerWidth","pcSearchContainerWidth","B3PaginationTable","rowsPerPageOptions","getRequestList","edges","totalCount","getB2BAllOrders","params","getBCAllOrders","searchParams","isCustomRender","requestLoading","tableKey","pageType","sortDirection","sortByFn","renderItem","row","index","OrderItemCard","orderId","onClickRow","goToDetail","state","currentIndex","hover","placedBy","b2bFilterSearch","orderNumber","isShowMy","bcFilterSearch","filterMoreList","required","default","fieldType","xs","variant","size","replaceOptions","createdByUser","results","email","filterCondition","Flex","styled","theme","useTheme","Card","CardContent","color","onClick","className","Typography","ml","marginBottom","spacing","mt","minHeight","fontWeight","marginRight"],"mappings":"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"}