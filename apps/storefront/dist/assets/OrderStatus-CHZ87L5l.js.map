{"version":3,"file":"OrderStatus-CHZ87L5l.js","sources":["../../src/shared/service/b2b/graphql/orders.ts","../../src/pages/order/shared/getOrderStatus.ts","../../src/pages/order/components/OrderStatus.tsx"],"sourcesContent":["import { B2BOrderData, OrderStatusItem } from '@/types';\n\nimport { convertArrayToGraphql } from '../../../../utils';\nimport B3Request from '../../request/b3Fetch';\n\nconst companyInfo = `\n  companyInfo {\n    companyId,\n    companyName,\n    companyAddress,\n    companyCountry,\n    companyState,\n    companyCity,\n    companyZipCode,\n    phoneNumber,\n    bcId,\n  }\n`;\n\nconst allOrders = (data: CustomFieldItems, fn: string) => `{\n  ${fn}(\n    search: \"${data.q || ''}\"\n    status: \"${data?.statusCode || ''}\"\n    first: ${data.first}\n    offset: ${data.offset}\n    beginDateAt: ${data?.beginDateAt ? JSON.stringify(data.beginDateAt) : null}\n    endDateAt: ${data?.endDateAt ? JSON.stringify(data.endDateAt) : null}\n    companyName: \"${data?.companyName || ''}\"\n    createdBy: \"${data?.createdBy || ''}\"\n    isShowMy: \"${data?.isShowMy || 0}\"\n    orderBy: \"${data.orderBy}\"\n    email: \"${data?.email || ''}\"\n    ${data?.companyIds ? `companyIds: ${convertArrayToGraphql(data.companyIds || [])}` : ''}\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node {\n        orderId,\n        createdAt,\n        updatedAt,\n        totalIncTax,\n        currencyCode,\n        usdIncTax,\n        money,\n        items,\n        cartId,\n        userId,\n        poNumber,\n        referenceNumber,\n        status,\n        customStatus,\n        statusCode,\n        isArchived,\n        isInvoiceOrder,\n        invoiceId,\n        invoiceNumber,\n        invoiceStatus,\n        ipStatus,\n        flag,\n        billingName,\n        merchantEmail,\n        firstName,\n        lastName,\n        companyName,\n        ${companyInfo}\n      }\n    }\n  }\n}`;\n\nconst orderDetail = (id: number, fn: string) => `{\n  ${fn}(\n    id: ${id}\n  ){\n    id,\n    companyName,\n    firstName,\n    lastName,\n    status,\n    statusId,\n    customerId,\n    customStatus,\n    dateCreated,\n    dateModified,\n    dateShipped,\n    subtotalExTax,\n    subtotalIncTax,\n    subtotalTax,\n    baseShippingCost,\n    shippingCostExTax,\n    shippingCostIncTax,\n    shippingCostTax,\n    shippingCostTaxClassId,\n    baseHandlingCost,\n    handlingCostExTax,\n    handlingCostIncTax,\n    handlingCostTax,\n    handlingCostTaxClassId,\n    baseWrappingCost,\n    wrappingCostExTax,\n    wrappingCostIncTax,\n    wrappingCostTax,\n    wrappingCostTaxClassId,\n    totalExTax,\n    totalIncTax,\n    totalTax,\n    itemsTotal,\n    itemsShipped,\n    paymentMethod,\n    paymentProviderId,\n    paymentStatus,\n    refundedAmount,\n    orderIsDigital,\n    storeCreditAmount,\n    giftCertificateAmount,\n    ipAddress,\n    geoipCountry,\n    geoipCountryIso2,\n    currencyId,\n    currencyCode,\n    currencyExchangeRate,\n    defaultCurrencyId,\n    defaultCurrencyCode,\n    staffNotes,\n    customerMessage,\n    discountAmount,\n    couponDiscount,\n    shippingAddressCount,\n    isDeleted,\n    ebayOrderId,\n    cartId,\n    ipAddressV6,\n    isEmailOptIn,\n    poNumber,\n    storeDefaultCurrencyCode,\n    storeDefaultToTransactionalExchangeRate,\n    customerLocale,\n    channelId,\n    orderSource,\n    externalSource,\n    creditCardType,\n    externalId,\n    externalMerchantId,\n    taxProviderId,\n    canReturn,\n    createdEmail,\n    products,\n    coupons,\n    extraFields,\n    billingAddress,\n    shippingAddresses,\n    shippingAddress,\n    shipments,\n    money,\n    referenceNumber,\n    isInvoiceOrder,\n    updatedAt,\n    externalOrderId,\n    ipStatus,\n    invoiceId,\n    orderHistoryEvent {\n      id,\n      eventType,\n      status,\n      extraFields,\n      createdAt,\n    },\n    ${companyInfo}\n  }\n}`;\n\nconst getOrderStatusTypeQl = (fn: string) => `{\n  ${fn} {\n    systemLabel,\n    customLabel,\n    statusCode,\n  }\n}`;\n\nconst getCreatedByUser = (companyId: number, module: number, fn: string) => `{\n  ${fn}(\n    companyId: ${companyId},\n    module: ${module},\n  ){\n    results,\n  }\n}`;\n\nexport const getB2BAllOrders = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: allOrders(data, 'allOrders'),\n  }).then((res) => res.allOrders);\n\nexport const getBCAllOrders = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: allOrders(data, 'customerOrders'),\n  }).then((res) => res.customerOrders);\n\nexport const getB2BOrderDetails = (id: number): Promise<B2BOrderData> =>\n  B3Request.graphqlB2B({\n    query: orderDetail(id, 'order'),\n  }).then((res) => res.order);\n\nexport const getBCOrderDetails = (id: number): Promise<B2BOrderData> =>\n  B3Request.graphqlB2B({\n    query: orderDetail(id, 'customerOrder'),\n  }).then((res) => res.customerOrder);\n\nexport const getOrderStatusType = (): Promise<OrderStatusItem[]> =>\n  B3Request.graphqlB2B({\n    query: getOrderStatusTypeQl('orderStatuses'),\n  }).then((res) => res.orderStatuses);\n\nexport const getBcOrderStatusType = (): Promise<OrderStatusItem[]> =>\n  B3Request.graphqlB2B({\n    query: getOrderStatusTypeQl('bcOrderStatuses'),\n  }).then((res) => res.bcOrderStatuses);\n\nexport const getOrdersCreatedByUser = (companyId: number, module: number) =>\n  B3Request.graphqlB2B({\n    query: getCreatedByUser(companyId, module, 'createdByUser'),\n  });\n","interface OrderStatusConfig {\n  [k: string]: string;\n}\nexport const orderStatusCode: OrderStatusConfig = {\n  0: 'Incomplete',\n  1: 'Pending',\n  2: 'Shipped',\n  3: 'Partially Shipped',\n  4: 'Refunded',\n  5: 'Cancelled',\n  6: 'Declined',\n  7: 'Awaiting Payment',\n  8: 'Awaiting Pickup',\n  9: 'Awaiting Shipment',\n  10: 'Completed',\n  11: 'Awaiting Fulfillment',\n  12: 'Manual Verification Required',\n  13: 'Disputed',\n  14: 'Partially Refunded',\n};\n\nconst orderStatusColor: OrderStatusConfig = {\n  'Partially Refunded': '#F4CC46',\n  'Manual Verification Required': '#DDA3AE',\n  Disputed: '#916CF6',\n  Refunded: '#F4CC46',\n  Declined: '#7A6041',\n  Cancelled: '#000000',\n  Shipped: '#C4DD6C',\n  Completed: '#C4DD6C',\n  'Partially Shipped': '#516FAE',\n  'Awaiting Pickup': '#BE7FEB',\n  'Awaiting Shipment': '#BD3E1E',\n  'Awaiting Fulfillment': '#87CBF6',\n  'Awaiting Payment': '#F19536',\n  Pending: '#899193',\n  Incomplete: '#000000',\n};\n\nconst orderStatusTextColor: OrderStatusConfig = {\n  'Partially Refunded': 'rgba(0, 0, 0, 0.87)',\n  'Manual Verification Required': 'rgba(0, 0, 0, 0.87)',\n  Disputed: '#FFFFFF',\n  Refunded: 'rgba(0, 0, 0, 0.87)',\n  Declined: '#FFFFFF',\n  Cancelled: '#FFFFFF',\n  Shipped: 'rgba(0, 0, 0, 0.87)',\n  Completed: 'rgba(0, 0, 0, 0.87)',\n  'Partially Shipped': '#FFFFFF',\n  'Awaiting Pickup': '#FFFFFF',\n  'Awaiting Shipment': '#FFFFFF',\n  'Awaiting Fulfillment': 'rgba(0, 0, 0, 0.87)',\n  'Awaiting Payment': '#FFFFFF',\n  Pending: '#FFFFFF',\n  Incomplete: '#FFFFFF',\n};\n\n// i18n\nconst orderStatusText: OrderStatusConfig = {\n  'Partially Refunded': 'Partially Refunded',\n  'Manual Verification Required': 'Manual Verification Required here',\n  Disputed: 'Disputed',\n  Refunded: 'Refunded',\n  Declined: 'Declined',\n  Cancelled: 'Cancelled',\n  Shipped: 'Shipped',\n  Completed: 'Completed',\n  'Partially Shipped': 'Partially Shipped',\n  'Awaiting Pickup': 'Awaiting Pickup',\n  'Awaiting Shipment': 'Awaiting Shipment',\n  'Awaiting Fulfillment': 'Awaiting Fulfillment',\n  'Awaiting Payment': 'Awaiting Payment',\n  Pending: 'Pending',\n  Incomplete: 'Incomplete',\n};\n\nexport const orderStatusTranslationVariables: OrderStatusConfig = {\n  Incomplete: 'orders.status.incomplete',\n  Pending: 'orders.status.pending',\n  Shipped: 'orders.status.shipped',\n  'Partially Shipped': 'orders.status.partiallyShipped',\n  Refunded: 'orders.status.refunded',\n  Cancelled: 'orders.status.cancelled',\n  Declined: 'orders.status.declined',\n  'Awaiting Payment': 'orders.status.awaitingPayment',\n  'Awaiting Pickup': 'orders.status.awaitingPickup',\n  'Awaiting Shipment': 'orders.status.awaitingShipment',\n  Completed: 'orders.status.completed',\n  'Awaiting Fulfillment': 'orders.status.awaitingFulfillment',\n  'Manual Verification Required': 'orders.status.manualVerificationRequired',\n  Disputed: 'orders.status.disputed',\n  'Partially Refunded': 'orders.status.partiallyRefunded',\n};\n\nexport const getOrderStatusOptions = () =>\n  Object.keys(orderStatusText).map((code) => ({\n    value: code,\n    label: orderStatusText[code],\n  }));\n\nconst getOrderStatus = (code: string | number) => ({\n  color: orderStatusColor[code],\n  textColor: orderStatusTextColor[code],\n  name: orderStatusText[code],\n});\n\nexport default getOrderStatus;\n","import { B3Tag } from '@/components';\n\nimport getOrderStatus from '../shared/getOrderStatus';\n\ninterface OrderStatusProps {\n  code: string;\n  text?: string;\n}\n\nexport default function OrderStatus(props: OrderStatusProps) {\n  const { code, text } = props;\n\n  const status = getOrderStatus(code);\n\n  return status.name ? (\n    <B3Tag color={status.color} textColor={status.textColor}>\n      {text || status.name}\n    </B3Tag>\n  ) : null;\n}\n"],"names":["companyInfo","allOrders","data","fn","convertArrayToGraphql","orderDetail","id","getOrderStatusTypeQl","getCreatedByUser","companyId","module","getB2BAllOrders","B3Request","res","getBCAllOrders","getB2BOrderDetails","getBCOrderDetails","getOrderStatusType","getBcOrderStatusType","getOrdersCreatedByUser","orderStatusColor","orderStatusTextColor","orderStatusText","orderStatusTranslationVariables","getOrderStatus","code","OrderStatus","props","text","status","jsx","B3Tag"],"mappings":"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"}