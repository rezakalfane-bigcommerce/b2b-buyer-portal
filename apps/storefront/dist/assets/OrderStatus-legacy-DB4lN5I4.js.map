{"version":3,"file":"OrderStatus-legacy-DB4lN5I4.js","sources":["../../src/pages/order/components/OrderStatus.tsx","../../src/shared/service/b2b/graphql/orders.ts","../../src/pages/order/shared/getOrderStatus.ts"],"sourcesContent":["import { B3Tag } from '@/components';\n\nimport getOrderStatus from '../shared/getOrderStatus';\n\ninterface OrderStatusProps {\n  code: string;\n  text?: string;\n}\n\nexport default function OrderStatus(props: OrderStatusProps) {\n  const { code, text } = props;\n\n  const status = getOrderStatus(code);\n\n  return status.name ? (\n    <B3Tag color={status.color} textColor={status.textColor}>\n      {text || status.name}\n    </B3Tag>\n  ) : null;\n}\n","import { B2BOrderData, OrderStatusItem } from '@/types';\n\nimport { convertArrayToGraphql } from '../../../../utils';\nimport B3Request from '../../request/b3Fetch';\n\nconst companyInfo = `\n  companyInfo {\n    companyId,\n    companyName,\n    companyAddress,\n    companyCountry,\n    companyState,\n    companyCity,\n    companyZipCode,\n    phoneNumber,\n    bcId,\n  }\n`;\n\nconst allOrders = (data: CustomFieldItems, fn: string) => `{\n  ${fn}(\n    search: \"${data.q || ''}\"\n    status: \"${data?.statusCode || ''}\"\n    first: ${data.first}\n    offset: ${data.offset}\n    beginDateAt: ${data?.beginDateAt ? JSON.stringify(data.beginDateAt) : null}\n    endDateAt: ${data?.endDateAt ? JSON.stringify(data.endDateAt) : null}\n    companyName: \"${data?.companyName || ''}\"\n    createdBy: \"${data?.createdBy || ''}\"\n    isShowMy: \"${data?.isShowMy || 0}\"\n    orderBy: \"${data.orderBy}\"\n    email: \"${data?.email || ''}\"\n    ${data?.companyIds ? `companyIds: ${convertArrayToGraphql(data.companyIds || [])}` : ''}\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node {\n        orderId,\n        createdAt,\n        updatedAt,\n        totalIncTax,\n        currencyCode,\n        usdIncTax,\n        money,\n        items,\n        cartId,\n        userId,\n        poNumber,\n        referenceNumber,\n        status,\n        customStatus,\n        statusCode,\n        isArchived,\n        isInvoiceOrder,\n        invoiceId,\n        invoiceNumber,\n        invoiceStatus,\n        ipStatus,\n        flag,\n        billingName,\n        merchantEmail,\n        firstName,\n        lastName,\n        companyName,\n        ${companyInfo}\n      }\n    }\n  }\n}`;\n\nconst orderDetail = (id: number, fn: string) => `{\n  ${fn}(\n    id: ${id}\n  ){\n    id,\n    companyName,\n    firstName,\n    lastName,\n    status,\n    statusId,\n    customerId,\n    customStatus,\n    dateCreated,\n    dateModified,\n    dateShipped,\n    subtotalExTax,\n    subtotalIncTax,\n    subtotalTax,\n    baseShippingCost,\n    shippingCostExTax,\n    shippingCostIncTax,\n    shippingCostTax,\n    shippingCostTaxClassId,\n    baseHandlingCost,\n    handlingCostExTax,\n    handlingCostIncTax,\n    handlingCostTax,\n    handlingCostTaxClassId,\n    baseWrappingCost,\n    wrappingCostExTax,\n    wrappingCostIncTax,\n    wrappingCostTax,\n    wrappingCostTaxClassId,\n    totalExTax,\n    totalIncTax,\n    totalTax,\n    itemsTotal,\n    itemsShipped,\n    paymentMethod,\n    paymentProviderId,\n    paymentStatus,\n    refundedAmount,\n    orderIsDigital,\n    storeCreditAmount,\n    giftCertificateAmount,\n    ipAddress,\n    geoipCountry,\n    geoipCountryIso2,\n    currencyId,\n    currencyCode,\n    currencyExchangeRate,\n    defaultCurrencyId,\n    defaultCurrencyCode,\n    staffNotes,\n    customerMessage,\n    discountAmount,\n    couponDiscount,\n    shippingAddressCount,\n    isDeleted,\n    ebayOrderId,\n    cartId,\n    ipAddressV6,\n    isEmailOptIn,\n    poNumber,\n    storeDefaultCurrencyCode,\n    storeDefaultToTransactionalExchangeRate,\n    customerLocale,\n    channelId,\n    orderSource,\n    externalSource,\n    creditCardType,\n    externalId,\n    externalMerchantId,\n    taxProviderId,\n    canReturn,\n    createdEmail,\n    products,\n    coupons,\n    extraFields,\n    billingAddress,\n    shippingAddresses,\n    shippingAddress,\n    shipments,\n    money,\n    referenceNumber,\n    isInvoiceOrder,\n    updatedAt,\n    externalOrderId,\n    ipStatus,\n    invoiceId,\n    orderHistoryEvent {\n      id,\n      eventType,\n      status,\n      extraFields,\n      createdAt,\n    },\n    ${companyInfo}\n  }\n}`;\n\nconst getOrderStatusTypeQl = (fn: string) => `{\n  ${fn} {\n    systemLabel,\n    customLabel,\n    statusCode,\n  }\n}`;\n\nconst getCreatedByUser = (companyId: number, module: number, fn: string) => `{\n  ${fn}(\n    companyId: ${companyId},\n    module: ${module},\n  ){\n    results,\n  }\n}`;\n\nexport const getB2BAllOrders = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: allOrders(data, 'allOrders'),\n  }).then((res) => res.allOrders);\n\nexport const getBCAllOrders = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: allOrders(data, 'customerOrders'),\n  }).then((res) => res.customerOrders);\n\nexport const getB2BOrderDetails = (id: number): Promise<B2BOrderData> =>\n  B3Request.graphqlB2B({\n    query: orderDetail(id, 'order'),\n  }).then((res) => res.order);\n\nexport const getBCOrderDetails = (id: number): Promise<B2BOrderData> =>\n  B3Request.graphqlB2B({\n    query: orderDetail(id, 'customerOrder'),\n  }).then((res) => res.customerOrder);\n\nexport const getOrderStatusType = (): Promise<OrderStatusItem[]> =>\n  B3Request.graphqlB2B({\n    query: getOrderStatusTypeQl('orderStatuses'),\n  }).then((res) => res.orderStatuses);\n\nexport const getBcOrderStatusType = (): Promise<OrderStatusItem[]> =>\n  B3Request.graphqlB2B({\n    query: getOrderStatusTypeQl('bcOrderStatuses'),\n  }).then((res) => res.bcOrderStatuses);\n\nexport const getOrdersCreatedByUser = (companyId: number, module: number) =>\n  B3Request.graphqlB2B({\n    query: getCreatedByUser(companyId, module, 'createdByUser'),\n  });\n","interface OrderStatusConfig {\n  [k: string]: string;\n}\nexport const orderStatusCode: OrderStatusConfig = {\n  0: 'Incomplete',\n  1: 'Pending',\n  2: 'Shipped',\n  3: 'Partially Shipped',\n  4: 'Refunded',\n  5: 'Cancelled',\n  6: 'Declined',\n  7: 'Awaiting Payment',\n  8: 'Awaiting Pickup',\n  9: 'Awaiting Shipment',\n  10: 'Completed',\n  11: 'Awaiting Fulfillment',\n  12: 'Manual Verification Required',\n  13: 'Disputed',\n  14: 'Partially Refunded',\n};\n\nconst orderStatusColor: OrderStatusConfig = {\n  'Partially Refunded': '#F4CC46',\n  'Manual Verification Required': '#DDA3AE',\n  Disputed: '#916CF6',\n  Refunded: '#F4CC46',\n  Declined: '#7A6041',\n  Cancelled: '#000000',\n  Shipped: '#C4DD6C',\n  Completed: '#C4DD6C',\n  'Partially Shipped': '#516FAE',\n  'Awaiting Pickup': '#BE7FEB',\n  'Awaiting Shipment': '#BD3E1E',\n  'Awaiting Fulfillment': '#87CBF6',\n  'Awaiting Payment': '#F19536',\n  Pending: '#899193',\n  Incomplete: '#000000',\n};\n\nconst orderStatusTextColor: OrderStatusConfig = {\n  'Partially Refunded': 'rgba(0, 0, 0, 0.87)',\n  'Manual Verification Required': 'rgba(0, 0, 0, 0.87)',\n  Disputed: '#FFFFFF',\n  Refunded: 'rgba(0, 0, 0, 0.87)',\n  Declined: '#FFFFFF',\n  Cancelled: '#FFFFFF',\n  Shipped: 'rgba(0, 0, 0, 0.87)',\n  Completed: 'rgba(0, 0, 0, 0.87)',\n  'Partially Shipped': '#FFFFFF',\n  'Awaiting Pickup': '#FFFFFF',\n  'Awaiting Shipment': '#FFFFFF',\n  'Awaiting Fulfillment': 'rgba(0, 0, 0, 0.87)',\n  'Awaiting Payment': '#FFFFFF',\n  Pending: '#FFFFFF',\n  Incomplete: '#FFFFFF',\n};\n\n// i18n\nconst orderStatusText: OrderStatusConfig = {\n  'Partially Refunded': 'Partially Refunded',\n  'Manual Verification Required': 'Manual Verification Required here',\n  Disputed: 'Disputed',\n  Refunded: 'Refunded',\n  Declined: 'Declined',\n  Cancelled: 'Cancelled',\n  Shipped: 'Shipped',\n  Completed: 'Completed',\n  'Partially Shipped': 'Partially Shipped',\n  'Awaiting Pickup': 'Awaiting Pickup',\n  'Awaiting Shipment': 'Awaiting Shipment',\n  'Awaiting Fulfillment': 'Awaiting Fulfillment',\n  'Awaiting Payment': 'Awaiting Payment',\n  Pending: 'Pending',\n  Incomplete: 'Incomplete',\n};\n\nexport const orderStatusTranslationVariables: OrderStatusConfig = {\n  Incomplete: 'orders.status.incomplete',\n  Pending: 'orders.status.pending',\n  Shipped: 'orders.status.shipped',\n  'Partially Shipped': 'orders.status.partiallyShipped',\n  Refunded: 'orders.status.refunded',\n  Cancelled: 'orders.status.cancelled',\n  Declined: 'orders.status.declined',\n  'Awaiting Payment': 'orders.status.awaitingPayment',\n  'Awaiting Pickup': 'orders.status.awaitingPickup',\n  'Awaiting Shipment': 'orders.status.awaitingShipment',\n  Completed: 'orders.status.completed',\n  'Awaiting Fulfillment': 'orders.status.awaitingFulfillment',\n  'Manual Verification Required': 'orders.status.manualVerificationRequired',\n  Disputed: 'orders.status.disputed',\n  'Partially Refunded': 'orders.status.partiallyRefunded',\n};\n\nexport const getOrderStatusOptions = () =>\n  Object.keys(orderStatusText).map((code) => ({\n    value: code,\n    label: orderStatusText[code],\n  }));\n\nconst getOrderStatus = (code: string | number) => ({\n  color: orderStatusColor[code],\n  textColor: orderStatusTextColor[code],\n  name: orderStatusText[code],\n});\n\nexport default getOrderStatus;\n"],"names":["props","code","text","status","getOrderStatus","name","jsx","B3Tag","color","textColor","children","companyInfo","allOrders","data","fn","q","statusCode","first","offset","beginDateAt","JSON","stringify","endDateAt","companyName","createdBy","isShowMy","orderBy","email","companyIds","convertArrayToGraphql","orderDetail","id","getOrderStatusTypeQl","getCreatedByUser","companyId","module","orderStatusColor","B3Request","graphqlB2B","query","then","res","customerOrders","order","customerOrder","exports","orderStatuses","bcOrderStatuses","Disputed","Refunded","Declined","Cancelled","Shipped","Completed","Pending","Incomplete","orderStatusTextColor","orderStatusText"],"mappings":"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"}