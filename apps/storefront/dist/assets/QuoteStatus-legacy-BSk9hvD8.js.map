{"version":3,"file":"QuoteStatus-legacy-BSk9hvD8.js","sources":["../../src/pages/quote/components/QuoteStatus.tsx","../../src/shared/service/b2b/graphql/quote.ts"],"sourcesContent":["import { LangFormatFunction, useB3Lang } from '@b3/lang';\n\nimport { B3Tag } from '@/components';\n\ninterface OrderStatusProps {\n  code: string;\n}\n\ninterface QuoteStatusObj {\n  [x: string]: {\n    textColor: string;\n    idLang: string;\n    color: string;\n  };\n}\n\nconst quoteStatus: QuoteStatusObj = {\n  '0': {\n    textColor: 'rgba(0, 0, 0, 0.87)',\n    idLang: 'global.quoteStatusCode.draft',\n    color: '#D8D6D1',\n  },\n  '1': {\n    textColor: 'rgba(0, 0, 0, 0.87)',\n    idLang: 'global.quoteStatusCode.open',\n    color: '#F1C224',\n  },\n  '4': {\n    textColor: 'rgba(0, 0, 0, 0.87)',\n    idLang: 'global.quoteStatusCode.ordered',\n    color: '#C4DD6C',\n  },\n  '5': {\n    textColor: '#fff',\n    idLang: 'global.quoteStatusCode.expired',\n    color: '#BD3E1E',\n  },\n};\n\nconst getOrderStatus = (code: string, b3Lang: LangFormatFunction) => {\n  const status = quoteStatus[code];\n\n  if (!status) {\n    return undefined;\n  }\n\n  const { idLang, ...restQuoteStatus } = status;\n\n  return { ...restQuoteStatus, name: b3Lang(idLang) };\n};\n\nexport default function QuoteStatus(props: OrderStatusProps) {\n  const b3Lang = useB3Lang();\n  const { code } = props;\n\n  const status = getOrderStatus(code, b3Lang);\n\n  if (!status?.name) {\n    return null;\n  }\n\n  return (\n    <B3Tag color={status.color} textColor={status.textColor}>\n      {status.name}\n    </B3Tag>\n  );\n}\n","import { QuoteExtraFieldsType } from '@/types/quotes';\nimport { channelId, convertArrayToGraphql, convertObjectToGraphql, storeHash } from '@/utils';\n\nimport B3Request from '../../request/b3Fetch';\n\nconst getQuotesList = (data: CustomFieldItems, type: string) => `{\n  ${type === 'b2b' ? 'quotes' : 'customerQuotes'}(\n    first: ${data.first}\n    offset: ${data.offset}\n    search: \"${data.q || ''}\"\n    orderBy: \"${data?.orderBy || ''}\"\n    createdBy: \"${data?.createdBy || ''}\"\n    email: \"${data?.email || ''}\"\n    salesRep: \"${data?.salesRep || ''}\"\n    ${data?.status ? `status: \"${data.status}\"` : ''}\n    ${data?.dateCreatedBeginAt ? `dateCreatedBeginAt: \"${data.dateCreatedBeginAt}\"` : ''}\n    ${data?.dateCreatedEndAt ? `dateCreatedEndAt: \"${data.dateCreatedEndAt}\"` : ''}\n    ${type === 'bc' ? `channelId: ${data?.channelId || 1}` : ''}\n  ) {\n    totalCount,\n    edges {\n      node {\n        id,\n        createdAt,\n        updatedAt,\n        quoteNumber,\n        quoteTitle,\n        referenceNumber,\n        createdBy,\n        expiredAt,\n        expiredAt,\n        discount,\n        grandTotal,\n        currency,\n        status,\n        salesRep,\n        salesRepEmail,\n        orderId,\n        subtotal,\n        totalAmount,\n        taxTotal,\n      }\n    }\n  }\n}`;\n\nconst getCustomerAddresses = () => `{\n  customerAddresses (\n    first: 50\n    offset: 0\n  ){\n    totalCount,\n    edges {\n      node {\n        id,\n        createdAt,\n        updatedAt,\n        firstName,\n        lastName,\n        company,\n        bcAddressId,\n        address1,\n        address2,\n        city,\n        stateOrProvince,\n        postalCode,\n        country,\n        countryCode,\n        phone,\n        addressType,\n      },\n    },\n  }\n}`;\n\nconst getAddresses = (companyId: number) => `{\n  addresses (\n    first: 50\n    offset: 0\n    companyId: ${companyId}\n  ){\n    totalCount,\n    edges{\n      node{\n        id,\n        createdAt,\n        updatedAt,\n        firstName,\n        lastName,\n        isShipping,\n        isBilling,\n        addressLine1,\n        addressLine2,\n        address,\n        city,\n        state,\n        stateCode,\n        country,\n        countryCode,\n        zipCode,\n        phoneNumber,\n        isActive,\n        label,\n        company,\n        uuid,\n        isDefaultShipping,\n        isDefaultBilling,\n      },\n    },\n  }\n}`;\n\nconst quoteCreate = (data: CustomFieldItems) => `mutation{\n  quoteCreate(quoteData: {\n    message: \"${data.message}\",\n    legalTerms: \"${data.legalTerms}\",\n    totalAmount: \"${data.totalAmount}\",\n    grandTotal: \"${data.grandTotal}\",\n    subtotal: \"${data.subtotal || ''}\",\n    taxTotal: \"${data.taxTotal || ''}\"\n    ${data?.companyId ? `companyId: ${data.companyId}` : ''}\n    storeHash: \"${data.storeHash}\",\n    discount: \"${data.discount}\",\n    channelId: ${data.channelId},\n    userEmail: \"${data?.userEmail || ''}\",\n    currency: ${convertObjectToGraphql(data.currency)}\n    shippingAddress: ${convertObjectToGraphql(data.shippingAddress)}\n    billingAddress: ${convertObjectToGraphql(data.billingAddress)}\n    contactInfo: ${convertObjectToGraphql(data.contactInfo)}\n    productList: ${convertArrayToGraphql(data.productList || [])},\n    fileList: ${convertArrayToGraphql(data.fileList || [])},\n    quoteTitle: \"${data.quoteTitle}\"\n    ${data?.extraFields ? `extraFields: ${convertArrayToGraphql(data?.extraFields || [])}` : ''}\n    ${data?.referenceNumber ? `referenceNumber: \"${data?.referenceNumber}\"` : ''}\n    ${data?.recipients ? `recipients: ${convertArrayToGraphql(data?.recipients || [])}` : ''}\n  }) {\n    quote{\n      id,\n      createdAt,\n    }\n  }\n}`;\n\nconst quoteUpdate = (data: CustomFieldItems) => `mutation{\n  quoteUpdate(\n    id: ${data.id},\n    quoteData: ${convertObjectToGraphql(data.quoteData)}\n  ) {\n    quote{\n      trackingHistory,\n    }\n  }\n}`;\n\nconst getQuoteInfo = (data: { id: number; date: string }) => `{\n  quote(\n    id: ${data.id},\n    storeHash: \"${storeHash}\",\n    date:  \"${data?.date || ''}\",\n  ) {\n    id,\n    createdAt,\n    updatedAt,\n    quoteNumber,\n    quoteTitle,\n    referenceNumber,\n    userEmail,\n    bcCustomerId,\n    createdBy,\n    expiredAt,\n    companyId {\n      id,\n      companyName,\n      bcGroupName,\n      description,\n      catalogId,\n      companyStatus,\n      addressLine1,\n      addressLine2,\n      city,\n      state,\n      zipCode,\n      country,\n      extraFields {\n        fieldName,\n        fieldValue,\n      },\n    },\n    salesRepStatus,\n    customerStatus,\n    subtotal,\n    discount,\n    grandTotal,\n    cartId,\n    cartUrl,\n    checkoutUrl,\n    bcOrderId,\n    currency,\n    contactInfo,\n    trackingHistory,\n    extraFields {\n      fieldName,\n      fieldValue,\n    },\n    notes,\n    legalTerms,\n    shippingTotal,\n    taxTotal,\n    totalAmount,\n    shippingMethod,\n    billingAddress,\n    oldSalesRepStatus,\n    oldCustomerStatus,\n    recipients,\n    discountType,\n    discountValue,\n    status,\n    company,\n    salesRep,\n    salesRepEmail,\n    orderId,\n    shippingAddress,\n    productsList {\n      productId,\n      sku,\n      basePrice,\n      discount,\n      offeredPrice,\n      quantity,\n      variantId,\n      imageUrl,\n      orderQuantityMaximum,\n      orderQuantityMinimum,\n      productName,\n      purchaseHandled,\n      options,\n      notes,\n      costPrice,\n      inventoryTracking,\n      inventoryLevel,\n    },\n    storefrontAttachFiles {\n      id,\n      fileName,\n      fileType,\n      fileUrl,\n      createdBy,\n    },\n    backendAttachFiles {\n      id,\n      fileName,\n      fileType,\n      fileUrl,\n      createdBy,\n    },\n    storeInfo {\n      storeName,\n      storeAddress,\n      storeCountry,\n      storeLogo,\n      storeUrl,\n    },\n    companyInfo {\n      companyId,\n      companyName,\n      companyAddress,\n      companyCountry,\n      companyState,\n      companyCity,\n      companyZipCode,\n      phoneNumber,\n    },\n    salesRepInfo {\n      salesRepName,\n      salesRepEmail,\n      salesRepPhoneNumber,\n    },\n    quoteLogo,\n    quoteUrl,\n    channelId,\n    channelName,\n    allowCheckout,\n    displayDiscount,\n  }\n}`;\n\nconst exportQuotePdf = (data: {\n  quoteId: number;\n  createdAt: number;\n  isPreview: boolean;\n  lang: string;\n}) => `mutation{\n  quoteFrontendPdf(\n    quoteId: ${data.quoteId},\n    storeHash: \"${storeHash}\",\n    createdAt: ${data.createdAt},\n    lang: \"${data.lang}\",\n    isPreview: ${data.isPreview}\n  ) {\n    url,\n    content,\n  }\n}`;\n\nconst quoteCheckout = (data: { id: number }) => `mutation{\n  quoteCheckout(\n    id: ${data.id},\n    storeHash: \"${storeHash}\",\n  ) {\n    quoteCheckout {\n      checkoutUrl,\n      cartId,\n      cartUrl,\n    }\n  }\n}`;\n\nconst quoteAttachFileCreate = (data: CustomFieldItems) => `mutation{\n  quoteAttachFileCreate(\n    quoteId: ${data.quoteId},\n    fileList: ${convertArrayToGraphql(data.fileList || [])}\n  ) {\n    attachFiles {\n      id,\n      createdBy,\n      fileUrl,\n    }\n  }\n}`;\n\nconst quoteAttachFileDelete = (data: CustomFieldItems) => `mutation{\n  quoteAttachFileDelete(\n    quoteId: ${data.quoteId},\n    fileId: ${data.fileId}\n  ) {\n    message\n  }\n}`;\n\nconst getCreatedByUser = (companyId: number, module: number, fn: string) => `{\n  ${fn}(\n    companyId: ${companyId},\n    module: ${module},\n  ){\n    results,\n  }\n}`;\n\nconst getStorefrontProductSettings = `\nquery getStorefrontProductSettings($storeHash: String!, $channelId: Int) {\n  storefrontProductSettings(storeHash: $storeHash, channelId: $channelId) {\n    hidePriceFromGuests\n  }\n}\n`;\n\nconst getQuoteExtraFields = `query getQuoteExtraFields($storeHash: String, $channelId: Int) {\n  quoteExtraFieldsConfig(storeHash: $storeHash, channelId: $channelId) {\n    fieldName,\n    fieldType,\n    isRequired,\n    defaultValue,\n    maximumLength,\n    numberOfRows,\n    maximumValue,\n    listOfValue,\n    visibleToEnduser,\n    labelName,\n    id,\n    isUnique,\n    valueConfigs,\n    fieldCategory,\n  }\n}`;\n\nexport const getBCCustomerAddresses = () =>\n  B3Request.graphqlB2B({\n    query: getCustomerAddresses(),\n  });\n\nexport const getB2BCustomerAddresses = (companyId: number) =>\n  B3Request.graphqlB2B({\n    query: getAddresses(companyId),\n  });\n\nexport const getB2BQuotesList = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: getQuotesList(data, 'b2b'),\n  }).then((res) => res.quotes);\n\nexport const getBCQuotesList = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: getQuotesList(data, 'bc'),\n  }).then((res) => res.customerQuotes);\n\nexport const createQuote = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: quoteCreate(data),\n  });\n\nexport const createBCQuote = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: quoteCreate(data),\n  });\n\nexport const updateB2BQuote = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: quoteUpdate(data),\n  });\n\nexport const updateBCQuote = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: quoteUpdate(data),\n  });\n\nexport const getB2BQuoteDetail = (data: { id: number; date: string }) =>\n  B3Request.graphqlB2B({\n    query: getQuoteInfo(data),\n  });\n\nexport const getBcQuoteDetail = (data: { id: number; date: string }) =>\n  B3Request.graphqlB2B({\n    query: getQuoteInfo(data),\n  });\n\nexport const exportB2BQuotePdf = (data: {\n  quoteId: number;\n  createdAt: number;\n  isPreview: boolean;\n  lang: string;\n}) =>\n  B3Request.graphqlB2B({\n    query: exportQuotePdf(data),\n  });\n\nexport const exportBcQuotePdf = (data: {\n  quoteId: number;\n  createdAt: number;\n  isPreview: boolean;\n  lang: string;\n}) =>\n  B3Request.graphqlB2B({\n    query: exportQuotePdf(data),\n  });\n\nexport const b2bQuoteCheckout = (data: { id: number }) =>\n  B3Request.graphqlB2B({\n    query: quoteCheckout(data),\n  });\n\nexport const bcQuoteCheckout = (data: { id: number }) =>\n  B3Request.graphqlB2B({\n    query: quoteCheckout(data),\n  });\n\nexport const quoteDetailAttachFileCreate = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: quoteAttachFileCreate(data),\n  });\n\nexport const quoteDetailAttachFileDelete = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: quoteAttachFileDelete(data),\n  });\n\nexport const getQuoteCreatedByUsers = (companyId: number, module: number) =>\n  B3Request.graphqlB2B({\n    query: getCreatedByUser(companyId, module, 'createdByUser'),\n  });\n\nexport const getBCStorefrontProductSettings = () =>\n  B3Request.graphqlB2B({\n    query: getStorefrontProductSettings,\n    variables: { storeHash, channelId },\n  });\n\nexport const getQuoteExtraFieldsConfig = (): Promise<QuoteExtraFieldsType> =>\n  B3Request.graphqlB2B({\n    query: getQuoteExtraFields,\n    variables: { storeHash, channelId },\n  });\n"],"names":["props","b3Lang","useB3Lang","code","status","getOrderStatus","name","jsx","B3Tag","color","textColor","children","getQuotesList","data","type","first","offset","q","orderBy","createdBy","email","salesRep","dateCreatedBeginAt","dateCreatedEndAt","channelId","getAddresses","companyId","quoteCreate","message","legalTerms","totalAmount","grandTotal","subtotal","taxTotal","storeHash","discount","userEmail","convertObjectToGraphql","currency","shippingAddress","billingAddress","contactInfo","convertArrayToGraphql","productList","fileList","quoteTitle","extraFields","referenceNumber","recipients","quoteUpdate","id","quoteData","getQuoteInfo","date","exportQuotePdf","quoteId","createdAt","lang","isPreview","quoteCheckout","quoteAttachFileCreate","quoteAttachFileDelete","fileId","quoteStatus","exports","B3Request","graphqlB2B","query","then","res","quotes","customerQuotes","variables","idLang","restQuoteStatus"],"mappings":"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"}