{"version":3,"file":"address-D67CS8fH.js","sources":["../../src/shared/service/b2b/graphql/address.ts"],"sourcesContent":["import { convertArrayToGraphql, storeHash } from '@/utils';\n\nimport B3Request from '../../request/b3Fetch';\n\nconst getAddressConfig = () => `{\n  addressConfig (\n    storeHash: \"${storeHash}\"\n  ){\n    key\n    isEnabled\n  }\n}`;\n\nconst getAddress = ({\n  companyId = 0,\n  offset = 0,\n  first = 50,\n  search = '',\n  country = '',\n  state = '',\n  city = '',\n}) => `{\n  addresses (\n    companyId: ${companyId}\n    offset: ${offset}\n    first: ${first}\n    search: \"${search}\"\n    country: \"${country}\"\n    state: \"${state}\"\n    city: \"${city}\"\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node{\n        id\n        createdAt\n        updatedAt\n        firstName\n        lastName\n        isShipping\n        isBilling\n        addressLine1\n        addressLine2\n        address\n        city\n        state\n        stateCode\n        country\n        countryCode\n        zipCode\n        phoneNumber\n        isActive\n        label\n        company\n        uuid\n        extraFields {\n          fieldName\n          fieldValue\n        }\n        isDefaultShipping\n        isDefaultBilling\n        companyInfo {\n          companyId\n          companyName\n        }\n      }\n    }\n  }\n}`;\n\nconst createAddress = (data: any) => `mutation{\n  addressCreate(addressData: {\n    companyId: ${data.companyId},\n    firstName: \"${data.firstName}\",\n    lastName: \"${data.lastName}\",\n    addressLine1: \"${data.addressLine1}\",\n    addressLine2: \"${data.addressLine2 || ''}\",\n    country: \"${data.country}\",\n    countryCode: \"${data.countryCode}\",\n    state: \"${data.state}\",\n    stateCode: \"${data.stateCode || ''}\",\n    city: \"${data.city}\",\n    zipCode: \"${data.zipCode}\",\n    phoneNumber: \"${data.phoneNumber}\",\n    isShipping: ${data.isShipping},\n    isBilling: ${data.isBilling},\n    isDefaultShipping: ${data.isDefaultShipping},\n    isDefaultBilling: ${data.isDefaultBilling},\n    label: \"${data.label}\",\n    uuid: \"${data.uuid || ''}\",\n    extraFields: ${convertArrayToGraphql(data.extraFields || [])},\n    company: \"${data.company}\",\n  }) {\n    address{\n      id\n    }\n  }\n}`;\n\nconst getCustomerAddress = ({\n  offset = 0,\n  first = 50,\n  search = '',\n  country = '',\n  state = '',\n  city = '',\n}) => `{\n  customerAddresses (\n    offset: ${offset}\n    first: ${first}\n    search: \"${search}\"\n    country: \"${country}\"\n    stateOrProvince: \"${state}\"\n    city: \"${city}\"\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node{\n        id\n        createdAt\n        updatedAt\n        firstName\n        lastName\n        company\n        bcAddressId\n        address1\n        address2\n        city\n        stateOrProvince\n        postalCode\n        country\n        countryCode\n        phone\n        addressType\n        formFields{\n          name\n          value\n          addressId\n        }\n      }\n    }\n  }\n}`;\n\nconst updateAddress = (data: CustomFieldItems) => `mutation{\n  addressUpdate(addressData: {\n    companyId: ${data.companyId},\n    firstName: \"${data.firstName}\",\n    lastName: \"${data.lastName}\",\n    addressLine1: \"${data.addressLine1}\",\n    addressLine2: \"${data.addressLine2 || ''}\",\n    country: \"${data.country}\",\n    countryCode: \"${data.countryCode}\",\n    state: \"${data.state}\",\n    stateCode: \"${data.stateCode || ''}\",\n    city: \"${data.city}\",\n    zipCode: \"${data.zipCode}\",\n    phoneNumber: \"${data.phoneNumber}\",\n    isShipping: ${data.isShipping},\n    isBilling: ${data.isBilling},\n    isDefaultShipping: ${data.isDefaultShipping},\n    isDefaultBilling: ${data.isDefaultBilling},\n    label: \"${data.label}\",\n    uuid: \"${data.uuid}\",\n    extraFields: ${convertArrayToGraphql(data.extraFields || [])},\n    addressId: ${data.id}\n    company: \"${data.company}\",\n  }) {\n    address{\n      id\n    }\n  }\n}`;\n\nconst createCustomerAddress = (data: CustomFieldItems) => `mutation{\n  customerAddressCreate(addressData: {\n    firstName: \"${data.firstName}\",\n    lastName: \"${data.lastName}\",\n    company: \"${data.company || ''}\",\n    address1: \"${data.address1}\",\n    address2: \"${data.address2 || ''}\",\n    city: \"${data.city}\",\n    phone: \"${data.phone}\",\n    stateOrProvince: \"${data.state}\",\n    countryCode: \"${data.countryCode}\",\n    postalCode: \"${data.postalCode}\"\n    addressType: \"${data.addressType || 'residential'}\"\n    formFields: ${convertArrayToGraphql(data.formFields || [])}\n  }) {\n    address{\n      id\n    }\n  }\n}`;\nconst updateCustomerAddress = (data: CustomFieldItems) => `mutation{\n  customerAddressUpdate(addressData: {\n    company: \"${data.company || ''}\",\n    firstName: \"${data.firstName}\",\n    lastName: \"${data.lastName}\",\n    address1: \"${data.address1}\",\n    address2: \"${data.address2 || ''}\",\n    city: \"${data.city}\",\n    phone: \"${data.phone}\",\n    stateOrProvince: \"${data.state}\",\n    countryCode: \"${data.countryCode}\",\n    postalCode: \"${data.postalCode}\"\n    addressType: \"${data.addressType || 'residential'}\"\n    formFields: ${convertArrayToGraphql(data.formFields || [])}\n    bcAddressId: ${data.id}\n  }) {\n    address{\n      id\n    }\n  }\n}`;\n\nconst deleteAddress = (data: CustomFieldItems) => `mutation{\n  addressDelete(\n    addressId: ${data.addressId},\n    companyId: ${data.companyId},\n  ) {\n    message\n  }\n}`;\n\nconst getAddressExtraFields = () => `{\n  addressExtraFields(storeHash: \"${storeHash}\") {\n    fieldName,\n    fieldType,\n    isRequired,\n    defaultValue,\n    maximumLength,\n    maximumLength,\n    maximumValue,\n    listOfValue,\n    visibleToEnduser,\n    labelName,\n    numberOfRows,\n  }\n}`;\n\nexport const getB2BAddressExtraFields = () =>\n  B3Request.graphqlB2B({\n    query: getAddressExtraFields(),\n  });\n\nconst deleteCustomerAddress = (data: CustomFieldItems) => `mutation{\n  customerAddressDelete(\n    bcAddressId: ${data.bcAddressId},\n  ) {\n    message\n  }\n}`;\n\nexport const getB2BAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: getAddress(data),\n  });\n\nexport const getB2BAddressConfig = () =>\n  B3Request.graphqlB2B({\n    query: getAddressConfig(),\n  });\n\nexport const getBCCustomerAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: getCustomerAddress(data),\n  });\n\nexport const deleteB2BAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: deleteAddress(data),\n  });\n\nexport const deleteBCCustomerAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: deleteCustomerAddress(data),\n  });\n\nexport const updateB2BAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: updateAddress(data),\n  });\n\nexport const createB2BAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: createAddress(data),\n  });\n\nexport const createBcAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: createCustomerAddress(data),\n  });\nexport const updateBcAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: updateCustomerAddress(data),\n  });\n"],"names":["getAddressConfig","storeHash","getAddress","companyId","offset","first","search","country","state","city","createAddress","data","convertArrayToGraphql","getCustomerAddress","updateAddress","createCustomerAddress","updateCustomerAddress","deleteAddress","getAddressExtraFields","getB2BAddressExtraFields","B3Request","deleteCustomerAddress","getB2BAddress","getB2BAddressConfig","getBCCustomerAddress","deleteB2BAddress","deleteBCCustomerAddress","updateB2BAddress","createB2BAddress","createBcAddress","updateBcAddress"],"mappings":"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"}