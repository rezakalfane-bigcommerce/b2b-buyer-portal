{"version":3,"file":"address-legacy-CJ0MjBqR.js","sources":["../../src/shared/service/b2b/graphql/address.ts"],"sourcesContent":["import { convertArrayToGraphql, storeHash } from '@/utils';\n\nimport B3Request from '../../request/b3Fetch';\n\nconst getAddressConfig = () => `{\n  addressConfig (\n    storeHash: \"${storeHash}\"\n  ){\n    key\n    isEnabled\n  }\n}`;\n\nconst getAddress = ({\n  companyId = 0,\n  offset = 0,\n  first = 50,\n  search = '',\n  country = '',\n  state = '',\n  city = '',\n}) => `{\n  addresses (\n    companyId: ${companyId}\n    offset: ${offset}\n    first: ${first}\n    search: \"${search}\"\n    country: \"${country}\"\n    state: \"${state}\"\n    city: \"${city}\"\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node{\n        id\n        createdAt\n        updatedAt\n        firstName\n        lastName\n        isShipping\n        isBilling\n        addressLine1\n        addressLine2\n        address\n        city\n        state\n        stateCode\n        country\n        countryCode\n        zipCode\n        phoneNumber\n        isActive\n        label\n        company\n        uuid\n        extraFields {\n          fieldName\n          fieldValue\n        }\n        isDefaultShipping\n        isDefaultBilling\n        companyInfo {\n          companyId\n          companyName\n        }\n      }\n    }\n  }\n}`;\n\nconst createAddress = (data: any) => `mutation{\n  addressCreate(addressData: {\n    companyId: ${data.companyId},\n    firstName: \"${data.firstName}\",\n    lastName: \"${data.lastName}\",\n    addressLine1: \"${data.addressLine1}\",\n    addressLine2: \"${data.addressLine2 || ''}\",\n    country: \"${data.country}\",\n    countryCode: \"${data.countryCode}\",\n    state: \"${data.state}\",\n    stateCode: \"${data.stateCode || ''}\",\n    city: \"${data.city}\",\n    zipCode: \"${data.zipCode}\",\n    phoneNumber: \"${data.phoneNumber}\",\n    isShipping: ${data.isShipping},\n    isBilling: ${data.isBilling},\n    isDefaultShipping: ${data.isDefaultShipping},\n    isDefaultBilling: ${data.isDefaultBilling},\n    label: \"${data.label}\",\n    uuid: \"${data.uuid || ''}\",\n    extraFields: ${convertArrayToGraphql(data.extraFields || [])},\n    company: \"${data.company}\",\n  }) {\n    address{\n      id\n    }\n  }\n}`;\n\nconst getCustomerAddress = ({\n  offset = 0,\n  first = 50,\n  search = '',\n  country = '',\n  state = '',\n  city = '',\n}) => `{\n  customerAddresses (\n    offset: ${offset}\n    first: ${first}\n    search: \"${search}\"\n    country: \"${country}\"\n    stateOrProvince: \"${state}\"\n    city: \"${city}\"\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node{\n        id\n        createdAt\n        updatedAt\n        firstName\n        lastName\n        company\n        bcAddressId\n        address1\n        address2\n        city\n        stateOrProvince\n        postalCode\n        country\n        countryCode\n        phone\n        addressType\n        formFields{\n          name\n          value\n          addressId\n        }\n      }\n    }\n  }\n}`;\n\nconst updateAddress = (data: CustomFieldItems) => `mutation{\n  addressUpdate(addressData: {\n    companyId: ${data.companyId},\n    firstName: \"${data.firstName}\",\n    lastName: \"${data.lastName}\",\n    addressLine1: \"${data.addressLine1}\",\n    addressLine2: \"${data.addressLine2 || ''}\",\n    country: \"${data.country}\",\n    countryCode: \"${data.countryCode}\",\n    state: \"${data.state}\",\n    stateCode: \"${data.stateCode || ''}\",\n    city: \"${data.city}\",\n    zipCode: \"${data.zipCode}\",\n    phoneNumber: \"${data.phoneNumber}\",\n    isShipping: ${data.isShipping},\n    isBilling: ${data.isBilling},\n    isDefaultShipping: ${data.isDefaultShipping},\n    isDefaultBilling: ${data.isDefaultBilling},\n    label: \"${data.label}\",\n    uuid: \"${data.uuid}\",\n    extraFields: ${convertArrayToGraphql(data.extraFields || [])},\n    addressId: ${data.id}\n    company: \"${data.company}\",\n  }) {\n    address{\n      id\n    }\n  }\n}`;\n\nconst createCustomerAddress = (data: CustomFieldItems) => `mutation{\n  customerAddressCreate(addressData: {\n    firstName: \"${data.firstName}\",\n    lastName: \"${data.lastName}\",\n    company: \"${data.company || ''}\",\n    address1: \"${data.address1}\",\n    address2: \"${data.address2 || ''}\",\n    city: \"${data.city}\",\n    phone: \"${data.phone}\",\n    stateOrProvince: \"${data.state}\",\n    countryCode: \"${data.countryCode}\",\n    postalCode: \"${data.postalCode}\"\n    addressType: \"${data.addressType || 'residential'}\"\n    formFields: ${convertArrayToGraphql(data.formFields || [])}\n  }) {\n    address{\n      id\n    }\n  }\n}`;\nconst updateCustomerAddress = (data: CustomFieldItems) => `mutation{\n  customerAddressUpdate(addressData: {\n    company: \"${data.company || ''}\",\n    firstName: \"${data.firstName}\",\n    lastName: \"${data.lastName}\",\n    address1: \"${data.address1}\",\n    address2: \"${data.address2 || ''}\",\n    city: \"${data.city}\",\n    phone: \"${data.phone}\",\n    stateOrProvince: \"${data.state}\",\n    countryCode: \"${data.countryCode}\",\n    postalCode: \"${data.postalCode}\"\n    addressType: \"${data.addressType || 'residential'}\"\n    formFields: ${convertArrayToGraphql(data.formFields || [])}\n    bcAddressId: ${data.id}\n  }) {\n    address{\n      id\n    }\n  }\n}`;\n\nconst deleteAddress = (data: CustomFieldItems) => `mutation{\n  addressDelete(\n    addressId: ${data.addressId},\n    companyId: ${data.companyId},\n  ) {\n    message\n  }\n}`;\n\nconst getAddressExtraFields = () => `{\n  addressExtraFields(storeHash: \"${storeHash}\") {\n    fieldName,\n    fieldType,\n    isRequired,\n    defaultValue,\n    maximumLength,\n    maximumLength,\n    maximumValue,\n    listOfValue,\n    visibleToEnduser,\n    labelName,\n    numberOfRows,\n  }\n}`;\n\nexport const getB2BAddressExtraFields = () =>\n  B3Request.graphqlB2B({\n    query: getAddressExtraFields(),\n  });\n\nconst deleteCustomerAddress = (data: CustomFieldItems) => `mutation{\n  customerAddressDelete(\n    bcAddressId: ${data.bcAddressId},\n  ) {\n    message\n  }\n}`;\n\nexport const getB2BAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: getAddress(data),\n  });\n\nexport const getB2BAddressConfig = () =>\n  B3Request.graphqlB2B({\n    query: getAddressConfig(),\n  });\n\nexport const getBCCustomerAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: getCustomerAddress(data),\n  });\n\nexport const deleteB2BAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: deleteAddress(data),\n  });\n\nexport const deleteBCCustomerAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: deleteCustomerAddress(data),\n  });\n\nexport const updateB2BAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: updateAddress(data),\n  });\n\nexport const createB2BAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: createAddress(data),\n  });\n\nexport const createBcAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: createCustomerAddress(data),\n  });\nexport const updateBcAddress = (data: CustomFieldItems = {}) =>\n  B3Request.graphqlB2B({\n    query: updateCustomerAddress(data),\n  });\n"],"names":["getAddress","companyId","offset","first","search","country","state","city","createAddress","data","firstName","lastName","addressLine1","addressLine2","countryCode","stateCode","zipCode","phoneNumber","isShipping","isBilling","isDefaultShipping","isDefaultBilling","label","uuid","convertArrayToGraphql","extraFields","company","getCustomerAddress","updateAddress","id","createCustomerAddress","address1","address2","phone","postalCode","addressType","formFields","updateCustomerAddress","deleteAddress","addressId","deleteCustomerAddress","exports","B3Request","graphqlB2B","query","storeHash","bcAddressId"],"mappings":"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"}