{"version":3,"file":"b3TriggerCartNumber-legacy-CXlx3yUO.js","sources":["../../src/utils/b3TriggerCartNumber.ts"],"sourcesContent":["import { getCart } from '@/shared/service/bc/graphql/cart';\nimport { setCartNumber, store } from '@/store';\n\nimport b2bLogger from './b3Logger';\n\nconst productTypeKey = ['customItems', 'digitalItems', 'giftCertificates', 'physicalItems'];\n\nconst b3TriggerCartNumber = async () => {\n  let number = 0;\n\n  try {\n    const cartInfo = await getCart();\n\n    if (cartInfo.data.site.cart) {\n      const items = cartInfo.data.site.cart.lineItems;\n      productTypeKey.forEach((key: string) => {\n        const productItem = items[key];\n        if (productItem && productItem.length > 0) {\n          if (key === 'giftCertificates') {\n            number += productItem.length;\n          } else {\n            productItem.forEach((item: CustomFieldItems) => {\n              number += Number(item.quantity);\n            });\n          }\n        }\n      });\n    }\n  } catch (err) {\n    b2bLogger.error(err);\n  }\n\n  store.dispatch(setCartNumber(number));\n};\n\nexport default b3TriggerCartNumber;\n"],"names":["productTypeKey","async","number","cartInfo","getCart","data","site","cart","items","lineItems","forEach","key","productItem","length","item","Number","quantity","err","b2bLogger","error","store","dispatch","setCartNumber"],"mappings":"kMAKA,MAAMA,EAAiB,CAAC,cAAe,eAAgB,mBAAoB,wBAE/CC,UAC1B,IAAIC,EAAS,EAET,IACI,MAAAC,QAAiBC,IAEnB,GAAAD,EAASE,KAAKC,KAAKC,KAAM,CAC3B,MAAMC,EAAQL,EAASE,KAAKC,KAAKC,KAAKE,UACvBT,EAAAU,SAASC,IAChB,MAAAC,EAAcJ,EAAMG,GACtBC,GAAeA,EAAYC,OAAS,IAC1B,qBAARF,EACFT,GAAUU,EAAYC,OAEVD,EAAAF,SAASI,IACTZ,GAAAa,OAAOD,EAAKE,SAAQ,IAElC,GAEH,QAEIC,GACPC,EAAUC,MAAMF,EAAG,CAGfG,EAAAC,SAASC,EAAcpB,GAAO"}