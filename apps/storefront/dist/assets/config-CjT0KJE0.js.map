{"version":3,"file":"config-CjT0KJE0.js","sources":["../../src/hooks/useVerifyPermission.ts","../../src/pages/Address/shared/config.ts"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\n\nimport { permissionLevels } from '@/constants';\nimport { useAppSelector } from '@/store';\nimport {\n  levelComparison,\n  validateBasePermissionWithComparisonType,\n  ValidatePermissionWithComparisonTypeProps,\n  VerifyLevelPermissionProps,\n} from '@/utils';\n\nexport const useVerifyLevelPermission = ({\n  code,\n  companyId = 0,\n  userEmail = '',\n  userId = 0,\n}: VerifyLevelPermissionProps) => {\n  const [isVerified, setIsVerified] = useState(false);\n\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n  const { companyInfo, customer, permissions } = useAppSelector(({ company }) => company);\n\n  useEffect(() => {\n    const info = permissions.find((permission) => permission.code.includes(code));\n\n    if (!info) return;\n\n    const { permissionLevel } = info;\n\n    if (!permissionLevel) return;\n\n    setIsVerified(\n      levelComparison({\n        permissionLevel: Number(permissionLevel),\n        customer,\n        companyInfo,\n        params: {\n          companyId,\n          userEmail,\n          userId,\n        },\n      }),\n    );\n  }, [\n    selectCompanyHierarchyId,\n    code,\n    companyId,\n    userEmail,\n    userId,\n    companyInfo,\n    customer,\n    permissions,\n  ]);\n\n  return [isVerified];\n};\n\nexport const useValidatePermissionWithComparisonType = ({\n  level = 0,\n  code = '',\n  containOrEqual = 'equal',\n}: ValidatePermissionWithComparisonTypeProps) => {\n  const { permissions } = useAppSelector(({ company }) => company);\n\n  const [isValidate, setIsValidate] = useState(false);\n\n  useEffect(() => {\n    if (!permissions?.length) return;\n\n    const isPermissions = validateBasePermissionWithComparisonType({\n      level,\n      code,\n      containOrEqual,\n      permissions,\n    });\n    setIsValidate(isPermissions);\n  }, [permissions, level, code, containOrEqual]);\n\n  return [isValidate];\n};\n\nexport const useVerifyCreatePermission = (codes: string[]) => {\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  const { permissions } = useAppSelector(({ company }) => company);\n  const level = useMemo(() => {\n    return selectCompanyHierarchyId ? permissionLevels.COMPANY_SUBSIDIARIES : permissionLevels.USER;\n  }, [selectCompanyHierarchyId]);\n\n  const [permissionInfo, setPermissionsInfo] = useState<boolean[]>([]);\n\n  useEffect(() => {\n    if (!permissions?.length) return;\n\n    const info = codes.map((code) => {\n      const isPermissions = validateBasePermissionWithComparisonType({\n        level,\n        code,\n        containOrEqual: 'contain',\n        permissions,\n      });\n\n      return isPermissions;\n    });\n\n    setPermissionsInfo(info);\n  }, [permissions, level, codes]);\n\n  return permissionInfo;\n};\n","import { AddressItemType, BCAddressItemType } from '../../../types/address';\n\nexport interface B2bShippingBillingChildProps {\n  name: string;\n  label: string;\n  default: string;\n  parent: string;\n  idLang: string;\n}\nexport interface B2bShippingBillingProps {\n  name: string;\n  label: string;\n  default: string;\n  child: B2bShippingBillingChildProps;\n  idLang: string;\n}\n\nexport const filterFormConfig = [\n  {\n    name: 'city',\n    label: 'City',\n    required: false,\n    default: '',\n    fieldType: 'text',\n    xs: 12,\n    variant: 'filled',\n    size: 'small',\n    idLang: 'addresses.filter.city',\n  },\n  {\n    name: 'state',\n    label: 'State',\n    required: false,\n    default: '',\n    fieldType: 'text',\n    xs: 12,\n    variant: 'filled',\n    size: 'small',\n    idLang: 'addresses.filter.state',\n  },\n  {\n    name: 'country',\n    label: 'Country',\n    required: false,\n    default: '',\n    fieldType: 'text',\n    xs: 12,\n    variant: 'filled',\n    size: 'small',\n    idLang: 'addresses.filter.country',\n  },\n];\n\nexport const b2bShippingBilling = [\n  {\n    name: 'isShipping',\n    label: 'Shipping',\n    default: '',\n    idLang: 'addresses.editAddress.shipping',\n    child: {\n      name: 'isDefaultShipping',\n      label: 'Default Shipping Address',\n      default: '',\n      parent: 'isShipping',\n      idLang: 'addresses.editAddress.defaultShippingAddress',\n    },\n  },\n  {\n    name: 'isBilling',\n    label: 'Billing',\n    default: '',\n    idLang: 'addresses.editAddress.billing',\n    child: {\n      name: 'isDefaultBilling',\n      label: 'Default Billing Address',\n      default: '',\n      parent: 'isBilling',\n      idLang: 'addresses.editAddress.defaultBillingAddress',\n    },\n  },\n];\n\nexport const b2bAddressFields = [\n  {\n    name: 'label',\n    label: 'Address label',\n    required: false,\n    fieldType: 'text',\n    xs: 12,\n    default: '',\n    variant: 'filled',\n    size: 'small',\n    idLang: 'addresses.editAddress.addressLabel',\n  },\n  {\n    name: 'firstName',\n    label: 'First name',\n    required: true,\n    default: '',\n    fieldType: 'text',\n    xs: 6,\n    variant: 'filled',\n    size: 'small',\n    idLang: 'addresses.editAddress.firstName',\n  },\n  {\n    name: 'lastName',\n    label: 'Last name',\n    required: true,\n    fieldType: 'text',\n    xs: 6,\n    default: '',\n    variant: 'filled',\n    size: 'small',\n    idLang: 'addresses.editAddress.lastName',\n  },\n  {\n    name: 'company',\n    label: 'Company',\n    required: false,\n    fieldType: 'text',\n    xs: 12,\n    default: '',\n    variant: 'filled',\n    size: 'small',\n    idLang: 'addresses.editAddress.company',\n  },\n  {\n    name: 'country',\n    label: 'Country',\n    required: true,\n    fieldType: 'dropdown',\n    xs: 12,\n    default: '',\n    variant: 'filled',\n    size: 'small',\n    replaceOptions: {\n      label: 'countryName',\n      value: 'countryCode',\n    },\n    options: [],\n    idLang: 'addresses.editAddress.country',\n  },\n  {\n    name: 'addressLine1',\n    label: 'Address line 1',\n    required: true,\n    fieldType: 'text',\n    xs: 12,\n    default: '',\n    variant: 'filled',\n    size: 'small',\n    idLang: 'addresses.editAddress.addressLine1',\n  },\n  {\n    name: 'addressLine2',\n    label: 'Address line 2',\n    required: false,\n    fieldType: 'text',\n    xs: 12,\n    default: '',\n    variant: 'filled',\n    size: 'small',\n    idLang: 'addresses.editAddress.addressLine2',\n  },\n  {\n    name: 'city',\n    label: 'City',\n    required: true,\n    fieldType: 'text',\n    xs: 12,\n    default: '',\n    variant: 'filled',\n    size: 'small',\n    idLang: 'addresses.editAddress.city',\n  },\n  {\n    name: 'state',\n    label: 'State',\n    required: true,\n    fieldType: 'text',\n    xs: 8,\n    default: '',\n    variant: 'filled',\n    size: 'small',\n    replaceOptions: {\n      label: 'stateName',\n      value: 'stateCode',\n    },\n    idLang: 'addresses.editAddress.state',\n  },\n  {\n    name: 'zipCode',\n    label: 'ZIP code',\n    required: true,\n    fieldType: 'text',\n    xs: 4,\n    default: '',\n    variant: 'filled',\n    size: 'small',\n    idLang: 'addresses.editAddress.zipCode',\n  },\n  {\n    name: 'phoneNumber',\n    label: 'Phone number',\n    required: false,\n    fieldType: 'text',\n    xs: 12,\n    default: '',\n    variant: 'filled',\n    size: 'small',\n    idLang: 'addresses.editAddress.phoneNumber',\n  },\n];\n\nexport const convertBCToB2BAddress: (data: BCAddressItemType) => AddressItemType = (data) => {\n  const extraFields = (data.formFields || []).map((item) => ({\n    fieldName: item.name,\n    fieldValue: item.value,\n  }));\n\n  return {\n    id: data.id,\n    createdAt: data.createdAt,\n    updatedAt: data.updatedAt,\n    firstName: data.firstName,\n    lastName: data.lastName,\n    addressLine1: data.address1,\n    addressLine2: data.address2 || '',\n    address1: data.address1,\n    address2: data.address2 || '',\n    address: '',\n    city: data.city,\n    state: data.stateOrProvince,\n    stateCode: '',\n    country: data.country,\n    countryCode: data.countryCode,\n    zipCode: data.postalCode,\n    postalCode: data.postalCode,\n    phoneNumber: data.phone,\n    phone: data.phone,\n    isActive: 1,\n    label: '',\n    extraFields,\n    company: data.company,\n    bcAddressId: data.bcAddressId,\n  };\n};\n"],"names":["useValidatePermissionWithComparisonType","level","code","containOrEqual","permissions","useAppSelector","company","isValidate","setIsValidate","useState","useEffect","isPermissions","validateBasePermissionWithComparisonType","useVerifyCreatePermission","codes","selectCompanyHierarchyId","useMemo","permissionLevels","permissionInfo","setPermissionsInfo","info","filterFormConfig","b2bShippingBilling","b2bAddressFields","convertBCToB2BAddress","data","extraFields","item"],"mappings":"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"}