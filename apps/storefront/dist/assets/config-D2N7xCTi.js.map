{"version":3,"file":"config-D2N7xCTi.js","sources":["../../src/utils/b3GetTextLenPX.ts","../../src/shared/service/b2b/api/address.ts","../../src/shared/service/b2b/api/register.ts","../../src/pages/Registered/config.ts"],"sourcesContent":["const getTextLenPX = (text: string, fontSize = 14) => {\n  if (text) {\n    // eslint-disable-next-line no-control-regex\n    const strLen = text.replace(/[^\\x00-\\xff]/gi, 'aa').length;\n\n    return (strLen * fontSize) / 2;\n  }\n\n  return null;\n};\n\nconst getLineNumber = (text: string, fontSize = 14) => {\n  const screenWidth = document.body.clientWidth;\n  const isMobile = screenWidth <= 750;\n\n  // pc padding: 12.8 + 12.8 + 8 + 8 + 12 + 12, origin width: 537px\n  // mobile padding: (12.8 + 16 + 8 + 12) * 2, origin width: screenWidth, body margin: 16\n  const pcLen = 500;\n  const mobileLen = screenWidth + 16 - 98;\n\n  const screenLen = isMobile ? mobileLen : pcLen;\n  const len = getTextLenPX(text, fontSize);\n  if (len !== null) {\n    const lineNumber = Math.ceil(len / screenLen);\n\n    return lineNumber;\n  }\n\n  return 1;\n};\n\nexport { getLineNumber, getTextLenPX };\n","import { storeHash } from '@/utils';\n\nimport B3Request from '../../request/b3Fetch';\nimport { RequestType } from '../../request/base';\n\nconst validateAddressExtraFields = (data: CustomFieldItems) =>\n  B3Request.post('/api/v2/extra-fields/address/validate', RequestType.B2BRest, {\n    ...data,\n    storeHash,\n  });\nexport default validateAddressExtraFields;\n","import { channelId, storeHash } from '@/utils';\n\nimport B3Request from '../../request/b3Fetch';\nimport { RequestType } from '../../request/base';\n\nexport const validateBCCompanyExtraFields = (data: CustomFieldItems) =>\n  B3Request.post('/api/v2/extra-fields/company/validate', RequestType.B2BRest, {\n    ...data,\n    storeHash,\n    bcChannelId: channelId,\n  });\n\nexport const validateBCCompanyUserExtraFields = (data: CustomFieldItems) =>\n  B3Request.post('/api/v2/extra-fields/user/validate', RequestType.B2BRest, {\n    ...data,\n    storeHash,\n  });\n","import { UseFormSetError } from 'react-hook-form';\nimport { LangFormatFunction } from '@b3/lang';\nimport format from 'date-fns/format';\n\nimport { validateAddressExtraFields, validateBCCompanyExtraFields } from '@/shared/service/b2b';\nimport { getLineNumber, validatorRules } from '@/utils';\n\nimport { RegisterFields } from './types';\n\nconst inputFormat = 'yyyy-MM-dd';\n\nexport interface QuoteConfig {\n  [key: string]: string;\n}\n\nexport interface ValidateOptions extends Record<string, any> {\n  max?: string | number;\n  min?: string | number;\n}\n\ninterface ValidateOptionItems extends Record<string, any> {\n  max?: number;\n  min?: number;\n}\n\nexport type ContactInformationItems = Array<RegisterFields>;\nexport interface FieldSXConfigs {\n  [key: string]: string | number;\n}\n\ninterface AccountFormFieldsItemsValueConfigs {\n  defaultValue?: string;\n  fieldName?: string;\n  isRequired?: boolean;\n  labelName?: string;\n  maximumLength?: string;\n  maxLength?: string;\n  name?: string;\n  required?: string;\n  type?: string;\n  custom?: boolean;\n  id: string | number;\n}\n\nexport interface AccountFormFieldsItems {\n  fieldId?: string;\n  fieldName?: string;\n  fieldType?: string | number;\n  groupId: number | string;\n  groupName?: string;\n  id?: string;\n  isRequired?: boolean;\n  labelName?: string;\n  visible?: boolean;\n  custom?: boolean;\n  valueConfigs?: AccountFormFieldsItemsValueConfigs;\n  sx?: FieldSXConfigs;\n}\n\ntype AccountFormFieldsList = Array<[]> | Array<AccountFormFieldsItems>;\n\ninterface ReplaceOptionsProps {\n  label: string;\n  value: string;\n}\n\nexport interface RegisterFieldsItems {\n  id?: string | number;\n  name: string;\n  label: string;\n  required: boolean;\n  default: string | number | Array<string>;\n  fieldType: string | number;\n  xs: number;\n  visible: boolean;\n  custom: boolean;\n  bcLabel?: string;\n  fieldId: string;\n  groupId: string | number;\n  groupName: string;\n  options?: any;\n  disabled: boolean;\n  replaceOptions?: ReplaceOptionsProps;\n}\n\nexport const steps = [\n  'register.step.account',\n  'register.step.details',\n  'register.step.finish',\n] as const;\n\nconst companyExtraFieldsType = ['text', 'multiline', 'number', 'dropdown'];\n\nexport const Base64 = {\n  encode(str: string | number | boolean) {\n    return window.btoa(encodeURIComponent(str));\n  },\n  decode(str: string) {\n    return decodeURIComponent(window.atob(str));\n  },\n};\n\nconst fieldsType = {\n  text: ['text', 'number', 'password', 'multiline'],\n  checkbox: ['checkbox'],\n  dropdown: ['dropdown'],\n  radio: ['radio'],\n  date: ['date'],\n};\n\nconst classificationType = (item: CustomFieldItems) => {\n  let optionItems: ValidateOptionItems = {};\n  if (fieldsType.text.includes(item.fieldType)) {\n    optionItems = {\n      minlength: item.minlength || null,\n      maxLength: item.maxLength || Number(item.maximumLength) || null,\n      min: item.min || null,\n      max: item.max || Number(item.maximumValue) || null,\n      rows: item?.options?.rows || item.numberOfRows || null,\n    };\n    if (optionItems?.max) {\n      optionItems.validate = validatorRules(['max'], {\n        max: optionItems?.max,\n      });\n    }\n\n    if (item.fieldType === 'password') {\n      optionItems.validate = validatorRules(['password']);\n    }\n\n    if (item?.fieldName === 'email' || item?.fieldName === 'phone') {\n      optionItems.validate = validatorRules([item.fieldName]);\n    }\n    if (item.fieldType === 'number' || (item.fieldType === 'text' && item.type === 'integer')) {\n      optionItems.validate = validatorRules(['number']);\n    }\n  }\n  if (fieldsType.checkbox.includes(item.fieldType)) {\n    optionItems = {\n      default: item.default || [],\n      options: item.options?.items || null,\n    };\n  }\n  if (fieldsType.dropdown.includes(item.fieldType)) {\n    const items = [];\n    if (item.options?.helperLabel) {\n      items.push({\n        label: item.options.helperLabel,\n        value: '',\n      });\n    }\n    const options = [...items, ...(item.options?.items || [])];\n\n    if (item.listOfValue) {\n      item.listOfValue.forEach((value: any) =>\n        options.push({\n          label: value,\n          value,\n        }),\n      );\n    }\n\n    optionItems = {\n      default: item.default || '',\n      options: options || null,\n    };\n  }\n  if (fieldsType.radio.includes(item.fieldType)) {\n    optionItems = {\n      default: item.default || '',\n      options: item.options?.items || [],\n    };\n  }\n\n  if (optionItems?.options) {\n    optionItems?.options.forEach((option: any) => {\n      const optionValue = option;\n      if (option.value) {\n        optionValue.value = option.label;\n      }\n    });\n  }\n\n  if (item.fieldId === 'field_country') {\n    optionItems.default = item.valueConfigs?.default || optionItems.default;\n  }\n\n  return optionItems;\n};\n\nconst noEncryptFieldList = ['country', 'state', 'email'];\nexport const b2bAddressRequiredFields = [\n  'field_country',\n  'field_address_1',\n  'field_city',\n  'field_state',\n  'field_zip_code',\n];\n\nconst groupItems = {\n  1: 'contactInformation',\n  2: 'additionalInformation',\n  3: 'businessDetails',\n  4: 'address',\n  5: 'password',\n};\n\nexport const deCodeField = (fieldName: string) => {\n  if (noEncryptFieldList.includes(fieldName)) {\n    return fieldName;\n  }\n  return Base64.decode(fieldName);\n};\n\nexport const enCodeFieldName = (fieldName: string) => {\n  if (noEncryptFieldList.includes(fieldName)) {\n    return fieldName;\n  }\n\n  return Base64.encode(fieldName);\n};\n\nconst bcFieldName = (fieldName: string) => {\n  if (fieldName === 'countryCode') {\n    return 'country';\n  }\n  if (fieldName === 'stateOrProvince') {\n    return 'state';\n  }\n  return fieldName;\n};\n\nexport const conversionSingleItem = (item: CustomFieldItems): Partial<RegisterFieldsItems> => {\n  const requiredItems = {\n    id: item.id || item.fieldName,\n    name: bcFieldName(item.name) || enCodeFieldName(item.fieldName),\n    label: item.label || item.labelName,\n    required: item.required || item.isRequired,\n    default: item.default || item.defaultValue || '',\n    fieldType: item.fieldType,\n    xs: 12,\n    visible: item?.visible || false,\n    custom: item?.custom || false,\n    bcLabel: item.label || '',\n    type: item.type || '',\n  };\n\n  const customFieldItem = item;\n\n  if (typeof item.fieldType === 'number') {\n    customFieldItem.fieldType = companyExtraFieldsType[item.fieldType];\n    requiredItems.fieldType = item.fieldType;\n  }\n\n  const optionItems = classificationType(item);\n\n  return {\n    ...requiredItems,\n    ...optionItems,\n  };\n};\n\nexport const toHump = (name: string) => name.replace(/_(\\w)/g, (_, letter) => letter.toUpperCase());\n\nexport const conversionItemFormat = (FormFields: AccountFormFieldsList) => {\n  const getFormFields: any = {};\n\n  FormFields.forEach((item: CustomFieldItems) => {\n    const key: string = (groupItems as CustomFieldItems)[item.groupId];\n\n    if (!getFormFields[key]?.length) {\n      getFormFields[key] = [];\n    }\n\n    let obj: CustomFieldItems = {};\n    if (item.valueConfigs?.id) {\n      obj = conversionSingleItem(item.valueConfigs);\n    } else {\n      obj = conversionSingleItem(item);\n    }\n\n    obj.required = item.isRequired;\n    obj.id = item.id;\n    obj.fieldId = item.fieldId;\n    obj.groupId = item.groupId;\n    obj.groupName = item.groupName;\n    obj.visible = item.visible;\n    obj.label = item.labelName;\n    obj.custom = obj.custom || item?.custom;\n    obj.variant = 'filled';\n\n    if (obj.fieldType === 'date' && !obj.default) {\n      obj.default = format(new Date(), inputFormat);\n    }\n\n    if (obj.name === 'country') {\n      obj.replaceOptions = {\n        label: 'countryName',\n        value: 'countryCode',\n      };\n    }\n\n    if (obj.name === 'state') {\n      obj.replaceOptions = {\n        label: 'stateName',\n        value: 'stateName',\n      };\n    }\n\n    if (item.fieldId === 'field_confirm_password') {\n      obj.name = 'confirmPassword';\n    }\n    if (obj.fieldType === 'files') {\n      obj.filesLimit = 3;\n      obj.maxFileSize = 10485760;\n      obj.default = [];\n    }\n\n    if (obj.fieldType === 'checkbox' && !obj.options) {\n      obj.label = '';\n      obj.options = [\n        {\n          label: item.labelName,\n          value: item.labelName,\n        },\n      ];\n    }\n\n    if (obj.fieldType === 'text' && obj.type === 'integer') {\n      obj.fieldType = 'number';\n    }\n\n    if (obj.label.length > 0) {\n      let originPaddingTop = 25;\n      const isMobile = document.body.clientWidth <= 750;\n      let lineNumber = getLineNumber(obj.label, 16);\n\n      if (obj.fieldType === 'multiline') {\n        originPaddingTop = 0;\n      }\n      if (obj.fieldType === 'dropdown') {\n        originPaddingTop = 0;\n        if (lineNumber > 1) {\n          lineNumber += isMobile ? 1.4 : 2;\n        }\n\n        if (obj.fieldId === 'field_state') {\n          lineNumber -= isMobile ? 0 : 0.8;\n        }\n      }\n\n      const paddingTopVal =\n        lineNumber === 1\n          ? `${originPaddingTop}px`\n          : `${originPaddingTop / 16 + (lineNumber - 1)}rem`;\n      if (lineNumber > 0) {\n        obj.extraPadding = {\n          paddingTop: paddingTopVal,\n        };\n      }\n    }\n\n    getFormFields[key].push(obj);\n  });\n\n  return getFormFields;\n};\n\nexport const getAccountFormFields = (accountFormFields: AccountFormFieldsList) => {\n  if (accountFormFields?.length) {\n    const filterVisibleAccountFormFields: AccountFormFieldsList = accountFormFields\n      ? (accountFormFields as any).filter(\n          (item: Partial<AccountFormFieldsItems>) =>\n            !!item.visible || (!!item.custom && !!item.isRequired),\n        )\n      : [];\n\n    const getAccountFormItems = filterVisibleAccountFormFields\n      ? conversionItemFormat(filterVisibleAccountFormFields)\n      : {};\n\n    return getAccountFormItems;\n  }\n  return {};\n};\n\nexport const companyAttachmentsFields = (b3lang: LangFormatFunction): ContactInformationItems => [\n  {\n    name: 'companyAttachments',\n    label: b3lang('register.label.companyAttachments'),\n    default: [],\n    fieldType: 'file',\n    required: false,\n    xs: 12,\n    filesLimit: 3,\n    maxFileSize: 10485760, // 10M\n  },\n];\nexport interface Country {\n  countryCode: string;\n  countryName: string;\n  id?: string;\n  states: [];\n}\nexport interface State {\n  stateCode?: string;\n  stateName?: string;\n  id?: string;\n}\n\ntype EmailError = {\n  [k: number]: string;\n};\n\nexport const emailError: EmailError = {\n  2: 'register.emailValidate.alreadyExitsBC',\n  3: 'global.emailValidate.multipleCustomer',\n  4: 'global.emailValidate.companyUsed',\n  5: 'global.emailValidate.alreadyExits',\n  6: 'global.emailValidate.usedSuperAdmin',\n};\n\ninterface ValidateExtraFieldsProps {\n  fields: RegisterFields[];\n  data: CustomFieldItems;\n  type: 'company' | 'address';\n  setError: UseFormSetError<CustomFieldItems>;\n}\n\nexport const validateExtraFields = async ({\n  fields,\n  data,\n  type,\n  setError,\n}: ValidateExtraFieldsProps) => {\n  return new Promise((resolve, reject) => {\n    const init = async () => {\n      const customFields = fields.filter((item) => !!item.custom);\n\n      const extraFields = customFields.map((field: RegisterFields) => ({\n        fieldName: Base64.decode(field.name),\n        fieldValue: data[field.name] || field.default,\n      }));\n\n      const fn = type === 'company' ? validateBCCompanyExtraFields : validateAddressExtraFields;\n\n      const result = await fn({\n        extraFields,\n      });\n\n      if (result.code !== 200) {\n        const message = result.data?.errMsg || result.message || '';\n\n        const messageArr = message.split(':');\n\n        if (messageArr.length >= 2) {\n          const field = customFields.find((field) => Base64.decode(field.name) === messageArr[0]);\n          if (field) {\n            setError(field.name, {\n              type: 'manual',\n              message: messageArr[1],\n            });\n          }\n        }\n        reject(message);\n      }\n      resolve(result);\n    };\n\n    init();\n  });\n};\n"],"names":["getTextLenPX","text","fontSize","getLineNumber","screenWidth","isMobile","pcLen","mobileLen","screenLen","len","validateAddressExtraFields","data","B3Request","RequestType","storeHash","validateBCCompanyExtraFields","channelId","validateBCCompanyUserExtraFields","inputFormat","steps","companyExtraFieldsType","Base64","str","fieldsType","classificationType","item","optionItems","_a","validatorRules","_b","items","_c","options","_d","value","_e","option","optionValue","_f","noEncryptFieldList","b2bAddressRequiredFields","groupItems","deCodeField","fieldName","enCodeFieldName","bcFieldName","conversionSingleItem","requiredItems","customFieldItem","toHump","name","_","letter","conversionItemFormat","FormFields","getFormFields","key","obj","format","originPaddingTop","lineNumber","paddingTopVal","getAccountFormFields","accountFormFields","filterVisibleAccountFormFields","companyAttachmentsFields","b3lang","emailError","validateExtraFields","fields","type","setError","resolve","reject","customFields","extraFields","field","result","message","messageArr"],"mappings":"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"}