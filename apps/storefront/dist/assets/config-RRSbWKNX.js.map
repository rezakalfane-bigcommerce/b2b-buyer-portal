{"version":3,"file":"config-RRSbWKNX.js","sources":["../../src/pages/Login/config.ts"],"sourcesContent":["import { LangFormatFunction } from '@b3/lang';\n\nimport { LoginFlagType, LoginTypeConfig } from '@/types/login';\nimport { BigCommerceStorefrontAPIBaseURL, validatorRules } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nexport type LoginConfig = {\n  emailAddress: string;\n  password: string;\n};\n\ninterface ChannelIdProps {\n  channelId: number;\n  urls: Array<string>;\n}\n\nexport const getForgotPasswordFields = (b3Lang: LangFormatFunction) => [\n  {\n    name: 'emailAddress',\n    label: b3Lang('global.loginText.emailAddress'),\n    required: true,\n    default: '',\n    fieldType: 'text',\n    xs: 12,\n    size: 'small',\n    variant: 'filled',\n    validate: validatorRules(['email']),\n  },\n];\n\nexport const getLoginFields = (b3Lang: LangFormatFunction, submitLoginFn: () => void) => [\n  {\n    name: 'emailAddress',\n    label: b3Lang('global.loginText.emailAddress'),\n    required: true,\n    default: '',\n    fieldType: 'text',\n    xs: 12,\n    variant: 'filled',\n    validate: validatorRules(['email']),\n    isAutoComplete: true,\n  },\n  {\n    name: 'password',\n    label: b3Lang('login.loginText.password'),\n    required: true,\n    default: '',\n    fieldType: 'password',\n    xs: 12,\n    variant: 'filled',\n    isEnterTrigger: true,\n    handleEnterClick: submitLoginFn,\n    isAutoComplete: true,\n  },\n];\n\nexport const loginCheckout = (data: LoginConfig) => {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify({\n      email: data.emailAddress,\n      password: data.password,\n    }),\n  };\n\n  return fetch(\n    // cspell:disable\n    `${BigCommerceStorefrontAPIBaseURL}/internalapi/v1/checkout/customer`,\n    requestOptions,\n  ).then((response) => response.json());\n};\n\nexport const sendEmail = (emailAddress: string) => {\n  const urlencoded = new URLSearchParams();\n  urlencoded.append('email', emailAddress);\n\n  const requestOptions: RequestInit = {\n    method: 'POST',\n    body: urlencoded,\n    redirect: 'follow',\n  };\n\n  return fetch(\n    `${BigCommerceStorefrontAPIBaseURL}/login.php?action=send_password_email`,\n    requestOptions,\n  )\n    .then((response) => response.text())\n    .catch((error) => b2bLogger.error('error', error));\n};\n\nexport const getLoginFlag = (search: string, key: string) => {\n  if (!search) {\n    return '';\n  }\n  const searchParams = new URLSearchParams(search);\n\n  return searchParams.get(key);\n};\n\nexport const getBCChannelId = (storeSiteAny: Array<ChannelIdProps>) => {\n  if (storeSiteAny.length === 1) {\n    return storeSiteAny[0].channelId;\n  }\n\n  let channelId = 1;\n\n  const { origin } = window.location;\n\n  storeSiteAny.forEach((item: ChannelIdProps) => {\n    if (item.urls.includes(origin)) {\n      channelId = item.channelId;\n    }\n  });\n\n  return channelId;\n};\n\nexport const logout = () =>\n  new Promise<boolean>((resolve, reject) => {\n    fetch('/login.php?action=logout')\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.text();\n      })\n      .then((responseData) => {\n        const isFlag = responseData.includes('alertBox--success');\n        resolve(isFlag);\n      })\n      .catch((e) => {\n        reject(e);\n      });\n  });\n\nexport const loginType: LoginTypeConfig = {\n  resetPassword: {\n    alertType: 'error',\n    tip: 'login.loginTipInfo.resetPassword',\n  },\n  receivePassword: {\n    alertType: 'success',\n    tip: 'login.loginTipInfo.receivePassword',\n  },\n  loggedOutLogin: {\n    alertType: 'success',\n    tip: 'login.loginTipInfo.loggedOutLogin',\n  },\n  accountIncorrect: {\n    alertType: 'error',\n    tip: 'login.loginTipInfo.accountIncorrect',\n  },\n  accountPrelaunch: {\n    alertType: 'warning',\n    tip: 'login.loginTipInfo.accountPrelaunch',\n  },\n  deviceCrowdingLogIn: {\n    alertType: 'success',\n    tip: 'login.loginText.deviceCrowdingLogIn',\n  },\n  invoiceErrorTip: {\n    alertType: 'error',\n    tip: 'login.loginText.invoiceErrorTip',\n  },\n};\n\nexport const isLoginFlagType = (value?: unknown): value is LoginFlagType => {\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  return Object.keys(loginType).includes(value);\n};\n\nexport const parseLoginFlagType = (value: unknown): LoginFlagType | undefined =>\n  isLoginFlagType(value) ? value : undefined;\n"],"names":["getForgotPasswordFields","b3Lang","validatorRules","getLoginFields","submitLoginFn","loginCheckout","data","requestOptions","BigCommerceStorefrontAPIBaseURL","response","sendEmail","emailAddress","urlencoded","error","b2bLogger","loginType","isLoginFlagType","value"],"mappings":"8MAgBa,MAAAA,EAA2BC,GAA+B,CACrE,CACE,KAAM,eACN,MAAOA,EAAO,+BAA+B,EAC7C,SAAU,GACV,QAAS,GACT,UAAW,OACX,GAAI,GACJ,KAAM,QACN,QAAS,SACT,SAAUC,EAAe,CAAC,OAAO,CAAC,CAAA,CAEtC,EAEaC,EAAiB,CAACF,EAA4BG,IAA8B,CACvF,CACE,KAAM,eACN,MAAOH,EAAO,+BAA+B,EAC7C,SAAU,GACV,QAAS,GACT,UAAW,OACX,GAAI,GACJ,QAAS,SACT,SAAUC,EAAe,CAAC,OAAO,CAAC,EAClC,eAAgB,EAClB,EACA,CACE,KAAM,WACN,MAAOD,EAAO,0BAA0B,EACxC,SAAU,GACV,QAAS,GACT,UAAW,WACX,GAAI,GACJ,QAAS,SACT,eAAgB,GAChB,iBAAkBG,EAClB,eAAgB,EAAA,CAEpB,EAEaC,EAAiBC,GAAsB,CAClD,MAAMC,EAAiB,CACrB,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,UAAU,CACnB,MAAOD,EAAK,aACZ,SAAUA,EAAK,QAChB,CAAA,CACH,EAEO,OAAA,MAEL,GAAG,OAAAE,EAA+B,qCAClCD,GACA,KAAME,GAAaA,EAAS,MAAM,CACtC,EAEaC,EAAaC,GAAyB,CAC3C,MAAAC,EAAa,IAAI,gBACZA,EAAA,OAAO,QAASD,CAAY,EAEvC,MAAMJ,EAA8B,CAClC,OAAQ,OACR,KAAMK,EACN,SAAU,QACZ,EAEO,OAAA,MACL,GAAG,OAAAJ,EAA+B,yCAClCD,CAEC,EAAA,KAAME,GAAaA,EAAS,KAAK,CAAC,EAClC,MAAOI,GAAUC,EAAU,MAAM,QAASD,CAAK,CAAC,CACrD,EA+CaE,EAA6B,CACxC,cAAe,CACb,UAAW,QACX,IAAK,kCACP,EACA,gBAAiB,CACf,UAAW,UACX,IAAK,oCACP,EACA,eAAgB,CACd,UAAW,UACX,IAAK,mCACP,EACA,iBAAkB,CAChB,UAAW,QACX,IAAK,qCACP,EACA,iBAAkB,CAChB,UAAW,UACX,IAAK,qCACP,EACA,oBAAqB,CACnB,UAAW,UACX,IAAK,qCACP,EACA,gBAAiB,CACf,UAAW,QACX,IAAK,iCAAA,CAET,EAEaC,EAAmBC,GAC1B,OAAOA,GAAU,SACZ,GAGF,OAAO,KAAKF,CAAS,EAAE,SAASE,CAAK"}