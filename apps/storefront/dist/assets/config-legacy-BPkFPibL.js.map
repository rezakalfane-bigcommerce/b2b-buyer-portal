{"version":3,"file":"config-legacy-BPkFPibL.js","sources":["../../src/pages/Login/config.ts"],"sourcesContent":["import { LangFormatFunction } from '@b3/lang';\n\nimport { LoginFlagType, LoginTypeConfig } from '@/types/login';\nimport { BigCommerceStorefrontAPIBaseURL, validatorRules } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nexport type LoginConfig = {\n  emailAddress: string;\n  password: string;\n};\n\ninterface ChannelIdProps {\n  channelId: number;\n  urls: Array<string>;\n}\n\nexport const getForgotPasswordFields = (b3Lang: LangFormatFunction) => [\n  {\n    name: 'emailAddress',\n    label: b3Lang('global.loginText.emailAddress'),\n    required: true,\n    default: '',\n    fieldType: 'text',\n    xs: 12,\n    size: 'small',\n    variant: 'filled',\n    validate: validatorRules(['email']),\n  },\n];\n\nexport const getLoginFields = (b3Lang: LangFormatFunction, submitLoginFn: () => void) => [\n  {\n    name: 'emailAddress',\n    label: b3Lang('global.loginText.emailAddress'),\n    required: true,\n    default: '',\n    fieldType: 'text',\n    xs: 12,\n    variant: 'filled',\n    validate: validatorRules(['email']),\n    isAutoComplete: true,\n  },\n  {\n    name: 'password',\n    label: b3Lang('login.loginText.password'),\n    required: true,\n    default: '',\n    fieldType: 'password',\n    xs: 12,\n    variant: 'filled',\n    isEnterTrigger: true,\n    handleEnterClick: submitLoginFn,\n    isAutoComplete: true,\n  },\n];\n\nexport const loginCheckout = (data: LoginConfig) => {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify({\n      email: data.emailAddress,\n      password: data.password,\n    }),\n  };\n\n  return fetch(\n    // cspell:disable\n    `${BigCommerceStorefrontAPIBaseURL}/internalapi/v1/checkout/customer`,\n    requestOptions,\n  ).then((response) => response.json());\n};\n\nexport const sendEmail = (emailAddress: string) => {\n  const urlencoded = new URLSearchParams();\n  urlencoded.append('email', emailAddress);\n\n  const requestOptions: RequestInit = {\n    method: 'POST',\n    body: urlencoded,\n    redirect: 'follow',\n  };\n\n  return fetch(\n    `${BigCommerceStorefrontAPIBaseURL}/login.php?action=send_password_email`,\n    requestOptions,\n  )\n    .then((response) => response.text())\n    .catch((error) => b2bLogger.error('error', error));\n};\n\nexport const getLoginFlag = (search: string, key: string) => {\n  if (!search) {\n    return '';\n  }\n  const searchParams = new URLSearchParams(search);\n\n  return searchParams.get(key);\n};\n\nexport const getBCChannelId = (storeSiteAny: Array<ChannelIdProps>) => {\n  if (storeSiteAny.length === 1) {\n    return storeSiteAny[0].channelId;\n  }\n\n  let channelId = 1;\n\n  const { origin } = window.location;\n\n  storeSiteAny.forEach((item: ChannelIdProps) => {\n    if (item.urls.includes(origin)) {\n      channelId = item.channelId;\n    }\n  });\n\n  return channelId;\n};\n\nexport const logout = () =>\n  new Promise<boolean>((resolve, reject) => {\n    fetch('/login.php?action=logout')\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.text();\n      })\n      .then((responseData) => {\n        const isFlag = responseData.includes('alertBox--success');\n        resolve(isFlag);\n      })\n      .catch((e) => {\n        reject(e);\n      });\n  });\n\nexport const loginType: LoginTypeConfig = {\n  resetPassword: {\n    alertType: 'error',\n    tip: 'login.loginTipInfo.resetPassword',\n  },\n  receivePassword: {\n    alertType: 'success',\n    tip: 'login.loginTipInfo.receivePassword',\n  },\n  loggedOutLogin: {\n    alertType: 'success',\n    tip: 'login.loginTipInfo.loggedOutLogin',\n  },\n  accountIncorrect: {\n    alertType: 'error',\n    tip: 'login.loginTipInfo.accountIncorrect',\n  },\n  accountPrelaunch: {\n    alertType: 'warning',\n    tip: 'login.loginTipInfo.accountPrelaunch',\n  },\n  deviceCrowdingLogIn: {\n    alertType: 'success',\n    tip: 'login.loginText.deviceCrowdingLogIn',\n  },\n  invoiceErrorTip: {\n    alertType: 'error',\n    tip: 'login.loginText.invoiceErrorTip',\n  },\n};\n\nexport const isLoginFlagType = (value?: unknown): value is LoginFlagType => {\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  return Object.keys(loginType).includes(value);\n};\n\nexport const parseLoginFlagType = (value: unknown): LoginFlagType | undefined =>\n  isLoginFlagType(value) ? value : undefined;\n"],"names":["exports","b3Lang","name","label","required","default","fieldType","xs","size","variant","validate","validatorRules","submitLoginFn","isAutoComplete","isEnterTrigger","handleEnterClick","data","requestOptions","method","headers","body","JSON","stringify","email","emailAddress","password","fetch","BigCommerceStorefrontAPIBaseURL","then","response","json","urlencoded","URLSearchParams","append","redirect","text","catch","error","b2bLogger","loginType","resetPassword","alertType","tip","receivePassword","loggedOutLogin","accountIncorrect","accountPrelaunch","deviceCrowdingLogIn","invoiceErrorTip","value","Object","keys","includes"],"mappings":"sTAgBaA,EAAA,KAA2BC,GAA+B,CACrE,CACEC,KAAM,eACNC,MAAOF,EAAO,iCACdG,UAAU,EACVC,QAAS,GACTC,UAAW,OACXC,GAAI,GACJC,KAAM,QACNC,QAAS,SACTC,SAAUC,EAAe,CAAC,cAIAX,EAAA,KAAA,CAACC,EAA4BW,IAA8B,CACvF,CACEV,KAAM,eACNC,MAAOF,EAAO,iCACdG,UAAU,EACVC,QAAS,GACTC,UAAW,OACXC,GAAI,GACJE,QAAS,SACTC,SAAUC,EAAe,CAAC,UAC1BE,gBAAgB,GAElB,CACEX,KAAM,WACNC,MAAOF,EAAO,4BACdG,UAAU,EACVC,QAAS,GACTC,UAAW,WACXC,GAAI,GACJE,QAAS,SACTK,gBAAgB,EAChBC,iBAAkBH,EAClBC,gBAAgB,MAIPb,EAAA,KAAiBgB,IAC5B,MAAMC,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,MAAOP,EAAKQ,aACZC,SAAUT,EAAKS,YAIZ,OAAAC,MAEL,GAAGC,qCACHV,GACAW,MAAMC,GAAaA,EAASC,QAAM,IAGzB9B,EAAA,KAAawB,IAClB,MAAAO,EAAa,IAAIC,gBAShB,OARID,EAAAE,OAAO,QAAST,GAQpBE,MACL,GAAGC,yCAP+B,CAClCT,OAAQ,OACRE,KAAMW,EACNG,SAAU,WAOTN,MAAMC,GAAaA,EAASM,SAC5BC,OAAOC,GAAUC,EAAUD,MAAM,QAASA,IAAM,IA1ExC,MA0HAE,EAA6BvC,EAAA,IAAA,CACxCwC,cAAe,CACbC,UAAW,QACXC,IAAK,oCAEPC,gBAAiB,CACfF,UAAW,UACXC,IAAK,sCAEPE,eAAgB,CACdH,UAAW,UACXC,IAAK,qCAEPG,iBAAkB,CAChBJ,UAAW,QACXC,IAAK,uCAEPI,iBAAkB,CAChBL,UAAW,UACXC,IAAK,uCAEPK,oBAAqB,CACnBN,UAAW,UACXC,IAAK,uCAEPM,gBAAiB,CACfP,UAAW,QACXC,IAAK,qCAII1C,EAAA,KAAmBiD,GACT,iBAAVA,GAIJC,OAAOC,KAAKZ,GAAWa,SAASH"}