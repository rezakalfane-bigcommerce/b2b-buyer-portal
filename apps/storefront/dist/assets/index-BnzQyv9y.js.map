{"version":3,"file":"index-BnzQyv9y.js","sources":["../../src/pages/Address/components/AddressForm.tsx","../../src/pages/Address/components/AddressItemCard.tsx","../../src/pages/Address/components/DeleteAddressDialog.tsx","../../src/pages/Address/components/SetDefaultDialog.tsx","../../src/pages/Address/shared/getAddressFields.ts","../../src/pages/Address/index.tsx"],"sourcesContent":["import { forwardRef, Ref, useCallback, useEffect, useImperativeHandle, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useB3Lang } from '@b3/lang';\nimport { Checkbox, FormControlLabel, styled } from '@mui/material';\nimport cloneDeep from 'lodash-es/cloneDeep';\n\nimport { B3CustomForm } from '@/components';\nimport B3Dialog from '@/components/B3Dialog';\nimport {\n  createB2BAddress,\n  createBcAddress,\n  updateB2BAddress,\n  updateBcAddress,\n  validateAddressExtraFields,\n} from '@/shared/service/b2b';\nimport { snackbar } from '@/utils';\n\nimport { AddressItemType } from '../../../types/address';\nimport { deCodeField } from '../../Registered/config';\nimport { b2bShippingBilling, B2bShippingBillingProps } from '../shared/config';\nimport { CountryProps, StateProps } from '../shared/getAddressFields';\n\ninterface AddressFormProps {\n  addressFields: CustomFieldItems[];\n  updateAddressList: (isFirst?: boolean) => void;\n  companyId: string | number;\n  isBCPermission: boolean;\n  countries: CountryProps[];\n}\n\ninterface ShippingBillingProps {\n  isShipping: boolean;\n  isBilling: boolean;\n  isDefaultShipping: boolean;\n  isDefaultBilling: boolean;\n  [key: string]: boolean;\n}\n\nconst StyledCheckbox = styled('div')(() => ({\n  display: 'flex',\n\n  '& div::first-of-type': {\n    marginRight: '2rem',\n  },\n\n  '& div': {\n    minWidth: '45%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n}));\n\nfunction AddressForm(\n  { addressFields, updateAddressList, companyId, isBCPermission, countries }: AddressFormProps,\n  ref: Ref<unknown> | undefined,\n) {\n  const b3Lang = useB3Lang();\n  const [open, setOpen] = useState<boolean>(false);\n  const [type, setType] = useState<string>('');\n  const [isInitialized, setIsInitialized] = useState<boolean>(false);\n  const [addUpdateLoading, setAddUpdateLoading] = useState<boolean>(false);\n  const [allAddressFields, setAllAddressFields] = useState<CustomFieldItems[]>(addressFields);\n  const [addressExtraFields, setAddressExtraFields] = useState<CustomFieldItems>([]);\n  const [originAddressFields, setOriginAddressFields] = useState<CustomFieldItems>([]);\n  const [addressData, setAddressData] = useState<AddressItemType | null>(null);\n  const [shippingBilling, setShippingBilling] = useState<ShippingBillingProps>({\n    isShipping: false,\n    isBilling: false,\n    isDefaultShipping: false,\n    isDefaultBilling: false,\n  });\n\n  const isB2BUser = !isBCPermission;\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    watch,\n    setError,\n    setValue,\n    reset,\n  } = useForm({\n    mode: 'all',\n  });\n\n  const validateCompanyExtraFieldsUnique = async (data: CustomFieldItems) => {\n    try {\n      const extraFields = addressExtraFields.map((field: CustomFieldItems) => ({\n        fieldName: deCodeField(field.name),\n        fieldValue: data[field.name] || field.default,\n      }));\n\n      const res = await validateAddressExtraFields({\n        extraFields,\n      });\n\n      if (res.code !== 200) {\n        const message = res.data?.errMsg || res.message || '';\n\n        const messageArr = message.split(':');\n\n        if (messageArr.length >= 2) {\n          const field = addressExtraFields.find(\n            (field: CustomFieldItems) => deCodeField(field.name) === messageArr[0],\n          );\n          if (field) {\n            setError(field.name, {\n              type: 'manual',\n              message: messageArr[1],\n            });\n            setAddUpdateLoading(false);\n            return false;\n          }\n        }\n        throw message;\n      }\n\n      return true;\n    } catch (error: any) {\n      snackbar.error(error);\n      throw error;\n    }\n  };\n\n  const handleCancelClick = () => {\n    reset();\n    setShippingBilling({\n      isShipping: false,\n      isBilling: false,\n      isDefaultShipping: false,\n      isDefaultBilling: false,\n    });\n    setOpen(false);\n    setType('');\n  };\n\n  const handleSaveB2BAddress = () => {\n    handleSubmit(async (data) => {\n      setAddUpdateLoading(true);\n\n      try {\n        const isValidate = await validateCompanyExtraFieldsUnique(data);\n        if (!isValidate) {\n          return;\n        }\n\n        const extraFields = addressExtraFields.map((field: CustomFieldItems) => ({\n          fieldName: deCodeField(field.name),\n          fieldValue: data[field.name] || field.default,\n        }));\n        const { country: currentCountryCode, state: stateCode } = data;\n\n        let currentCountryName = '';\n        let currentStateName = '';\n        let currentStateCode = stateCode;\n\n        countries.forEach((country: CountryProps) => {\n          const { countryName, countryCode, states } = country;\n          if (countryCode === currentCountryCode) {\n            currentCountryName = countryName;\n\n            if (states.length > 0) {\n              const state = states.find(\n                (item: StateProps) =>\n                  item.stateCode === currentStateCode || item.stateName === currentStateCode,\n              );\n\n              currentStateName = state?.stateName || currentStateName;\n              currentStateCode = state?.stateCode || currentStateCode;\n            } else {\n              currentStateCode = '';\n              currentStateName = stateCode;\n            }\n          }\n        });\n\n        const params = {\n          ...data,\n          companyId: Number(companyId),\n          extraFields,\n          isShipping: shippingBilling.isShipping ? 1 : 0,\n          isBilling: shippingBilling.isBilling ? 1 : 0,\n          isDefaultShipping: shippingBilling.isDefaultShipping ? 1 : 0,\n          isDefaultBilling: shippingBilling.isDefaultBilling ? 1 : 0,\n          country: currentCountryName,\n          countryCode: currentCountryCode,\n          state: currentStateName,\n          stateCode: currentStateCode,\n        };\n\n        if (type === 'add') {\n          await createB2BAddress(params);\n          snackbar.success(b3Lang('addresses.addressForm.newAddressAdded'));\n        } else if (type === 'edit' && addressData) {\n          const { id } = addressData;\n\n          await updateB2BAddress({\n            ...params,\n            id: Number(id),\n          });\n\n          snackbar.success(b3Lang('addresses.addressForm.addressUpdated'));\n        }\n        setShippingBilling({\n          isShipping: false,\n          isBilling: false,\n          isDefaultShipping: false,\n          isDefaultBilling: false,\n        });\n        setOpen(false);\n\n        await updateAddressList(true);\n      } catch (err: any) {\n        snackbar.error(err);\n      } finally {\n        setAddUpdateLoading(false);\n      }\n    })();\n  };\n\n  const handleSaveBcAddress = () => {\n    handleSubmit(async (data) => {\n      setAddUpdateLoading(true);\n\n      try {\n        const extraFields = addressExtraFields.map((field: CustomFieldItems) => ({\n          name: field.bcLabel,\n          value: data[field.name] || field.default,\n        }));\n\n        const { country: currentCountryCode, state: stateCode } = data;\n\n        let currentCountryName = '';\n        let currentStateName = '';\n        let currentStateCode = stateCode;\n\n        countries.forEach((country: CountryProps) => {\n          const { countryName, countryCode, states } = country;\n          if (countryCode === currentCountryCode) {\n            currentCountryName = countryName;\n\n            if (states.length > 0) {\n              const state = states.find(\n                (item: StateProps) =>\n                  item.stateCode === currentStateCode || item.stateName === currentStateCode,\n              );\n\n              currentStateName = state?.stateName || currentStateName;\n              currentStateCode = state?.stateCode || currentStateCode;\n            } else {\n              currentStateCode = '';\n              currentStateName = stateCode;\n            }\n          }\n        });\n\n        const params = {\n          ...data,\n          formFields: extraFields,\n          country: currentCountryName,\n          countryCode: currentCountryCode,\n          state: currentStateName,\n          stateCode: currentStateCode,\n          addressType: '',\n        };\n\n        if (type === 'add') {\n          await createBcAddress(params);\n          snackbar.success(b3Lang('addresses.addressForm.newAddressAdded'));\n        } else if (type === 'edit' && addressData) {\n          const { bcAddressId } = addressData;\n\n          if (bcAddressId) {\n            await updateBcAddress({\n              ...params,\n              id: Number(bcAddressId),\n            });\n          }\n          snackbar.success(b3Lang('addresses.addressForm.addressUpdated'));\n        }\n        setOpen(false);\n\n        await updateAddressList(true);\n      } catch (err: any) {\n        snackbar.error(err);\n      } finally {\n        setAddUpdateLoading(false);\n      }\n    })();\n  };\n\n  const handleSaveAddress = () => {\n    if (isB2BUser) {\n      handleSaveB2BAddress();\n    } else {\n      handleSaveBcAddress();\n    }\n  };\n\n  const handleOpenAddEditAddressClick = (type: string, data: AddressItemType) => {\n    if (type === 'add' && originAddressFields.length > 0) {\n      allAddressFields.forEach((field: CustomFieldItems) => {\n        const addressField = field;\n        if (field.custom) {\n          if (isB2BUser) {\n            const originFields = originAddressFields.filter(\n              (item: CustomFieldItems) => item.name === field.name,\n            )[0];\n            addressField.default = originFields.default || '';\n          } else {\n            const originFields = originAddressFields.filter(\n              (item: CustomFieldItems) =>\n                item.name === field.name || item.bcLabel === field.bcLabel,\n            )[0];\n            addressField.default = originFields.default || '';\n          }\n        }\n      });\n    }\n\n    reset();\n    setAddressData(data);\n    setType(type);\n    setOpen(true);\n    setIsInitialized(false);\n  };\n\n  useImperativeHandle(ref, () => ({\n    handleOpenAddEditAddressClick,\n  }));\n\n  const handleChangeAddressType = (check: boolean, name: string) => {\n    if (name === 'isShipping') {\n      setShippingBilling({\n        ...shippingBilling,\n        [name]: check,\n        isDefaultShipping: false,\n      });\n    } else {\n      setShippingBilling({\n        ...shippingBilling,\n        [name]: check,\n        isDefaultBilling: false,\n      });\n    }\n  };\n\n  useEffect(() => {\n    const translatedAddressFields = JSON.parse(JSON.stringify(addressFields));\n\n    translatedAddressFields.forEach(\n      (element: { label: string; idLang: string; fieldId: string; default: string }) => {\n        const translatedFieldElement = element;\n        translatedFieldElement.label = b3Lang(element.idLang) || element.label;\n\n        if (!isB2BUser && element.fieldId === 'field_21') {\n          translatedFieldElement.default = '';\n        }\n\n        return element;\n      },\n    );\n\n    setAllAddressFields(translatedAddressFields);\n    const extraFields = addressFields.filter((field: CustomFieldItems) => field.custom);\n\n    setAddressExtraFields(extraFields);\n\n    if (originAddressFields.length === 0) {\n      const fields = cloneDeep(addressFields);\n      setOriginAddressFields(fields);\n    }\n    // disabling due to errors withing b3Lang\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addressFields, originAddressFields.length, isB2BUser]);\n\n  const handleBackFillData = useCallback(() => {\n    if (addressData) {\n      const {\n        isShipping,\n        isBilling,\n        isDefaultShipping,\n        isDefaultBilling,\n        state,\n        stateCode,\n        countryCode,\n        extraFields,\n      } = addressData;\n\n      const currentCountry = countries.filter(\n        (country: CountryProps) => country.countryCode === countryCode,\n      );\n\n      setShippingBilling({\n        isShipping: isShipping === 1,\n        isBilling: isBilling === 1,\n        isDefaultShipping: isDefaultShipping === 1,\n        isDefaultBilling: isDefaultBilling === 1,\n      });\n\n      allAddressFields.forEach((currentField: CustomFieldItems) => {\n        const field = currentField;\n        if (field.custom && extraFields.length > 0) {\n          if (isB2BUser) {\n            const name = deCodeField(field.name);\n            const currentExtraField = extraFields.find(\n              (item: CustomFieldItems) => item.fieldName === name,\n            );\n\n            const originFields = originAddressFields.find(\n              (item: CustomFieldItems) => item.name === name,\n            );\n\n            if (currentExtraField) {\n              setValue(field.name, currentExtraField.fieldValue || '');\n\n              field.default = currentExtraField.fieldValue || '';\n            } else {\n              setValue(field.name, '');\n              field.default = originFields.default;\n            }\n          } else {\n            const currentExtraField = extraFields.find(\n              (item: CustomFieldItems) =>\n                item.fieldName === field.name || item.fieldName === field.bcLabel,\n            );\n\n            const originFields = originAddressFields.filter(\n              (item: CustomFieldItems) =>\n                item.name === field.name || item.bcLabel === field.bcLabel,\n            )[0];\n\n            if (currentExtraField) {\n              setValue(field.name, currentExtraField.fieldValue || '');\n\n              field.default = currentExtraField.fieldValue || originFields.default;\n            } else {\n              setValue(field.name, '');\n              field.default = originFields.default;\n            }\n          }\n        } else if (field.name === 'country') {\n          setValue(field.name, countryCode);\n        } else if (field.name === 'state') {\n          setValue(field.name, stateCode || state);\n          if (currentCountry[0]) {\n            const { states } = currentCountry[0];\n\n            if (states.length > 0) {\n              field.options = states;\n              field.fieldType = 'dropdown';\n              field.required = true;\n            } else {\n              field.options = [];\n              field.fieldType = 'text';\n              field.required = false;\n            }\n          }\n        } else {\n          setValue(\n            field.name,\n            addressData[field.name] === 'undefined' ? '' : addressData[field.name],\n          );\n        }\n      });\n    }\n  }, [addressData, countries, isB2BUser, originAddressFields, setValue, allAddressFields]);\n\n  useEffect(() => {\n    if (open && type === 'edit' && addressData && !isInitialized) {\n      handleBackFillData();\n      setIsInitialized(true);\n    }\n  }, [open, type, addressData, isInitialized, handleBackFillData]);\n\n  useEffect(() => {\n    const handleCountryChange = (countryCode: string) => {\n      const stateList =\n        countries.find((country: CountryProps) => country.countryCode === countryCode)?.states ||\n        [];\n      const stateFields = allAddressFields.find(\n        (formFields: CustomFieldItems) => formFields.name === 'state',\n      );\n\n      if (stateFields) {\n        if (stateList.length > 0) {\n          stateFields.fieldType = 'dropdown';\n          stateFields.options = stateList;\n          stateFields.required = true;\n        } else {\n          stateFields.fieldType = 'text';\n          stateFields.options = [];\n          stateFields.required = false;\n        }\n      }\n\n      setValue('state', '');\n\n      setAllAddressFields([...allAddressFields]);\n    };\n\n    const subscription = watch((value, { name, type }) => {\n      const { country } = value;\n\n      if (name === 'country' && type === 'change') {\n        handleCountryChange(country);\n      }\n    });\n    return () => subscription.unsubscribe();\n    // disabling the next eslint rule\n    // setValue -> not needed as is a dispatcher\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allAddressFields, countries, watch]);\n\n  return (\n    <B3Dialog\n      isOpen={open}\n      title={\n        type === 'add'\n          ? b3Lang('addresses.addressForm.addNewAddress')\n          : b3Lang('addresses.addressForm.editAddress')\n      }\n      leftSizeBtn={b3Lang('addresses.addressForm.cancel')}\n      rightSizeBtn={b3Lang('addresses.addressForm.saveAddress')}\n      handleLeftClick={handleCancelClick}\n      handRightClick={handleSaveAddress}\n      loading={addUpdateLoading}\n      isShowBordered\n    >\n      {isB2BUser && (\n        <>\n          <p>{b3Lang('addresses.addressForm.selectAddressType')}</p>\n\n          <StyledCheckbox>\n            {b2bShippingBilling.map((item: B2bShippingBillingProps) => {\n              const { child, name, idLang } = item;\n\n              return (\n                <div key={name}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={shippingBilling[name]}\n                        onChange={(e) => {\n                          handleChangeAddressType(e.target.checked, name);\n                        }}\n                      />\n                    }\n                    label={b3Lang(idLang)}\n                  />\n                  {child && (\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={shippingBilling[child.name]}\n                          onChange={() => {\n                            setShippingBilling({\n                              ...shippingBilling,\n                              [child.name]: !shippingBilling[child.name],\n                            });\n                          }}\n                        />\n                      }\n                      label={b3Lang(child.idLang)}\n                      sx={{\n                        display: shippingBilling[name] ? '' : 'none',\n                      }}\n                    />\n                  )}\n                </div>\n              );\n            })}\n          </StyledCheckbox>\n        </>\n      )}\n      <B3CustomForm\n        formFields={allAddressFields}\n        errors={errors}\n        control={control}\n        getValues={getValues}\n        setValue={setValue}\n      />\n    </B3Dialog>\n  );\n}\n\nconst B3AddressForm = forwardRef(AddressForm);\n\nexport default B3AddressForm;\n","import { useB3Lang } from '@b3/lang';\nimport styled from '@emotion/styled';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { Theme, useTheme } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\n\nimport { B3Tag } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\n\nimport { AddressItemType } from '../../../types/address';\n\nexport interface OrderItemCardProps {\n  item: AddressItemType;\n  onEdit: (data: AddressItemType) => void;\n  onDelete: (data: AddressItemType) => void;\n  onSetDefault: (data: AddressItemType) => void;\n  editPermission: boolean;\n  isBCPermission: boolean;\n  updateActionsPermission: boolean;\n  deleteActionsPermission: boolean;\n}\n\ninterface TagBoxProps {\n  marginBottom: number | string;\n}\n\nconst TagBox = styled('div')(({ marginBottom }: TagBoxProps) => ({\n  marginBottom,\n  '& > span:not(:last-child)': {\n    marginRight: '4px',\n  },\n}));\n\ninterface FlexProps {\n  theme?: Theme;\n}\n\nconst Flex = styled('div')(({ theme }: FlexProps) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  marginTop: theme!.spacing(3),\n}));\n\nexport function AddressItemCard(props: OrderItemCardProps) {\n  const {\n    item: addressInfo,\n    onEdit,\n    onDelete,\n    onSetDefault,\n    editPermission: hasPermission,\n    updateActionsPermission = false,\n    deleteActionsPermission = false,\n    isBCPermission,\n  } = props;\n\n  const theme = useTheme();\n  const b3Lang = useB3Lang();\n\n  return (\n    <Card key={addressInfo.id}>\n      <CardContent\n        sx={{\n          color: '#313440',\n          wordBreak: 'break-word',\n        }}\n      >\n        {addressInfo.label && (\n          <Typography\n            variant=\"h5\"\n            sx={{\n              marginBottom:\n                addressInfo.isDefaultShipping === 1 || addressInfo.isDefaultBilling === 1\n                  ? theme.spacing(1)\n                  : theme.spacing(3),\n              color: 'rgba(0, 0, 0, 0.87)',\n            }}\n          >\n            {addressInfo.label}\n          </Typography>\n        )}\n\n        <TagBox\n          marginBottom={\n            addressInfo.isDefaultShipping === 1 || addressInfo.isDefaultBilling === 1\n              ? theme.spacing(3)\n              : 0\n          }\n        >\n          {addressInfo.isDefaultShipping === 1 && (\n            <B3Tag color=\"#C4DD6C\" textColor=\"rgba(0, 0, 0, 0.87)\">\n              {b3Lang('addresses.addressItemCard.defaultShipping')}\n            </B3Tag>\n          )}\n          {addressInfo.isDefaultBilling === 1 && (\n            <B3Tag color=\"#C4DD6C\" textColor=\"rgba(0, 0, 0, 0.87)\">\n              {b3Lang('addresses.addressItemCard.defaultBilling')}\n            </B3Tag>\n          )}\n        </TagBox>\n\n        <Typography variant=\"body1\">{`${addressInfo.firstName} ${addressInfo.lastName}`}</Typography>\n        <Typography variant=\"body1\">{addressInfo.company || ''}</Typography>\n        <Typography variant=\"body1\">{addressInfo.addressLine1}</Typography>\n        <Typography variant=\"body1\">\n          {addressInfo.addressLine2 === 'undefined' ? '' : addressInfo.addressLine2}\n        </Typography>\n        <Typography variant=\"body1\">{`${addressInfo.city}, ${addressInfo.state} ${addressInfo.zipCode}, ${addressInfo.country}`}</Typography>\n        <Typography variant=\"body1\">{addressInfo.phoneNumber}</Typography>\n\n        {hasPermission && (\n          <Flex>\n            {!isBCPermission && updateActionsPermission && (\n              <CustomButton\n                variant=\"text\"\n                sx={{\n                  ml: '-8px',\n                }}\n                onClick={() => {\n                  onSetDefault(addressInfo);\n                }}\n              >\n                {b3Lang('addresses.addressItemCard.setAsDefault')}\n              </CustomButton>\n            )}\n            <Box\n              sx={{\n                flex: 1,\n                display: 'flex',\n                justifyContent: 'flex-end',\n              }}\n            >\n              {(updateActionsPermission || isBCPermission) && (\n                <IconButton\n                  aria-label=\"edit\"\n                  size=\"small\"\n                  sx={{\n                    marginRight: '8px',\n                  }}\n                  onClick={() => {\n                    onEdit(addressInfo);\n                  }}\n                >\n                  <EditIcon fontSize=\"inherit\" />\n                </IconButton>\n              )}\n\n              {(deleteActionsPermission || isBCPermission) && (\n                <IconButton\n                  aria-label=\"delete\"\n                  size=\"small\"\n                  onClick={() => {\n                    onDelete(addressInfo);\n                  }}\n                >\n                  <DeleteIcon fontSize=\"inherit\" />\n                </IconButton>\n              )}\n            </Box>\n          </Flex>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","import { Dispatch, SetStateAction } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\nimport { useMobile } from '@/hooks';\nimport { deleteB2BAddress, deleteBCCustomerAddress } from '@/shared/service/b2b';\nimport { snackbar } from '@/utils';\n\nimport { AddressItemType } from '../../../types/address';\n\ninterface DeleteAddressDialogProps {\n  isOpen: boolean;\n  setIsOpen: Dispatch<SetStateAction<boolean>>;\n  setIsLoading: Dispatch<SetStateAction<boolean>>;\n  addressData?: AddressItemType;\n  updateAddressList: (isFirst?: boolean) => void;\n  companyId: string | number;\n  isBCPermission: boolean;\n}\n\nexport default function DeleteAddressDialog(props: DeleteAddressDialogProps) {\n  const {\n    isOpen,\n    setIsOpen,\n    addressData,\n    updateAddressList,\n    setIsLoading,\n    companyId,\n    isBCPermission,\n  } = props;\n\n  const [isMobile] = useMobile();\n  const b3Lang = useB3Lang();\n\n  const handleDelete = async () => {\n    if (!addressData) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setIsOpen(false);\n\n      const { id = '', bcAddressId = '' } = addressData;\n\n      if (!isBCPermission) {\n        await deleteB2BAddress({\n          addressId: id,\n          companyId,\n        });\n      } else {\n        await deleteBCCustomerAddress({\n          bcAddressId,\n        });\n      }\n\n      snackbar.success(b3Lang('addresses.deleteAddressDialog.successfullyDeleted'));\n\n      updateAddressList();\n    } catch (e) {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <B3Dialog\n      isOpen={isOpen}\n      title={b3Lang('addresses.deleteAddressDialog.deleteAddress')}\n      leftSizeBtn={b3Lang('addresses.deleteAddressDialog.cancel')}\n      rightSizeBtn={b3Lang('addresses.deleteAddressDialog.delete')}\n      handleLeftClick={() => {\n        setIsOpen(false);\n      }}\n      handRightClick={handleDelete}\n      rightStyleBtn={{\n        color: '#D32F2F',\n      }}\n      isShowBordered={false}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: isMobile ? 'start' : 'center',\n          justifyContent: isMobile ? 'center' : 'start',\n          width: isMobile ? '100%' : '450px',\n          height: '100%',\n        }}\n      >\n        {b3Lang('addresses.deleteAddressDialog.confirmDelete')}\n      </Box>\n    </B3Dialog>\n  );\n}\n","import { ChangeEvent, Dispatch, SetStateAction, useEffect, useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, Checkbox, FormControlLabel, FormGroup } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\nimport { useMobile } from '@/hooks';\nimport { updateB2BAddress } from '@/shared/service/b2b';\nimport { snackbar } from '@/utils';\n\nimport { AddressItemType } from '../../../types/address';\n\ninterface SetDefaultDialogProps {\n  isOpen: boolean;\n  setIsOpen: Dispatch<SetStateAction<boolean>>;\n  setIsLoading: Dispatch<SetStateAction<boolean>>;\n  addressData?: AddressItemType;\n  updateAddressList: (isFirst?: boolean) => void;\n  companyId: string | number;\n}\n\nexport default function SetDefaultDialog(props: SetDefaultDialogProps) {\n  const { isOpen, setIsOpen, setIsLoading, addressData, updateAddressList, companyId } = props;\n\n  const [isMobile] = useMobile();\n\n  const b3Lang = useB3Lang();\n\n  const [address, setAddress] = useState<AddressItemType>();\n\n  useEffect(() => {\n    setAddress(addressData);\n  }, [addressData]);\n\n  const handleChange =\n    (key: 'isDefaultShipping' | 'isDefaultBilling') => (e: ChangeEvent<HTMLInputElement>) => {\n      const { checked } = e.target;\n\n      if (address) {\n        const newAddress = {\n          ...address,\n        };\n        if (key === 'isDefaultShipping') {\n          newAddress.isDefaultShipping = checked ? 1 : 0;\n          newAddress.isShipping = checked ? 1 : newAddress.isShipping;\n        }\n        if (key === 'isDefaultBilling') {\n          newAddress.isDefaultBilling = checked ? 1 : 0;\n          newAddress.isBilling = checked ? 1 : newAddress.isShipping;\n        }\n        setAddress(newAddress);\n      }\n    };\n\n  const handleSetDefault = async () => {\n    try {\n      setIsLoading(true);\n      setIsOpen(false);\n\n      await updateB2BAddress({\n        ...address,\n        companyId,\n      });\n\n      snackbar.success(b3Lang('addresses.setDefaultDialog.successfullySet'));\n\n      updateAddressList();\n    } catch (e) {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <B3Dialog\n      isOpen={isOpen}\n      title={b3Lang('addresses.setDefaultDialog.setDefaultAddress')}\n      leftSizeBtn={b3Lang('addresses.setDefaultDialog.cancel')}\n      rightSizeBtn=\"set\"\n      handleLeftClick={() => {\n        setIsOpen(false);\n      }}\n      handRightClick={handleSetDefault}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: isMobile ? 'start' : 'center',\n          justifyContent: isMobile ? 'center%' : 'start',\n          width: isMobile ? '100%' : '450px',\n          height: '100%',\n        }}\n      >\n        {address && (\n          <Box\n            sx={{\n              padding: !isMobile ? '10px 0' : '0',\n            }}\n          >\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={address.isDefaultShipping === 1}\n                    onChange={handleChange('isDefaultShipping')}\n                  />\n                }\n                label={b3Lang('addresses.setDefaultDialog.setDefaultShippingAddress')}\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={address.isDefaultBilling === 1}\n                    onChange={handleChange('isDefaultBilling')}\n                  />\n                }\n                label={b3Lang('addresses.setDefaultDialog.setDefaultBillingAddress')}\n              />\n            </FormGroup>\n          </Box>\n        )}\n      </Box>\n    </B3Dialog>\n  );\n}\n","import { getB2BAccountFormFields, getB2BAddressExtraFields } from '@/shared/service/b2b';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport {\n  AccountFormFieldsItems,\n  getAccountFormFields,\n  RegisterFieldsItems,\n} from '../../Registered/config';\n\nimport { b2bAddressFields } from './config';\n\nexport interface StateProps {\n  stateCode: string;\n  stateName: string;\n}\n\nexport interface CountryProps {\n  countryCode: string;\n  countryName: string;\n  id: string | number;\n  states: StateProps[];\n}\ninterface B2bExtraFieldsProps {\n  defaultValue: string;\n  fieldName: string;\n  fieldType: string | number;\n  isRequired: boolean;\n  labelName: string;\n  listOfValue: null | Array<string>;\n  maximumLength: string | number | null;\n  maximumValue: string | number | null;\n  numberOfRows: string | number | null;\n  visibleToEnduser: boolean;\n}\n\ninterface ExtraFieldsProp extends RegisterFieldsItems {\n  type: string;\n  variant: string;\n  visible: boolean;\n  xs: number;\n}\n\nconst convertExtraFields = (extraFields: B2bExtraFieldsProps[]): [] | ExtraFieldsProp[] => {\n  if (extraFields.length === 0) return [];\n  const visibleFields =\n    extraFields.filter((field: B2bExtraFieldsProps) => field.visibleToEnduser) || [];\n\n  if (visibleFields?.length === 0) return [];\n\n  const b2bExtraFields = visibleFields.map((field: B2bExtraFieldsProps) => {\n    const fields = {\n      ...field,\n      groupId: 4,\n      visible: field.visibleToEnduser,\n    };\n\n    return fields;\n  });\n\n  const convertB2BExtraFields = getAccountFormFields(b2bExtraFields).address;\n\n  convertB2BExtraFields.map((extraField: ExtraFieldsProp) => {\n    const field = extraField;\n    field.custom = true;\n\n    return extraField;\n  });\n\n  return convertB2BExtraFields;\n};\n\nconst getBcAddressFields = async () => {\n  try {\n    const { accountFormFields } = await getB2BAccountFormFields(1);\n\n    const addressFields = accountFormFields.filter(\n      (field: AccountFormFieldsItems) => field.groupId === 4,\n    );\n\n    const bcAddressFields = getAccountFormFields(addressFields).address;\n\n    return bcAddressFields;\n  } catch (e) {\n    b2bLogger.error(e);\n  }\n  return undefined;\n};\n\nconst getB2BAddressFields = async () => {\n  try {\n    const res = await getB2BAddressExtraFields();\n    const b2bExtraFields = convertExtraFields(res.addressExtraFields);\n    const addressFields = [...b2bAddressFields, ...b2bExtraFields];\n    return addressFields;\n  } catch (e) {\n    b2bLogger.error(e);\n  }\n  return [];\n};\n\nexport const getAddressFields = async (isB2BUser: boolean, countries: CountryProps) => {\n  let allAddressFields: CustomFieldItems[] = [];\n\n  try {\n    if (isB2BUser) {\n      const addressFields = await getB2BAddressFields();\n\n      if (addressFields) allAddressFields = addressFields;\n    } else {\n      const bcAddressFields = await getBcAddressFields();\n      allAddressFields = bcAddressFields;\n    }\n\n    allAddressFields.map((addressField: CustomFieldItems) => {\n      const field = addressField;\n      if (addressField.name === 'country') {\n        field.options = countries;\n        field.required = true;\n      }\n\n      if (addressField.name === 'state') {\n        field.fieldType = 'text';\n        field.required = false;\n      }\n\n      return addressField;\n    });\n\n    return allAddressFields;\n  } catch (e) {\n    b2bLogger.error(e);\n  }\n  return [];\n};\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\n\nimport B3Filter from '@/components/filter/B3Filter';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { B3PaginationTable, GetRequestList } from '@/components/table/B3PaginationTable';\nimport { useCardListColumn, useTableRef, useVerifyCreatePermission } from '@/hooks';\nimport { GlobalContext } from '@/shared/global';\nimport {\n  getB2BAddress,\n  getB2BAddressConfig,\n  getB2BCountries,\n  getBCCustomerAddress,\n} from '@/shared/service/b2b';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { CustomerRole } from '@/types';\nimport { b2bPermissionsMap, snackbar } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport { AddressConfigItem, AddressItemType, BCAddressItemType } from '../../types/address';\n\nimport B3AddressForm from './components/AddressForm';\nimport { AddressItemCard } from './components/AddressItemCard';\nimport DeleteAddressDialog from './components/DeleteAddressDialog';\nimport SetDefaultDialog from './components/SetDefaultDialog';\nimport { convertBCToB2BAddress, filterFormConfig } from './shared/config';\nimport { CountryProps, getAddressFields } from './shared/getAddressFields';\n\nconst permissionKeys = [\n  b2bPermissionsMap.addressesCreateActionsPermission,\n  b2bPermissionsMap.addressesUpdateActionsPermission,\n  b2bPermissionsMap.addressesDeleteActionsPermission,\n];\ninterface RefCurrentProps extends HTMLInputElement {\n  handleOpenAddEditAddressClick: (type: string, data?: AddressItemType) => void;\n}\n\ntype BCAddress = {\n  node: BCAddressItemType;\n};\n\ninterface FilterSearchProps {\n  country?: string;\n  state?: string;\n  city?: string;\n  search?: string;\n}\n\nfunction Address() {\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyInfoId = useAppSelector(({ company }) => company.companyInfo.id);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const {\n    state: { addressConfig },\n    dispatch,\n  } = useContext(GlobalContext);\n\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  const b3Lang = useB3Lang();\n  const isExtraLarge = useCardListColumn();\n  const [paginationTableRef] = useTableRef();\n\n  const addEditAddressRef = useRef<RefCurrentProps | null>(null);\n\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n  const [addressFields, setAddressFields] = useState<CustomFieldItems[]>([]);\n  const [countries, setCountries] = useState<CountryProps[]>([]);\n  const [filterData, setFilterData] = useState<Partial<FilterSearchProps>>({\n    search: '',\n  });\n\n  const companyId =\n    role === CustomerRole.SUPER_ADMIN && isAgenting ? salesRepCompanyId : companyInfoId;\n\n  let isBCPermission = false;\n\n  if (!isB2BUser || (role === CustomerRole.SUPER_ADMIN && !isAgenting)) {\n    isBCPermission = true;\n  }\n\n  useEffect(() => {\n    const handleGetAddressFields = async () => {\n      const { countries } = await getB2BCountries();\n\n      setCountries(countries);\n      setIsRequestLoading(true);\n      try {\n        const addressFields = await getAddressFields(!isBCPermission, countries);\n        setAddressFields(addressFields || []);\n      } catch (err) {\n        b2bLogger.error(err);\n      } finally {\n        setIsRequestLoading(false);\n      }\n    };\n\n    handleGetAddressFields();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const defaultParams: FilterSearchProps = {};\n  const getAddressList: GetRequestList<FilterSearchProps, AddressItemType> = async (\n    params = defaultParams,\n  ) => {\n    let list = [];\n    let count = 0;\n\n    if (!isBCPermission) {\n      const {\n        addresses: { edges: addressList = [], totalCount },\n      } = await getB2BAddress({\n        companyId,\n        ...params,\n      });\n\n      list = addressList;\n      count = totalCount;\n    } else {\n      const {\n        customerAddresses: { edges: addressList = [], totalCount },\n      } = await getBCCustomerAddress({\n        ...params,\n      });\n\n      list = addressList.map((address: BCAddress) => ({\n        node: convertBCToB2BAddress(address.node),\n      }));\n      count = totalCount;\n    }\n\n    return {\n      edges: list,\n      totalCount: count,\n    };\n  };\n\n  const handleChange = (key: string, value: string) => {\n    if (key === 'search') {\n      setFilterData({\n        ...filterData,\n        search: value,\n      });\n    }\n  };\n  const handleFilterChange = (values: FilterSearchProps) => {\n    setFilterData({\n      ...filterData,\n      country: values.country || '',\n      state: values.state || '',\n      city: values.city || '',\n    });\n  };\n\n  const updateAddressList = () => {\n    paginationTableRef.current?.refresh();\n  };\n\n  const [editPermission, setEditPermission] = useState(false);\n  const [isOpenSetDefault, setIsOpenSetDefault] = useState(false);\n  const [isOpenDelete, setIsOpenDelete] = useState(false);\n  const [currentAddress, setCurrentAddress] = useState<AddressItemType>();\n\n  const [isCreatePermission, updateActionsPermission, deleteActionsPermission] =\n    useVerifyCreatePermission(permissionKeys);\n\n  useEffect(() => {\n    const getEditPermission = async () => {\n      if (isBCPermission) {\n        setEditPermission(true);\n        return;\n      }\n\n      if (updateActionsPermission) {\n        try {\n          let configList = addressConfig;\n          if (!configList) {\n            const { addressConfig: newConfig } = await getB2BAddressConfig();\n            configList = newConfig;\n\n            dispatch({\n              type: 'common',\n              payload: {\n                addressConfig: configList,\n              },\n            });\n          }\n\n          const key = role === 3 ? 'address_sales_rep' : 'address_admin';\n\n          const editPermission =\n            (configList || []).find((config: AddressConfigItem) => config.key === 'address_book')\n              ?.isEnabled === '1' &&\n            (configList || []).find((config: AddressConfigItem) => config.key === key)\n              ?.isEnabled === '1';\n\n          setEditPermission(editPermission);\n        } catch (error) {\n          b2bLogger.error(error);\n        }\n      }\n    };\n    getEditPermission();\n    // Disabling the next line as dispatch is not required to be in the dependency array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addressConfig, updateActionsPermission, isBCPermission, role, selectCompanyHierarchyId]);\n\n  const handleCreate = () => {\n    if (!editPermission) {\n      snackbar.error(b3Lang('addresses.noPermissionToAdd'));\n      return;\n    }\n    addEditAddressRef.current?.handleOpenAddEditAddressClick('add');\n  };\n\n  const handleEdit = (row: AddressItemType) => {\n    if (!editPermission) {\n      snackbar.error(b3Lang('addresses.noPermissionToEdit'));\n      return;\n    }\n    addEditAddressRef.current?.handleOpenAddEditAddressClick('edit', row);\n  };\n\n  const handleDelete = (address: AddressItemType) => {\n    if (!editPermission) {\n      snackbar.error(b3Lang('addresses.noPermissionToEdit'));\n      return;\n    }\n    setCurrentAddress({\n      ...address,\n    });\n    setIsOpenDelete(true);\n  };\n\n  const handleSetDefault = (address: AddressItemType) => {\n    setCurrentAddress({\n      ...address,\n    });\n    setIsOpenSetDefault(true);\n  };\n\n  const AddButtonConfig = useMemo(() => {\n    return {\n      isEnabled: isBCPermission || (editPermission && isCreatePermission),\n      customLabel: b3Lang('addresses.addNewAddress'),\n    };\n\n    // ignore b3Lang due it's function that doesn't not depend on any reactive value\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editPermission, selectCompanyHierarchyId, isCreatePermission]);\n\n  const translatedFilterFormConfig = JSON.parse(JSON.stringify(filterFormConfig));\n\n  translatedFilterFormConfig.map((element: { label: string; idLang: any }) => {\n    const item = element;\n    item.label = b3Lang(element.idLang);\n\n    return element;\n  });\n\n  const currentUseCompanyHierarchyId = Number(selectCompanyHierarchyId) || Number(companyId);\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n        }}\n      >\n        <B3Filter\n          filterMoreInfo={translatedFilterFormConfig}\n          handleChange={handleChange}\n          handleFilterChange={handleFilterChange}\n          customButtonConfig={AddButtonConfig}\n          handleFilterCustomButtonClick={handleCreate}\n        />\n        <B3PaginationTable\n          ref={paginationTableRef}\n          columnItems={[]}\n          rowsPerPageOptions={[12, 24, 36]}\n          getRequestList={getAddressList}\n          searchParams={filterData}\n          isCustomRender\n          itemXs={isExtraLarge ? 3 : 4}\n          requestLoading={setIsRequestLoading}\n          tableKey=\"id\"\n          renderItem={(row) => (\n            <AddressItemCard\n              key={row.id}\n              item={row}\n              onEdit={() => handleEdit(row)}\n              onDelete={handleDelete}\n              onSetDefault={handleSetDefault}\n              editPermission={editPermission}\n              updateActionsPermission={updateActionsPermission}\n              deleteActionsPermission={deleteActionsPermission}\n              isBCPermission={isBCPermission}\n            />\n          )}\n        />\n        <B3AddressForm\n          updateAddressList={updateAddressList}\n          addressFields={addressFields}\n          ref={addEditAddressRef}\n          companyId={currentUseCompanyHierarchyId}\n          isBCPermission={isBCPermission}\n          countries={countries}\n        />\n\n        {editPermission && !isBCPermission && (\n          <SetDefaultDialog\n            isOpen={isOpenSetDefault}\n            setIsOpen={setIsOpenSetDefault}\n            setIsLoading={setIsRequestLoading}\n            addressData={currentAddress}\n            updateAddressList={updateAddressList}\n            companyId={currentUseCompanyHierarchyId}\n          />\n        )}\n        {editPermission && (\n          <DeleteAddressDialog\n            isOpen={isOpenDelete}\n            setIsOpen={setIsOpenDelete}\n            setIsLoading={setIsRequestLoading}\n            addressData={currentAddress}\n            updateAddressList={updateAddressList}\n            companyId={currentUseCompanyHierarchyId}\n            isBCPermission={isBCPermission}\n          />\n        )}\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default Address;\n"],"names":["StyledCheckbox","styled","AddressForm","addressFields","updateAddressList","companyId","isBCPermission","countries","ref","b3Lang","useB3Lang","open","setOpen","useState","type","setType","isInitialized","setIsInitialized","addUpdateLoading","setAddUpdateLoading","allAddressFields","setAllAddressFields","addressExtraFields","setAddressExtraFields","originAddressFields","setOriginAddressFields","addressData","setAddressData","shippingBilling","setShippingBilling","isB2BUser","control","handleSubmit","getValues","errors","watch","setError","setValue","reset","useForm","validateCompanyExtraFieldsUnique","data","extraFields","field","deCodeField","res","validateAddressExtraFields","message","_a","messageArr","error","snackbar","handleCancelClick","handleSaveB2BAddress","currentCountryCode","stateCode","currentCountryName","currentStateName","currentStateCode","country","countryName","countryCode","states","state","item","params","createB2BAddress","id","updateB2BAddress","err","handleSaveBcAddress","createBcAddress","bcAddressId","updateBcAddress","handleSaveAddress","handleOpenAddEditAddressClick","addressField","originFields","useImperativeHandle","handleChangeAddressType","check","name","useEffect","translatedAddressFields","element","translatedFieldElement","fields","cloneDeep","handleBackFillData","useCallback","isShipping","isBilling","isDefaultShipping","isDefaultBilling","currentCountry","currentField","currentExtraField","handleCountryChange","stateList","stateFields","formFields","subscription","value","jsxs","B3Dialog","Fragment","jsx","b2bShippingBilling","child","idLang","FormControlLabel","Checkbox","e","B3CustomForm","B3AddressForm","forwardRef","TagBox","marginBottom","Flex","theme","AddressItemCard","props","addressInfo","onEdit","onDelete","onSetDefault","hasPermission","updateActionsPermission","deleteActionsPermission","useTheme","Card","CardContent","Typography","B3Tag","CustomButton","Box","IconButton","EditIcon","DeleteIcon","DeleteAddressDialog","isOpen","setIsOpen","setIsLoading","isMobile","useMobile","handleDelete","deleteBCCustomerAddress","deleteB2BAddress","SetDefaultDialog","address","setAddress","handleChange","key","checked","newAddress","handleSetDefault","FormGroup","convertExtraFields","visibleFields","b2bExtraFields","convertB2BExtraFields","getAccountFormFields","extraField","getBcAddressFields","accountFormFields","getB2BAccountFormFields","b2bLogger","getB2BAddressFields","getB2BAddressExtraFields","b2bAddressFields","getAddressFields","permissionKeys","b2bPermissionsMap","Address","useAppSelector","isB2BUserSelector","companyInfoId","company","role","salesRepCompanyId","b2bFeatures","isAgenting","addressConfig","dispatch","useContext","GlobalContext","selectCompanyHierarchyId","isExtraLarge","useCardListColumn","paginationTableRef","useTableRef","addEditAddressRef","useRef","isRequestLoading","setIsRequestLoading","setAddressFields","setCountries","filterData","setFilterData","CustomerRole","getB2BCountries","defaultParams","getAddressList","list","count","addressList","totalCount","getBCCustomerAddress","convertBCToB2BAddress","getB2BAddress","handleFilterChange","values","editPermission","setEditPermission","isOpenSetDefault","setIsOpenSetDefault","isOpenDelete","setIsOpenDelete","currentAddress","setCurrentAddress","isCreatePermission","useVerifyCreatePermission","configList","newConfig","getB2BAddressConfig","config","_b","handleCreate","handleEdit","row","AddButtonConfig","useMemo","translatedFilterFormConfig","filterFormConfig","currentUseCompanyHierarchyId","B3Spin","B3Filter","B3PaginationTable"],"mappings":"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"}