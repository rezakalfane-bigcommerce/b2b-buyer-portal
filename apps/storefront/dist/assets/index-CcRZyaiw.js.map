{"version":3,"file":"index-CcRZyaiw.js","sources":["../../src/pages/Registered/RegisterComplete.tsx","../../src/pages/Registered/RegisteredAccount.tsx","../../src/pages/Registered/RegisteredDetail.tsx","../../src/pages/Registered/RegisterContent.tsx","../../src/pages/Registered/RegisteredStep.tsx","../../src/pages/Registered/index.tsx"],"sourcesContent":["import { MouseEvent, useContext, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useB3Lang } from '@b3/lang';\nimport { Alert, Box, Typography } from '@mui/material';\n\nimport { B3CustomForm } from '@/components';\nimport { Captcha } from '@/components/form';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { CustomStyleContext } from '@/shared/customStyleButton/context';\nimport { GlobalContext } from '@/shared/global';\nimport {\n  createB2BCompanyUser,\n  createBCCompanyUser,\n  sendSubscribersState,\n  uploadB2BFile,\n} from '@/shared/service/b2b';\nimport { getStorefrontToken } from '@/shared/service/b2b/graphql/recaptcha';\nimport { channelId, storeHash } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport { deCodeField, toHump } from './config';\nimport { PrimaryButton } from './PrimaryButton';\nimport { InformationFourLabels, TipContent } from './styled';\nimport { RegisterFields } from './types';\n\ninterface RegisterCompleteProps {\n  handleBack: () => void;\n  handleNext: () => void;\n}\n\ntype RegisterCompleteList = Array<RegisterFields> | undefined;\n\nexport default function RegisterComplete(props: RegisterCompleteProps) {\n  const b3Lang = useB3Lang();\n  const { handleBack, handleNext } = props;\n  const [personalInfo, setPersonalInfo] = useState<Array<CustomFieldItems>>([]);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [enterEmail, setEnterEmail] = useState<string>('');\n\n  const [captchaKey, setCaptchaKey] = useState('');\n  const [isEnabledOnStorefront, setIsEnabledOnStorefront] = useState(false);\n  const [storefrontSiteKey, setStorefrontSiteKey] = useState('');\n\n  const [isCaptchaMissing, setIsCaptchaMissing] = useState(false);\n\n  const handleGetCaptchaKey = (key: string) => setCaptchaKey(key);\n\n  useEffect(() => {\n    const getIsEnabledOnStorefront = async () => {\n      try {\n        const response = await getStorefrontToken();\n\n        if (response) {\n          setIsEnabledOnStorefront(response.isEnabledOnStorefront);\n          setStorefrontSiteKey(response.siteKey);\n        }\n      } catch (e) {\n        b2bLogger.error(e);\n      }\n    };\n\n    getIsEnabledOnStorefront();\n  }, []);\n\n  useEffect(() => {\n    if (captchaKey) setIsCaptchaMissing(false);\n  }, [captchaKey]);\n\n  const {\n    control,\n    handleSubmit,\n    setError,\n    formState: { errors },\n  } = useForm({\n    mode: 'all',\n  });\n  const { state, dispatch } = useContext(RegisteredContext);\n\n  const {\n    state: { blockPendingAccountOrderCreation },\n  } = useContext(GlobalContext);\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const {\n    contactInformation,\n    bcContactInformation,\n    passwordInformation = [],\n    bcPasswordInformation = [],\n    accountType,\n    additionalInformation,\n    bcAdditionalInformation,\n    addressBasicFields = [],\n    bcAddressBasicFields = [],\n    companyInformation = [],\n    emailMarketingNewsletter,\n  } = state;\n\n  const list: RegisterCompleteList =\n    accountType === '1' ? contactInformation : bcContactInformation;\n  const passwordInfo: RegisterCompleteList =\n    accountType === '1' ? passwordInformation : bcPasswordInformation;\n\n  const passwordName = passwordInfo[0]?.groupName || '';\n\n  const additionalInfo: RegisterCompleteList =\n    accountType === '1' ? additionalInformation : bcAdditionalInformation;\n\n  const addressBasicList = accountType === '1' ? addressBasicFields : bcAddressBasicFields;\n\n  useEffect(() => {\n    if (!accountType) return;\n    if (list && list.length) {\n      const emailFields: CustomFieldItems =\n        list.find((item: RegisterFields) => item.name === 'email') || {};\n\n      setEnterEmail(emailFields?.default || '');\n    }\n\n    setPersonalInfo(passwordInfo);\n  }, [contactInformation, bcContactInformation, accountType, list, passwordInfo]);\n\n  const getBCFieldsValue = (data: CustomFieldItems) => {\n    const bcFields: CustomFieldItems = {};\n\n    bcFields.authentication = {\n      force_password_reset: false,\n      new_password: data.password,\n    };\n\n    bcFields.accepts_product_review_abandoned_cart_emails = emailMarketingNewsletter;\n\n    if (list) {\n      list.forEach((item: any) => {\n        const name = deCodeField(item.name);\n        if (name === 'accepts_marketing_emails') {\n          bcFields.accepts_product_review_abandoned_cart_emails = !!item?.default?.length;\n        } else if (!item.custom) {\n          bcFields[name] = item?.default || '';\n        }\n      });\n\n      bcFields.form_fields = [];\n      if (additionalInfo && (additionalInfo as Array<CustomFieldItems>).length) {\n        additionalInfo.forEach((field: CustomFieldItems) => {\n          bcFields.form_fields.push({\n            name: field.bcLabel,\n            value: field.default,\n          });\n        });\n      }\n    }\n\n    bcFields.addresses = [];\n    bcFields.origin_channel_id = channelId;\n    bcFields.channel_ids = [channelId];\n\n    if (accountType === '2') {\n      const addresses: CustomFieldItems = {};\n\n      const getBCAddressField = addressBasicList.filter((field: any) => !field.custom);\n      const getBCExtraAddressField = addressBasicList.filter((field: any) => field.custom);\n\n      if (getBCAddressField) {\n        bcFields.addresses = {};\n        getBCAddressField.forEach((field: any) => {\n          if (field.name === 'country') {\n            addresses.country_code = field.default;\n          } else if (field.name === 'state') {\n            addresses.state_or_province = field.default;\n          } else if (field.name === 'postalCode') {\n            addresses.postal_code = field.default;\n          } else if (field.name === 'firstName') {\n            addresses.first_name = field.default;\n          } else if (field.name === 'lastName') {\n            addresses.last_name = field.default;\n          } else {\n            addresses[field.name] = field.default;\n          }\n        });\n      }\n\n      addresses.form_fields = [];\n      // BC Extra field\n      if (getBCExtraAddressField && getBCExtraAddressField.length) {\n        getBCExtraAddressField.forEach((field: any) => {\n          addresses.form_fields.push({\n            name: field.bcLabel,\n            value: field.default,\n          });\n        });\n      }\n\n      bcFields.addresses = [addresses];\n      bcFields.trigger_account_created_notification = true;\n    }\n\n    const userItem = {\n      storeHash,\n      ...bcFields,\n    };\n\n    return createBCCompanyUser(userItem);\n  };\n\n  const getB2BFieldsValue = async (\n    _: CustomFieldItems,\n    customerId: number | string,\n    fileList: any,\n  ) => {\n    try {\n      const b2bFields: CustomFieldItems = {};\n      b2bFields.customerId = customerId || '';\n      b2bFields.storeHash = storeHash;\n\n      // company user extra field\n      const b2bContactInformationList = list || [];\n      const companyUserExtraFieldsList = b2bContactInformationList.filter((item) => !!item.custom);\n\n      if (companyUserExtraFieldsList.length) {\n        const companyUserExtraFields: Array<CustomFieldItems> = [];\n        companyUserExtraFieldsList.forEach((item: CustomFieldItems) => {\n          const itemExtraField: CustomFieldItems = {};\n          itemExtraField.fieldName = deCodeField(item.name);\n          itemExtraField.fieldValue = item?.default || '';\n          companyUserExtraFields.push(itemExtraField);\n        });\n        b2bFields.userExtraFields = companyUserExtraFields;\n      }\n\n      const companyInfo = companyInformation.filter(\n        (list) => !list.custom && list.fieldType !== 'files',\n      );\n      const companyExtraInfo = companyInformation.filter((list) => !!list.custom);\n      // company field\n      if (companyInfo.length) {\n        companyInfo.forEach((item: any) => {\n          b2bFields[toHump(deCodeField(item.name))] = item?.default || '';\n        });\n      }\n\n      // Company Additional Field\n      if (companyExtraInfo.length) {\n        const extraFields: Array<CustomFieldItems> = [];\n        companyExtraInfo.forEach((item: CustomFieldItems) => {\n          const itemExtraField: CustomFieldItems = {};\n          itemExtraField.fieldName = deCodeField(item.name);\n          itemExtraField.fieldValue = item?.default || '';\n          extraFields.push(itemExtraField);\n        });\n        b2bFields.extraFields = extraFields;\n      }\n\n      // address Field\n      const addressBasicInfo = addressBasicList.filter((list) => !list.custom) || [];\n      const addressExtraBasicInfo = addressBasicList.filter((list) => !!list.custom) || [];\n\n      if (addressBasicInfo.length) {\n        addressBasicInfo.forEach((field: CustomFieldItems) => {\n          const name = deCodeField(field.name);\n          if (name === 'address1') {\n            b2bFields.addressLine1 = field.default;\n          }\n          if (name === 'address2') {\n            b2bFields.addressLine2 = field.default;\n          }\n          b2bFields[name] = field.default;\n        });\n      }\n\n      // address Additional Field\n      if (addressExtraBasicInfo.length) {\n        const extraFields: Array<CustomFieldItems> = [];\n        addressExtraBasicInfo.forEach((item: CustomFieldItems) => {\n          const itemExtraField: CustomFieldItems = {};\n          itemExtraField.fieldName = deCodeField(item.name);\n          itemExtraField.fieldValue = item?.default || '';\n          extraFields.push(itemExtraField);\n        });\n        b2bFields.addressExtraFields = extraFields;\n      }\n      b2bFields.fileList = fileList;\n      b2bFields.channelId = channelId;\n\n      return await createB2BCompanyUser(b2bFields);\n    } catch (error) {\n      b2bLogger.error(error);\n    }\n    return undefined;\n  };\n\n  const getFileUrl = async (attachmentsList: RegisterFields[]) => {\n    let attachments: File[] = [];\n\n    if (!attachmentsList.length) return undefined;\n\n    attachmentsList.forEach((field: any) => {\n      attachments = field.default;\n    });\n\n    try {\n      const fileResponse = await Promise.all(\n        attachments.map((file: File) =>\n          uploadB2BFile({\n            file,\n            type: 'companyAttachedFile',\n          }),\n        ),\n      );\n\n      const fileList = fileResponse.reduce((fileList: any, res: any) => {\n        let list = fileList;\n        if (res.code === 200) {\n          const newData = {\n            ...res.data,\n          };\n          newData.fileSize = newData.fileSize ? `${newData.fileSize}` : '';\n          list = [...fileList, newData];\n        } else {\n          throw (\n            res.data.errMsg || res.message || b3Lang('intl.global.fileUpload.fileUploadFailure')\n          );\n        }\n        return list;\n      }, []);\n\n      return fileList;\n    } catch (error) {\n      b2bLogger.error(error);\n      throw error;\n    }\n  };\n\n  const saveRegisterPassword = (data: CustomFieldItems) => {\n    const newPasswordInformation = passwordInformation.map((field: RegisterFields) => {\n      const registerField = field;\n      if (accountType === '1') {\n        registerField.default = data[field.name] || field.default;\n      }\n      return field;\n    });\n\n    const newBcPasswordInformation = bcPasswordInformation.map((field: RegisterFields) => {\n      const registerField = field;\n      if (accountType === '2') {\n        registerField.default = data[field.name] || field.default;\n      }\n\n      return field;\n    });\n\n    dispatch({\n      type: 'all',\n      payload: {\n        passwordInformation: newPasswordInformation,\n        bcPasswordInformation: newBcPasswordInformation,\n      },\n    });\n  };\n\n  const handleSendSubscribersState = async () => {\n    if (list && list.length > 0) {\n      const emailMe = list.find(\n        (item: CustomFieldItems) =>\n          item.fieldId === 'field_email_marketing_newsletter' && item.fieldType === 'checkbox',\n      );\n      const firstName: CustomFieldItems =\n        list.find((item: RegisterFields) => item.fieldId === 'field_first_name') || {};\n      const lastName: CustomFieldItems =\n        list.find((item: RegisterFields) => item.fieldId === 'field_last_name') || {};\n      const isChecked = emailMe?.isChecked || false;\n      const defaultValue = emailMe?.default || [];\n\n      if (isChecked && (defaultValue as Array<string>).length > 0) {\n        try {\n          await sendSubscribersState({\n            storeHash,\n            email: enterEmail,\n            first_name: firstName.default,\n            last_name: lastName.default,\n            channel_id: channelId || 1,\n          });\n        } catch (err: any) {\n          setErrorMessage(err?.message || err);\n        }\n      }\n    }\n  };\n\n  const handleCompleted = (event: MouseEvent) => {\n    handleSubmit(async (completeData: CustomFieldItems) => {\n      if (completeData.password !== completeData.confirmPassword) {\n        setError('confirmPassword', {\n          type: 'manual',\n          message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n        });\n        setError('password', {\n          type: 'manual',\n          message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n        });\n        return;\n      }\n\n      if (isEnabledOnStorefront && !captchaKey) {\n        setIsCaptchaMissing(true);\n        return;\n      }\n\n      if (!isCaptchaMissing) {\n        try {\n          dispatch({\n            type: 'loading',\n            payload: {\n              isLoading: true,\n            },\n          });\n\n          let isAuto = true;\n          if (accountType === '2') {\n            await getBCFieldsValue(completeData);\n          } else {\n            const attachmentsList = companyInformation.filter((list) => list.fieldType === 'files');\n            const fileList = await getFileUrl(attachmentsList || []);\n            const res = await getBCFieldsValue(completeData);\n            const {\n              customerCreate: { customer: data },\n            } = res;\n            const accountInfo = await getB2BFieldsValue(completeData, data.id, fileList);\n\n            const companyStatus = accountInfo?.companyCreate?.company?.companyStatus || '';\n            isAuto = Number(companyStatus) === 1;\n          }\n          dispatch({\n            type: 'finishInfo',\n            payload: {\n              submitSuccess: true,\n              isAutoApproval: isAuto,\n              blockPendingAccountOrderCreation,\n            },\n          });\n          saveRegisterPassword(completeData);\n          await handleSendSubscribersState();\n          handleNext();\n        } catch (err: any) {\n          setErrorMessage(err?.message || err);\n        } finally {\n          dispatch({\n            type: 'loading',\n            payload: {\n              isLoading: false,\n            },\n          });\n        }\n      }\n    })(event);\n  };\n\n  return (\n    <Box\n      sx={{\n        pl: 1,\n        pr: 1,\n        mt: 2,\n        width: '100%',\n        '& h4': {\n          color: customColor,\n        },\n        '& input, & .MuiFormControl-root .MuiTextField-root': {\n          borderRadius: '4px',\n          borderBottomLeftRadius: '0',\n          borderBottomRightRadius: '0',\n        },\n      }}\n    >\n      {errorMessage && (\n        <Alert severity=\"error\">\n          <TipContent>{errorMessage}</TipContent>\n        </Alert>\n      )}\n      <Box>\n        <InformationFourLabels>{passwordName}</InformationFourLabels>\n        {personalInfo && (\n          <>\n            {enterEmail.length > 0 && (\n              <Box\n                sx={{\n                  fontSize: '16px',\n                  fontWeight: 400,\n                  color: '#000000',\n                  marginBottom: '10px',\n                  marginTop: '-12px',\n                  wordWrap: 'break-word',\n                }}\n              >\n                {`Create password for ${enterEmail}`}\n              </Box>\n            )}\n            <B3CustomForm formFields={personalInfo} errors={errors} control={control} />\n          </>\n        )}\n        {isCaptchaMissing ? (\n          <Typography\n            variant=\"body1\"\n            sx={{\n              color: 'red',\n              display: 'flex',\n              alignSelf: 'flex-start',\n              marginLeft: '8px',\n              marginTop: '2px',\n              fontSize: '13px',\n            }}\n          >\n            {b3Lang('login.loginText.missingCaptcha')}\n          </Typography>\n        ) : (\n          ''\n        )}\n        {isEnabledOnStorefront ? (\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'center',\n              marginTop: '20px',\n            }}\n          >\n            <Captcha siteKey={storefrontSiteKey} size=\"normal\" handleGetKey={handleGetCaptchaKey} />\n          </Box>\n        ) : (\n          ''\n        )}\n      </Box>\n\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          pt: 2,\n          gap: 1,\n        }}\n      >\n        <PrimaryButton onClick={handleBack}>{b3Lang('global.button.back')}</PrimaryButton>\n        <PrimaryButton onClick={handleCompleted}>{b3Lang('global.button.submit')}</PrimaryButton>\n      </Box>\n    </Box>\n  );\n}\n","import { ChangeEvent, MouseEvent, useContext, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useB3Lang } from '@b3/lang';\nimport { Alert, Box, FormControl, FormControlLabel, Radio, RadioGroup } from '@mui/material';\n\nimport { B3CustomForm } from '@/components';\nimport { b3HexToRgb, getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport {\n  checkUserBCEmail,\n  checkUserEmail,\n  validateBCCompanyUserExtraFields,\n} from '@/shared/service/b2b';\nimport { themeFrameSelector, useAppSelector } from '@/store';\nimport { channelId } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport { Base64, emailError } from './config';\nimport { PrimaryButton } from './PrimaryButton';\nimport { InformationFourLabels, TipContent } from './styled';\nimport { RegisterFields } from './types';\n\ninterface RegisteredAccountProps {\n  handleNext: () => void;\n}\n\nexport default function RegisteredAccount({ handleNext }: RegisteredAccountProps) {\n  const { state, dispatch } = useContext(RegisteredContext);\n  const IframeDocument = useAppSelector(themeFrameSelector);\n\n  const {\n    state: {\n      accountLoginRegistration,\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const b3Lang = useB3Lang();\n\n  const [errorTips, setErrorTips] = useState<string>('');\n\n  const {\n    contactInformation,\n    accountType,\n    additionalInformation,\n    bcContactInformation,\n    bcAdditionalInformation,\n  } = state;\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setError,\n    setValue,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const additionName = accountType === '1' ? 'additionalInformation' : 'bcAdditionalInformation';\n  const additionalInfo: any =\n    accountType === '1' ? additionalInformation || [] : bcAdditionalInformation || [];\n\n  const newContactInformation = contactInformation?.map((contactInfo: CustomFieldItems) => {\n    const info = contactInfo;\n    if (contactInfo.fieldId === 'field_email' && accountType === '1') {\n      info.isTip = true;\n      info.tipText = 'This email will be used to sign in to your account';\n    }\n\n    return contactInfo;\n  });\n\n  const contactInfo: any = accountType === '1' ? newContactInformation : bcContactInformation || [];\n  const contactName = accountType === '1' ? 'contactInformation' : 'bcContactInformationFields';\n\n  const contactInformationLabel = contactInfo.length ? contactInfo[0]?.groupName : '';\n\n  const additionalInformationLabel = additionalInfo.length ? additionalInfo[0]?.groupName : '';\n\n  const showLoading = (isShow = false) => {\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: isShow,\n      },\n    });\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: 'accountType',\n      payload: {\n        accountType: event.target.value,\n      },\n    });\n  };\n\n  const emailName =\n    contactInformation?.find((item: CustomFieldItems) => item.fieldId === 'field_email')?.name ||\n    'email';\n\n  const validateEmailValue = async (email: string) => {\n    const isRegisterAsB2BUser = accountType === '1';\n    try {\n      showLoading(true);\n      const {\n        isValid,\n        userType,\n        userInfo: { companyName = '' } = {},\n      } = isRegisterAsB2BUser\n        ? await checkUserEmail({ email, channelId })\n        : await checkUserBCEmail({ email, channelId });\n\n      if (!isValid) {\n        setErrorTips(\n          b3Lang(emailError[userType], {\n            companyName: companyName || '',\n            email,\n          }),\n        );\n        setError(emailName, {\n          type: 'custom',\n          message: '',\n        });\n\n        IframeDocument?.body.scrollIntoView(true);\n      } else {\n        setErrorTips('');\n      }\n\n      return isValid;\n    } catch (error) {\n      return false;\n    } finally {\n      showLoading(false);\n    }\n  };\n\n  const handleAccountToDetail = async (event: MouseEvent) => {\n    handleSubmit(async (data: CustomFieldItems) => {\n      if (!(await validateEmailValue(data[emailName]))) {\n        return;\n      }\n\n      const newContactInfo = contactInfo.map((item: RegisterFields) => {\n        const newContactItem = item;\n        newContactItem.default = data[item.name] || item.default;\n        if (item.fieldId === 'field_email_marketing_newsletter' && item.fieldType === 'checkbox') {\n          newContactItem.isChecked = data[item.name].length > 0;\n        }\n        return item;\n      });\n\n      try {\n        showLoading(true);\n        if (accountType === '1') {\n          const extraCompanyUserInformation = newContactInfo.filter(\n            (item: RegisterFields) => !!item.custom,\n          );\n          const extraFields = extraCompanyUserInformation.map((field: RegisterFields) => ({\n            fieldName: Base64.decode(field.name),\n            fieldValue: data[field.name] || field.default,\n          }));\n          if (extraFields.length > 0) {\n            const res = await validateBCCompanyUserExtraFields({\n              extraFields,\n            });\n\n            if (res.code !== 200) {\n              const message = res.data?.errMsg || res.message || '';\n\n              const messageArr = message.split(':');\n\n              if (messageArr.length >= 2) {\n                const field = extraCompanyUserInformation.find(\n                  (field: RegisterFields) => Base64.decode(field.name) === messageArr[0],\n                );\n                if (field) {\n                  setError(field.name, {\n                    type: 'manual',\n                    message: messageArr[1],\n                  });\n                  showLoading(false);\n                  return;\n                }\n              }\n              setErrorTips(message);\n              showLoading(false);\n              return;\n            }\n          }\n          setErrorTips('');\n        }\n      } catch (error) {\n        b2bLogger.error(error);\n      } finally {\n        showLoading(false);\n      }\n\n      let newAdditionalInformation: Array<RegisterFields> = [];\n      if (additionalInfo) {\n        newAdditionalInformation = (additionalInfo as Array<RegisterFields>).map(\n          (item: RegisterFields) => {\n            const additionalInfoItem = item;\n            additionalInfoItem.default = data[item.name] || item.default;\n            return item;\n          },\n        );\n      }\n\n      dispatch({\n        type: 'all',\n        payload: {\n          [additionName]: [...newAdditionalInformation],\n          [contactName]: [...newContactInfo],\n        },\n      });\n      handleNext();\n    })(event);\n  };\n\n  return (\n    <Box\n      sx={{\n        pl: 1,\n        pr: 1,\n        mt: 2,\n        width: '100%',\n      }}\n    >\n      {errorTips && (\n        <Alert severity=\"error\">\n          <TipContent>{errorTips}</TipContent>\n        </Alert>\n      )}\n      <FormControl\n        sx={{\n          '& h4': {\n            color: customColor,\n          },\n        }}\n      >\n        <InformationFourLabels>\n          {b3Lang('register.registeredAccount.accountType')}\n        </InformationFourLabels>\n        <RadioGroup\n          aria-labelledby=\"demo-row-radio-buttons-group-label\"\n          name=\"row-radio-buttons-group\"\n          value={accountType}\n          onChange={handleChange}\n          sx={{\n            '& .MuiTypography-root.MuiTypography-body1.MuiFormControlLabel-label': {\n              color: b3HexToRgb(customColor, 0.87),\n            },\n            '& .MuiButtonBase-root.MuiRadio-root.MuiRadio-colorPrimary:not(.Mui-checked)': {\n              color: b3HexToRgb(customColor, 0.6),\n            },\n          }}\n        >\n          {accountLoginRegistration.b2b && (\n            <FormControlLabel\n              value=\"1\"\n              control={<Radio />}\n              label={b3Lang('register.registeredAccount.businessAccount')}\n            />\n          )}\n          {accountLoginRegistration.b2c && (\n            <FormControlLabel\n              value=\"2\"\n              control={<Radio />}\n              label={b3Lang('register.registeredAccount.personalAccount')}\n            />\n          )}\n        </RadioGroup>\n      </FormControl>\n      <Box\n        sx={{\n          '& h4': {\n            color: customColor,\n          },\n          '& input, & .MuiFormControl-root .MuiTextField-root, & .MuiTextField-root .MuiInputBase-multiline':\n            {\n              borderRadius: '4px',\n              borderBottomLeftRadius: '0',\n              borderBottomRightRadius: '0',\n            },\n          '& .MuiButtonBase-root.MuiCheckbox-root.MuiCheckbox-colorPrimary:not(.Mui-checked)': {\n            color: b3HexToRgb(customColor, 0.6),\n          },\n          '& .MuiTypography-root.MuiTypography-body1.MuiFormControlLabel-label': {\n            color: b3HexToRgb(customColor, 0.87),\n          },\n        }}\n      >\n        <InformationFourLabels>{contactInformationLabel}</InformationFourLabels>\n        <B3CustomForm\n          formFields={contactInfo}\n          errors={errors}\n          control={control}\n          getValues={getValues}\n          setValue={setValue}\n        />\n      </Box>\n      <Box />\n      {additionalInfo && additionalInfo.length ? (\n        <Box\n          sx={{\n            '& h4': {\n              color: customColor,\n            },\n            '& .MuiFormControlLabel-label, & .MuiFormControl-root .MuiFormLabel-root:not(.Mui-focused)':\n              {\n                color: b3HexToRgb(customColor, 0.87),\n              },\n            '& .MuiRadio-root:not(.Mui-checked)': {\n              color: b3HexToRgb(customColor, 0.6),\n            },\n          }}\n        >\n          <InformationFourLabels>{additionalInformationLabel}</InformationFourLabels>\n          <B3CustomForm\n            formFields={additionalInfo}\n            errors={errors}\n            control={control}\n            getValues={getValues}\n            setValue={setValue}\n          />\n        </Box>\n      ) : (\n        ''\n      )}\n\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          pt: 2,\n        }}\n      >\n        <PrimaryButton onClick={handleAccountToDetail}>\n          {b3Lang('global.button.next')}\n        </PrimaryButton>\n      </Box>\n    </Box>\n  );\n}\n","import { MouseEvent, useCallback, useContext, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useB3Lang } from '@b3/lang';\nimport { Alert, Box } from '@mui/material';\nimport isEmpty from 'lodash-es/isEmpty';\n\nimport { B3CustomForm } from '@/components';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport { Country, State, validateExtraFields } from './config';\nimport { PrimaryButton } from './PrimaryButton';\nimport { InformationFourLabels, TipContent } from './styled';\nimport { RegisterFields } from './types';\n\ninterface RegisteredDetailProps {\n  handleBack: () => void;\n  handleNext: () => void;\n}\n\nexport default function RegisteredDetail({ handleBack, handleNext }: RegisteredDetailProps) {\n  const b3Lang = useB3Lang();\n\n  const { state, dispatch } = useContext(RegisteredContext);\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const {\n    accountType = '1',\n    companyInformation = [],\n    companyAttachment = [],\n    addressBasicFields = [],\n    bcAddressBasicFields = [],\n    countryList = [],\n  } = state;\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setValue,\n    watch,\n    setError,\n  } = useForm({\n    mode: 'all',\n  });\n  const businessDetailsName = accountType === '1' ? companyInformation[0]?.groupName : '';\n\n  const addressBasicName = accountType === '1' ? 'addressBasicFields' : 'bcAddressBasicFields';\n  const addressBasicList = accountType === '1' ? addressBasicFields : bcAddressBasicFields;\n\n  const addressName = addressBasicList[0]?.groupName || '';\n\n  const handleCountryChange = useCallback(\n    (countryCode: string, stateCode = '') => {\n      const stateList =\n        countryList.find(\n          (country: Country) =>\n            country.countryCode === countryCode || country.countryName === countryCode,\n        )?.states || [];\n      const stateFields = addressBasicList.find(\n        (formFields: RegisterFields) => formFields.name === 'state',\n      );\n\n      if (stateFields) {\n        if (stateList.length > 0) {\n          stateFields.fieldType = 'dropdown';\n          stateFields.options = stateList;\n          stateFields.required = true;\n        } else {\n          stateFields.fieldType = 'text';\n          stateFields.options = [];\n          stateFields.required = false;\n        }\n      }\n\n      setValue(\n        'state',\n        stateCode &&\n          countryCode &&\n          (stateList.find((state: State) => state.stateName === stateCode) ||\n            stateList.length === 0)\n          ? stateCode\n          : '',\n      );\n\n      dispatch({\n        type: 'stateList',\n        payload: {\n          stateList,\n          addressBasicFields,\n          bcAddressBasicFields,\n          [addressBasicName]: [...addressBasicList],\n        },\n      });\n    },\n    // disabling as we don't need dispatchers here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [addressBasicFields, addressBasicList, addressBasicName, bcAddressBasicFields, countryList],\n  );\n\n  useEffect(() => {\n    const countryValue = getValues('country');\n    const stateValue = getValues('state');\n    handleCountryChange(countryValue, stateValue);\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      const { country, state } = value;\n\n      if (name === 'country' && type === 'change') {\n        handleCountryChange(country, state);\n      }\n    });\n    return () => subscription.unsubscribe();\n    // disabling as we don't need watch in the dependency array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countryList, handleCountryChange]);\n\n  const showLoading = (isShow = false) => {\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: isShow,\n      },\n    });\n  };\n\n  const setRegisterFieldsValue = (formFields: Array<RegisterFields>, formData: CustomFieldItems) =>\n    formFields.map((field) => {\n      const item = field;\n      item.default = formData[field.name] || field.default;\n      return field;\n    });\n\n  interface DetailsFormValues {\n    [K: string]: string | number | boolean;\n  }\n\n  const saveDetailsData = () => {\n    const data = [...companyInformation, ...companyAttachment, ...addressBasicList].reduce(\n      (formValues: DetailsFormValues, field: RegisterFields) => {\n        const values = formValues;\n        values[field.name] = getValues(field.name) || field.default;\n\n        return formValues;\n      },\n      {},\n    );\n\n    const newCompanyInformation = setRegisterFieldsValue(companyInformation, data);\n    const newCompanyAttachment = setRegisterFieldsValue(companyAttachment, data);\n    const newAddressBasicFields = setRegisterFieldsValue(addressBasicList, data);\n\n    dispatch({\n      type: 'all',\n      payload: {\n        companyInformation: [...newCompanyInformation],\n        companyAttachment: [...newCompanyAttachment],\n        [addressBasicName]: [...newAddressBasicFields],\n      },\n    });\n  };\n\n  const handleValidateAttachmentFiles = () => {\n    if (accountType === '1') {\n      const formData = getValues();\n      const attachmentsFilesFiled = companyInformation.find(\n        (info) => info.fieldId === 'field_attachments',\n      );\n      if (\n        !isEmpty(attachmentsFilesFiled) &&\n        attachmentsFilesFiled.required &&\n        formData[attachmentsFilesFiled.name].length === 0\n      ) {\n        setError(attachmentsFilesFiled.name, {\n          type: 'required',\n          message: b3Lang('global.validate.required', {\n            label: attachmentsFilesFiled.label ?? '',\n          }),\n        });\n\n        showLoading(false);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const handleAccountToFinish = (event: MouseEvent) => {\n    const hasAttachmentsFilesError = handleValidateAttachmentFiles();\n\n    handleSubmit(async (data: CustomFieldItems) => {\n      if (hasAttachmentsFilesError) return;\n      showLoading(true);\n      try {\n        if (accountType === '1') {\n          await Promise.all([\n            validateExtraFields({\n              fields: companyInformation,\n              data,\n              type: 'company',\n              setError,\n            }),\n            validateExtraFields({\n              fields: addressBasicFields,\n              data,\n              type: 'address',\n              setError,\n            }),\n          ]);\n\n          setErrorMessage('');\n        }\n\n        saveDetailsData();\n\n        showLoading(false);\n        handleNext();\n      } catch (error) {\n        if (typeof error === 'string') {\n          setErrorMessage(error);\n        }\n        showLoading(false);\n      }\n    })(event);\n  };\n\n  const handleBackAccount = () => {\n    saveDetailsData();\n\n    handleBack();\n  };\n\n  return (\n    <Box\n      sx={{\n        pl: 1,\n        pr: 1,\n        mt: 2,\n        width: '100%',\n        '& h4': {\n          color: customColor,\n        },\n        '& input, & .MuiFormControl-root .MuiTextField-root, & .MuiDropzoneArea-textContainer, & .MuiSelect-select.MuiSelect-filled, & .MuiTextField-root .MuiInputBase-multiline':\n          {\n            borderRadius: '4px',\n            borderBottomLeftRadius: '0',\n            borderBottomRightRadius: '0',\n          },\n      }}\n    >\n      {errorMessage && (\n        <Alert severity=\"error\">\n          <TipContent>{errorMessage}</TipContent>\n        </Alert>\n      )}\n      {accountType === '1' ? (\n        <Box>\n          <InformationFourLabels>{businessDetailsName}</InformationFourLabels>\n          <B3CustomForm\n            formFields={[...companyInformation]}\n            errors={errors}\n            control={control}\n            getValues={getValues}\n            setValue={setValue}\n            setError={setError}\n          />\n        </Box>\n      ) : null}\n\n      <Box>\n        <InformationFourLabels>{addressName}</InformationFourLabels>\n\n        <B3CustomForm\n          formFields={addressBasicList}\n          errors={errors}\n          control={control}\n          getValues={getValues}\n          setValue={setValue}\n        />\n      </Box>\n\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-end',\n          pt: 2,\n          gap: 1,\n        }}\n      >\n        <PrimaryButton onClick={handleBackAccount}>{b3Lang('global.button.back')}</PrimaryButton>\n        <PrimaryButton onClick={handleAccountToFinish}>\n          {b3Lang('global.button.next')}\n        </PrimaryButton>\n      </Box>\n    </Box>\n  );\n}\n","import { ReactNode } from 'react';\nimport styled from '@emotion/styled';\nimport { Box } from '@mui/material';\n\nimport RegisterComplete from './RegisterComplete';\nimport RegisteredAccount from './RegisteredAccount';\nimport RegisteredDetail from './RegisteredDetail';\nimport RegisteredFinish from './RegisteredFinish';\n\ninterface RegisterContentProps {\n  activeStep: number;\n  handleBack: () => void;\n  handleNext: () => void;\n  handleFinish: () => void;\n}\n\nexport const StyledRegisterContent = styled(Box)({\n  '& #b3-customForm-id-name': {\n    '& label[data-shrink=\"true\"]': {\n      whiteSpace: 'break-spaces',\n      minWidth: 'calc(133% - 24px)',\n      transition: 'unset',\n    },\n\n    '& label[data-shrink=\"false\"]': {\n      whiteSpace: 'break-spaces',\n    },\n  },\n});\n\nexport default function RegisterContent({\n  activeStep,\n  handleBack,\n  handleNext,\n  handleFinish,\n}: RegisterContentProps) {\n  const renderStep = (step: number): ReactNode => {\n    switch (step) {\n      case 0:\n        return <RegisteredAccount handleNext={handleNext} />;\n\n      case 1:\n        return <RegisteredDetail handleBack={handleBack} handleNext={handleNext} />;\n\n      case 2:\n        return <RegisterComplete handleBack={handleBack} handleNext={handleNext} />;\n\n      case 3:\n        return <RegisteredFinish handleFinish={handleFinish} />;\n\n      default:\n        return null;\n    }\n  };\n\n  return <StyledRegisterContent component=\"div\">{renderStep(activeStep)}</StyledRegisterContent>;\n}\n","import { ReactNode, useContext } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, Step, StepLabel, Stepper, useTheme } from '@mui/material';\n\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport { useMobile } from '@/hooks';\nimport { B3SStorage } from '@/utils';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport { steps } from './config';\n\ninterface RegisteredStepProps {\n  children: ReactNode;\n  activeStep: number;\n  backgroundColor: string;\n}\n\nexport default function RegisteredStep(props: RegisteredStepProps) {\n  const { children, activeStep, backgroundColor } = props;\n\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n  const theme = useTheme();\n\n  const { state } = useContext(RegisteredContext);\n  const { accountType, submitSuccess, isAutoApproval } = state;\n  const blockPendingAccountOrderCreation =\n    B3SStorage.get('blockPendingAccountOrderCreation') && !isAutoApproval;\n  const registerCompleteText = blockPendingAccountOrderCreation\n    ? b3Lang('register.title.registerCompleteWarning')\n    : b3Lang('register.title.registerComplete');\n\n  const newPageTitle =\n    accountType === '1' ? registerCompleteText : b3Lang('register.title.accountCreated');\n\n  const customColor = getContrastColor(backgroundColor);\n  return (\n    <Box\n      component=\"div\"\n      sx={{\n        width: isMobile ? '100%' : '537px',\n        boxShadow:\n          '0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 1px 3px rgba(0, 0, 0, 0.12)',\n        borderRadius: '4px',\n        marginTop: '1rem',\n        background: '#FFFFFF',\n        padding: '0 0.8rem 1rem 0.8rem',\n      }}\n    >\n      <Box\n        component=\"h3\"\n        sx={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'center',\n          pt: 2,\n          fontSize: '24px',\n          fontWeight: '400',\n          margin: '0.5rem 0',\n          color: customColor,\n        }}\n      >\n        {submitSuccess ? newPageTitle : b3Lang('register.title.accountRegister')}\n      </Box>\n      {!submitSuccess && (\n        <Stepper\n          activeStep={activeStep}\n          sx={{\n            '& .MuiSvgIcon-root:not(.Mui-active) .MuiStepIcon-text': {\n              fill: getContrastColor(customColor),\n            },\n            '& .MuiSvgIcon-root.Mui-active .MuiStepIcon-text': {\n              fill: getContrastColor(theme.palette.primary.main),\n            },\n          }}\n        >\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{b3Lang(label)}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n      )}\n      {children}\n    </Box>\n  );\n}\n","import { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, ImageListItem } from '@mui/material';\n\nimport { B3Card } from '@/components';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { LOGIN_LANDING_LOCATIONS } from '@/constants';\nimport { useMobile, useScrollBar } from '@/hooks';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { GlobalContext } from '@/shared/global';\nimport { getB2BAccountFormFields, getB2BCountries } from '@/shared/service/b2b';\nimport { bcLogin } from '@/shared/service/bc';\nimport { themeFrameSelector, useAppSelector } from '@/store';\nimport { B3SStorage, loginJump, platform } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport { getCurrentCustomerInfo } from '@/utils/loginInfo';\n\nimport { loginCheckout, LoginConfig } from '../Login/config';\nimport { type PageProps } from '../PageProps';\n\nimport { RegisteredContext } from './context/RegisteredContext';\nimport {\n  AccountFormFieldsItems,\n  b2bAddressRequiredFields,\n  companyAttachmentsFields,\n  getAccountFormFields,\n  RegisterFieldsItems,\n} from './config';\nimport RegisterContent from './RegisterContent';\nimport RegisteredStep from './RegisteredStep';\nimport { RegisteredContainer, RegisteredImage } from './styled';\nimport { RegisterFields } from './types';\n\n// 1 bc 2 b2b\nconst formType: Array<number> = [1, 2];\n\nfunction Registered(props: PageProps) {\n  const { setOpenPage } = props;\n\n  const [activeStep, setActiveStep] = useState(0);\n\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n\n  const navigate = useNavigate();\n\n  const IframeDocument = useAppSelector(themeFrameSelector);\n\n  const {\n    state: { isCheckout, isCloseGotoBCHome, logo, storeName, registerEnabled },\n  } = useContext(GlobalContext);\n\n  const {\n    state: {\n      isLoading,\n      accountType,\n      contactInformation = [],\n      passwordInformation = [],\n      bcPasswordInformation = [],\n      bcContactInformation = [],\n    },\n    dispatch,\n  } = useContext(RegisteredContext);\n\n  const {\n    state: {\n      accountLoginRegistration,\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  useEffect(() => {\n    if (!registerEnabled) {\n      navigate('/login');\n    }\n  }, [navigate, registerEnabled]);\n\n  useEffect(() => {\n    const getBCAdditionalFields = async () => {\n      try {\n        if (dispatch) {\n          dispatch({\n            type: 'loading',\n            payload: {\n              isLoading: true,\n            },\n          });\n          dispatch({\n            type: 'finishInfo',\n            payload: {\n              submitSuccess: false,\n            },\n          });\n        }\n\n        const accountFormAllFields = formType.map((item: number) => getB2BAccountFormFields(item));\n\n        const accountFormFields = await Promise.all(accountFormAllFields);\n\n        const newB2bAccountFormFields: AccountFormFieldsItems[] = (\n          accountFormFields[1]?.accountFormFields || []\n        ).map((fields: AccountFormFieldsItems) => {\n          const formFields = fields;\n          if (b2bAddressRequiredFields.includes(fields?.fieldId || '') && fields.groupId === 4) {\n            formFields.isRequired = true;\n            formFields.visible = true;\n          }\n\n          return fields;\n        });\n\n        const bcAccountFormFields = getAccountFormFields(\n          accountFormFields[0]?.accountFormFields || [],\n        );\n        const b2bAccountFormFields = getAccountFormFields(newB2bAccountFormFields || []);\n\n        const { countries } = await getB2BCountries();\n\n        const newAddressInformationFields =\n          b2bAccountFormFields.address?.map(\n            (addressFields: Partial<RegisterFieldsItems>): Partial<RegisterFieldsItems> => {\n              const fields = addressFields;\n              if (addressFields.name === 'country') {\n                fields.options = countries;\n                fields.replaceOptions = {\n                  label: 'countryName',\n                  value: 'countryName',\n                };\n              }\n              return addressFields;\n            },\n          ) || [];\n\n        const newBCAddressInformationFields =\n          bcAccountFormFields.address?.map(\n            (addressFields: Partial<RegisterFieldsItems>): Partial<RegisterFieldsItems> => {\n              const addressFormFields = addressFields;\n              if (addressFields.name === 'country') {\n                addressFormFields.options = countries;\n                const countryDefaultValue = countries.find(\n                  (country: CustomFieldItems) => country.countryName === addressFields.default,\n                );\n                addressFormFields.default =\n                  countryDefaultValue?.countryCode || addressFields.default;\n              }\n              return addressFields;\n            },\n          ) || [];\n        // accountLoginRegistration\n        const { b2b, b2c } = accountLoginRegistration;\n        const accountB2cEnabledInfo = b2c && !b2b;\n        if (dispatch) {\n          dispatch({\n            type: 'all',\n            payload: {\n              accountType: accountB2cEnabledInfo ? '2' : '1',\n              isLoading: false,\n              storeName,\n              // account\n              contactInformation: [...(b2bAccountFormFields.contactInformation || [])],\n              bcContactInformation: [...(bcAccountFormFields.contactInformation || [])],\n              additionalInformation: [...(b2bAccountFormFields.additionalInformation || [])],\n              bcAdditionalInformation: [...(bcAccountFormFields.additionalInformation || [])],\n              // detail\n              companyExtraFields: [],\n              companyInformation: [...(b2bAccountFormFields?.businessDetails || [])],\n              companyAttachment: [...companyAttachmentsFields(b3Lang)],\n              addressBasicFields: [...newAddressInformationFields],\n              bcAddressBasicFields: [...newBCAddressInformationFields],\n              countryList: [...countries],\n              // password\n              passwordInformation: [...(b2bAccountFormFields.password || [])],\n              bcPasswordInformation: [...(bcAccountFormFields.password || [])],\n            },\n          });\n        }\n      } catch (e) {\n        b2bLogger.error(e);\n      }\n    };\n\n    getBCAdditionalFields();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getLoginData = () => {\n    const emailAddress =\n      ((accountType === '1' ? contactInformation : bcContactInformation).find(\n        (field: RegisterFields) => field.name === 'email',\n      )?.default as string) || '';\n\n    const password =\n      ((accountType === '1' ? passwordInformation : bcPasswordInformation).find(\n        (field: RegisterFields) => field.name === 'password',\n      )?.default as string) || '';\n\n    return {\n      emailAddress,\n      password,\n    };\n  };\n  const handleNext = async () => {\n    setActiveStep((prevActiveStep: number) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep: number) => prevActiveStep - 1);\n  };\n\n  const clearRegisterInfo = () => {\n    if (dispatch) {\n      dispatch({\n        type: 'all',\n        payload: {\n          accountType: '',\n          isLoading: false,\n          storeName: '',\n          submitSuccess: false,\n          contactInformation: [],\n          additionalInformation: [],\n          companyExtraFields: [],\n          companyInformation: [],\n          companyAttachment: [],\n          addressBasicFields: [],\n          addressExtraFields: [],\n          countryList: [],\n          passwordInformation: [],\n        },\n      });\n    }\n  };\n\n  const handleFinish = async () => {\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: true,\n      },\n    });\n\n    const data: LoginConfig = getLoginData();\n\n    if (isCheckout) {\n      try {\n        await loginCheckout(data);\n        window.location.reload();\n      } catch (error) {\n        b2bLogger.error(error);\n      }\n    } else {\n      try {\n        const getBCFieldsValue = {\n          email: data.emailAddress,\n          pass: data.password,\n        };\n\n        const { data: bcData } = await bcLogin(getBCFieldsValue);\n\n        if (bcData?.login?.customer) {\n          B3SStorage.set('loginCustomer', {\n            emailAddress: bcData.login.customer.email,\n            phoneNumber: bcData.login.customer.phone,\n            ...bcData.login.customer,\n          });\n        }\n\n        await getCurrentCustomerInfo();\n\n        clearRegisterInfo();\n\n        const isLoginLandLocation = loginJump(navigate);\n\n        if (platform === 'catalyst') {\n          const landingLoginLocation = isLoginLandLocation\n            ? LOGIN_LANDING_LOCATIONS.HOME\n            : LOGIN_LANDING_LOCATIONS.BUYER_PORTAL;\n\n          window.b2b.callbacks.dispatchEvent('on-registered', {\n            email: data.emailAddress,\n            password: data.password,\n            landingLoginLocation,\n          });\n          window.location.hash = '';\n          return;\n        }\n\n        if (!isLoginLandLocation) return;\n\n        if (isCloseGotoBCHome) {\n          window.location.href = '/';\n        } else {\n          navigate('/orders');\n        }\n      } catch (error) {\n        b2bLogger.error(error);\n      }\n    }\n\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: false,\n      },\n    });\n  };\n\n  useEffect(() => {\n    IframeDocument?.body.scrollIntoView(true);\n    // disabling as we only need to run this when activeStep changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeStep]);\n\n  useScrollBar(false);\n\n  return (\n    <B3Card setOpenPage={setOpenPage}>\n      <RegisteredContainer isMobile={isMobile}>\n        <B3Spin isSpinning={isLoading} tip={b3Lang('global.tips.loading')} transparency=\"0\">\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              width: '100%',\n              alignItems: 'center',\n            }}\n          >\n            {logo && (\n              <RegisteredImage>\n                <ImageListItem\n                  sx={{\n                    maxWidth: '250px',\n                  }}\n                  onClick={() => {\n                    window.location.href = '/';\n                  }}\n                >\n                  <img src={logo} alt={b3Lang('global.tips.registerLogo')} loading=\"lazy\" />\n                </ImageListItem>\n              </RegisteredImage>\n            )}\n            <RegisteredStep activeStep={activeStep} backgroundColor={backgroundColor}>\n              <RegisterContent\n                activeStep={activeStep}\n                handleBack={handleBack}\n                handleNext={handleNext}\n                handleFinish={handleFinish}\n              />\n            </RegisteredStep>\n          </Box>\n        </B3Spin>\n      </RegisteredContainer>\n    </B3Card>\n  );\n}\n\nexport default Registered;\n"],"names":["RegisterComplete","props","b3Lang","useB3Lang","handleBack","handleNext","personalInfo","setPersonalInfo","useState","errorMessage","setErrorMessage","enterEmail","setEnterEmail","captchaKey","setCaptchaKey","isEnabledOnStorefront","setIsEnabledOnStorefront","storefrontSiteKey","setStorefrontSiteKey","isCaptchaMissing","setIsCaptchaMissing","handleGetCaptchaKey","key","useEffect","response","getStorefrontToken","e","b2bLogger","control","handleSubmit","setError","errors","useForm","state","dispatch","useContext","RegisteredContext","blockPendingAccountOrderCreation","GlobalContext","backgroundColor","CustomStyleContext","customColor","getContrastColor","contactInformation","bcContactInformation","passwordInformation","bcPasswordInformation","accountType","additionalInformation","bcAdditionalInformation","addressBasicFields","bcAddressBasicFields","companyInformation","emailMarketingNewsletter","list","passwordInfo","passwordName","_a","additionalInfo","addressBasicList","emailFields","item","getBCFieldsValue","data","bcFields","name","deCodeField","field","channelId","addresses","getBCAddressField","getBCExtraAddressField","userItem","storeHash","createBCCompanyUser","getB2BFieldsValue","_","customerId","fileList","b2bFields","companyUserExtraFieldsList","companyUserExtraFields","itemExtraField","companyInfo","companyExtraInfo","toHump","extraFields","addressBasicInfo","addressExtraBasicInfo","createB2BCompanyUser","error","getFileUrl","attachmentsList","attachments","file","uploadB2BFile","res","newData","saveRegisterPassword","newPasswordInformation","registerField","newBcPasswordInformation","handleSendSubscribersState","emailMe","firstName","lastName","isChecked","defaultValue","sendSubscribersState","err","handleCompleted","event","completeData","isAuto","accountInfo","companyStatus","_b","jsxs","Box","Alert","jsx","TipContent","InformationFourLabels","Fragment","B3CustomForm","Typography","Captcha","PrimaryButton","RegisteredAccount","IframeDocument","useAppSelector","themeFrameSelector","accountLoginRegistration","errorTips","setErrorTips","getValues","setValue","additionName","newContactInformation","contactInfo","info","contactName","contactInformationLabel","additionalInformationLabel","showLoading","isShow","handleChange","emailName","_c","validateEmailValue","email","isRegisterAsB2BUser","isValid","userType","companyName","checkUserEmail","checkUserBCEmail","emailError","handleAccountToDetail","newContactInfo","newContactItem","extraCompanyUserInformation","Base64","validateBCCompanyUserExtraFields","message","messageArr","newAdditionalInformation","additionalInfoItem","FormControl","RadioGroup","b3HexToRgb","FormControlLabel","Radio","RegisteredDetail","companyAttachment","countryList","watch","businessDetailsName","addressBasicName","addressName","handleCountryChange","useCallback","countryCode","stateCode","stateList","country","stateFields","formFields","countryValue","stateValue","subscription","value","type","setRegisterFieldsValue","formData","saveDetailsData","formValues","values","newCompanyInformation","newCompanyAttachment","newAddressBasicFields","handleValidateAttachmentFiles","attachmentsFilesFiled","isEmpty","handleAccountToFinish","hasAttachmentsFilesError","validateExtraFields","handleBackAccount","StyledRegisterContent","styled","RegisterContent","activeStep","handleFinish","renderStep","step","RegisteredFinish","RegisteredStep","children","isMobile","useMobile","theme","useTheme","submitSuccess","isAutoApproval","B3SStorage","registerCompleteText","newPageTitle","Stepper","steps","label","Step","StepLabel","formType","Registered","setOpenPage","setActiveStep","navigate","useNavigate","isCheckout","isCloseGotoBCHome","logo","storeName","registerEnabled","isLoading","accountFormAllFields","getB2BAccountFormFields","accountFormFields","newB2bAccountFormFields","fields","b2bAddressRequiredFields","bcAccountFormFields","getAccountFormFields","b2bAccountFormFields","countries","getB2BCountries","newAddressInformationFields","addressFields","newBCAddressInformationFields","_d","addressFormFields","countryDefaultValue","b2b","b2c","companyAttachmentsFields","getLoginData","emailAddress","password","prevActiveStep","clearRegisterInfo","loginCheckout","bcData","bcLogin","getCurrentCustomerInfo","isLoginLandLocation","loginJump","platform","landingLoginLocation","LOGIN_LANDING_LOCATIONS","useScrollBar","B3Card","RegisteredContainer","B3Spin","RegisteredImage","ImageListItem"],"mappings":"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"}