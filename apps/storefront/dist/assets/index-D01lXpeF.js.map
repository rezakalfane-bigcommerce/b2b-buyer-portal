{"version":3,"file":"index-D01lXpeF.js","sources":["../../src/pages/RegisteredBCToB2B/index.tsx"],"sourcesContent":["import { MouseEvent, useContext, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { useB3Lang } from '@b3/lang';\nimport styled from '@emotion/styled';\nimport { Alert, Box, ImageListItem } from '@mui/material';\nimport isEmpty from 'lodash-es/isEmpty';\n\nimport { B3Card, B3CustomForm } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { useMobile } from '@/hooks';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { GlobalContext } from '@/shared/global';\nimport { useAppSelector } from '@/store';\nimport { channelId, loginJump, storeHash } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport { getCurrentCustomerInfo } from '@/utils/loginInfo';\n\nimport {\n  createB2BCompanyUser,\n  getB2BAccountFormFields,\n  getB2BCountries,\n  uploadB2BFile,\n  validateBCCompanyExtraFields,\n  validateBCCompanyUserExtraFields,\n} from '../../shared/service/b2b';\nimport { type PageProps } from '../PageProps';\nimport {\n  AccountFormFieldsItems,\n  b2bAddressRequiredFields,\n  Base64,\n  Country,\n  deCodeField,\n  getAccountFormFields,\n  RegisterFieldsItems,\n  State,\n  toHump,\n} from '../Registered/config';\nimport { RegisteredContext } from '../Registered/context/RegisteredContext';\nimport RegisteredFinish from '../Registered/RegisteredFinish';\nimport {\n  InformationFourLabels,\n  InformationLabels,\n  RegisteredContainer,\n  RegisteredImage,\n  TipContent,\n} from '../Registered/styled';\nimport { RegisterFields } from '../Registered/types';\n\ninterface CustomerInfo {\n  [k: string]: string;\n}\n\nexport const StyledRegisterContent = styled(Box)({\n  '& #b3-customForm-id-name': {\n    '& label[data-shrink=\"true\"]': {\n      whiteSpace: 'break-spaces',\n      minWidth: 'calc(133% - 24px)',\n      transition: 'unset',\n    },\n\n    '& label[data-shrink=\"false\"]': {\n      whiteSpace: 'break-spaces',\n    },\n  },\n});\n\nexport default function RegisteredBCToB2B(props: PageProps) {\n  const [errorMessage, setErrorMessage] = useState('');\n  const [showFinishPage, setShowFinishPage] = useState<boolean>(false);\n\n  const { setOpenPage } = props;\n\n  const b3Lang = useB3Lang();\n  const [isMobile] = useMobile();\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setValue,\n    setError,\n    watch,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const {\n    state: { storeName, logo, blockPendingAccountOrderCreation, registerEnabled },\n  } = useContext(GlobalContext);\n\n  const navigate = useNavigate();\n\n  const customer = useAppSelector(({ company }) => company.customer);\n  const { id: customerId, firstName, lastName, emailAddress, phoneNumber } = customer;\n  const { state, dispatch } = useContext(RegisteredContext);\n\n  const {\n    state: {\n      companyAutoApproval,\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const customColor = getContrastColor(backgroundColor);\n\n  const showLoading = (isShow = false) => {\n    dispatch({\n      type: 'loading',\n      payload: {\n        isLoading: isShow,\n      },\n    });\n  };\n\n  useEffect(() => {\n    showLoading(false);\n    if (!registerEnabled) {\n      navigate('/login');\n    }\n    // disabling this rule as we don't need to add showLoading dispatcher and navigate fn into the dep array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [registerEnabled]);\n\n  useEffect(() => {\n    const getBCAdditionalFields = async () => {\n      try {\n        if (dispatch) {\n          showLoading(true);\n          dispatch({\n            type: 'finishInfo',\n            payload: {\n              submitSuccess: false,\n            },\n          });\n        }\n\n        const accountFormAllFields = await getB2BAccountFormFields(3);\n\n        const newAccountFormFields: AccountFormFieldsItems[] = (\n          accountFormAllFields?.accountFormFields || []\n        ).map((fields: AccountFormFieldsItems) => {\n          const accountFields = fields;\n          if (b2bAddressRequiredFields.includes(fields?.fieldId || '') && fields.groupId === 4) {\n            accountFields.isRequired = true;\n            accountFields.visible = true;\n          }\n\n          return fields;\n        });\n\n        const bcToB2BAccountFormFields = getAccountFormFields(newAccountFormFields || []);\n        const { countries } = await getB2BCountries();\n\n        const newAddressInformationFields = bcToB2BAccountFormFields.address.map(\n          (addressFields: Partial<RegisterFieldsItems>): Partial<RegisterFieldsItems> => {\n            const fields = addressFields;\n            if (addressFields.name === 'country') {\n              fields.options = countries;\n              fields.replaceOptions = {\n                label: 'countryName',\n                value: 'countryName',\n              };\n            }\n            return addressFields;\n          },\n        );\n\n        const customerInfo: CustomerInfo = {\n          phone: phoneNumber,\n          first_name: firstName,\n          last_name: lastName,\n          email: emailAddress,\n        };\n\n        const newContactInformation = bcToB2BAccountFormFields.contactInformation.map(\n          (contactInformationField: Partial<RegisterFieldsItems>): Partial<RegisterFieldsItems> => {\n            const field = contactInformationField;\n            field.disabled = true;\n\n            field.default =\n              customerInfo[deCodeField(contactInformationField.name as string)] ||\n              contactInformationField.default;\n\n            if (contactInformationField.required && !contactInformationField?.default) {\n              field.disabled = false;\n            }\n\n            return contactInformationField;\n          },\n        );\n\n        if (dispatch) {\n          dispatch({\n            type: 'all',\n            payload: {\n              isLoading: false,\n              storeName,\n              bcTob2bContactInformation: [...newContactInformation],\n              bcTob2bCompanyExtraFields: [],\n              bcTob2bCompanyInformation: [...bcToB2BAccountFormFields.businessDetails],\n              bcTob2bAddressBasicFields: [...newAddressInformationFields],\n              countryList: [...countries],\n            },\n          });\n        }\n      } catch (e) {\n        b2bLogger.error(e);\n      }\n    };\n\n    getBCAdditionalFields();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const {\n    bcTob2bContactInformation,\n    isLoading,\n    bcTob2bCompanyInformation = [],\n    bcTob2bAddressBasicFields = [],\n    countryList = [],\n    bcTob2bCompanyExtraFields = [],\n  } = state;\n\n  useEffect(() => {\n    const handleCountryChange = (countryCode: string, stateCode = '') => {\n      const stateList =\n        countryList.find(\n          (country: Country) =>\n            country.countryCode === countryCode || country.countryName === countryCode,\n        )?.states || [];\n      const stateFields = bcTob2bAddressBasicFields.find(\n        (formFields: RegisterFields) => formFields.name === 'state',\n      );\n\n      if (stateFields) {\n        if (stateList.length > 0) {\n          stateFields.fieldType = 'dropdown';\n          stateFields.options = stateList;\n          stateFields.required = true;\n        } else {\n          stateFields.fieldType = 'text';\n          stateFields.options = [];\n          stateFields.required = false;\n        }\n      }\n\n      setValue(\n        'state',\n        stateCode &&\n          countryCode &&\n          (stateList.find((state: State) => state.stateCode === stateCode) ||\n            stateList.length === 0)\n          ? stateCode\n          : '',\n      );\n\n      dispatch({\n        type: 'stateList',\n        payload: {\n          stateList,\n          bcTob2bAddressBasicFields: [...bcTob2bAddressBasicFields],\n        },\n      });\n    };\n\n    const handleInitCountryAndState = () => {\n      const countryValue = getValues('country');\n      const stateValue = getValues('state');\n      handleCountryChange(countryValue, stateValue);\n    };\n    handleInitCountryAndState();\n\n    const subscription = watch((value, { name, type }) => {\n      const { country, state } = value;\n      if (name === 'country' && type === 'change') {\n        handleCountryChange(country, state);\n      }\n    });\n    return () => subscription.unsubscribe();\n    // disabling as we only need to run this when countryList changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countryList]);\n\n  const getFileUrl = async (attachmentsList: RegisterFields[], data: CustomFieldItems) => {\n    let attachments: File[] = [];\n\n    if (!attachmentsList.length) return undefined;\n\n    attachmentsList.forEach((field: any) => {\n      attachments = data[field.name] || [];\n    });\n\n    try {\n      const fileResponse = await Promise.all(\n        attachments.map((file: File) =>\n          uploadB2BFile({\n            file,\n            type: 'companyAttachedFile',\n          }),\n        ),\n      );\n\n      const fileList = fileResponse.reduce((fileList: any, res: any) => {\n        let list = fileList;\n        if (res.code === 200) {\n          const newData = {\n            ...res.data,\n          };\n          newData.fileSize = newData.fileSize ? `${newData.fileSize}` : '';\n          list = [...fileList, newData];\n        } else {\n          throw (\n            res.data.errMsg || res.message || b3Lang('intl.global.fileUpload.fileUploadFailure')\n          );\n        }\n        return list;\n      }, []);\n\n      return fileList;\n    } catch (error) {\n      b2bLogger.error(error);\n      throw error;\n    }\n  };\n\n  const getB2BFieldsValue = async (\n    data: CustomFieldItems,\n    customerId: number | string,\n    fileList: any,\n    companyUserExtraFields: CustomFieldItems[],\n  ) => {\n    const b2bFields: CustomFieldItems = {};\n\n    b2bFields.customerId = customerId || '';\n    b2bFields.storeHash = storeHash;\n    b2bFields.userExtraFields = companyUserExtraFields;\n    const companyInfo = bcTob2bCompanyInformation.filter(\n      (list) => !list.custom && list.fieldType !== 'files',\n    );\n    const companyExtraInfo = bcTob2bCompanyInformation.filter((list) => !!list.custom);\n    // company field\n    if (companyInfo.length) {\n      companyInfo.forEach((item: any) => {\n        b2bFields[toHump(deCodeField(item.name))] = data[item.name] || '';\n      });\n    }\n\n    // Company Additional Field\n    if (companyExtraInfo.length) {\n      const extraFields: Array<CustomFieldItems> = [];\n      companyExtraInfo.forEach((item: CustomFieldItems) => {\n        const itemExtraField: CustomFieldItems = {};\n        itemExtraField.fieldName = deCodeField(item.name);\n        itemExtraField.fieldValue = data[item.name] || '';\n        extraFields.push(itemExtraField);\n      });\n      b2bFields.extraFields = extraFields;\n    }\n\n    // address Field\n    const addressBasicInfo = bcTob2bAddressBasicFields.filter((list) => !list.custom);\n    const addressExtraBasicInfo = bcTob2bAddressBasicFields.filter((list) => !!list.custom);\n\n    if (addressBasicInfo.length) {\n      addressBasicInfo.forEach((field: CustomFieldItems) => {\n        const name = deCodeField(field.name);\n        if (name === 'address1') {\n          b2bFields.addressLine1 = data[field.name] || '';\n        }\n        if (name === 'address2') {\n          b2bFields.addressLine2 = data[field.name] || '';\n        }\n        b2bFields[name] = data[field.name] || '';\n      });\n    }\n\n    // address Additional Field\n    if (addressExtraBasicInfo.length) {\n      const extraFields: Array<CustomFieldItems> = [];\n      addressExtraBasicInfo.forEach((item: CustomFieldItems) => {\n        const itemExtraField: CustomFieldItems = {};\n        itemExtraField.fieldName = deCodeField(item.name);\n        itemExtraField.fieldValue = data[item.name] || '';\n        extraFields.push(itemExtraField);\n      });\n      b2bFields.addressExtraFields = extraFields;\n    }\n    b2bFields.fileList = fileList;\n    b2bFields.channelId = channelId;\n\n    return createB2BCompanyUser(b2bFields);\n  };\n\n  const validateCompanyExtraFieldsUnique = async (data: CustomFieldItems) => {\n    try {\n      const extraCompanyInformation = bcTob2bCompanyInformation.filter(\n        (item: RegisterFields) => !!item.custom,\n      );\n      const extraFields = extraCompanyInformation.map((field: RegisterFields) => ({\n        fieldName: deCodeField(field.name),\n        fieldValue: data[field.name] || field.default,\n      }));\n\n      const res = await validateBCCompanyExtraFields({\n        extraFields,\n      });\n\n      if (res.code !== 200) {\n        const message = res.data?.errMsg || res.message || '';\n\n        const messageArr = message.split(':');\n\n        if (messageArr.length >= 2) {\n          const field = extraCompanyInformation.find(\n            (field) => deCodeField(field.name) === messageArr[0],\n          );\n          if (field) {\n            setError(field.name, {\n              type: 'manual',\n              message: messageArr[1],\n            });\n            showLoading(false);\n            return false;\n          }\n        }\n        throw message;\n      }\n\n      setErrorMessage('');\n      return true;\n    } catch (error) {\n      b2bLogger.error(error);\n      throw error;\n    }\n  };\n\n  const handleValidateAttachmentFiles = () => {\n    const formData = getValues();\n    const attachmentsFilesFiled = bcTob2bCompanyInformation.find(\n      (info) => info.fieldId === 'field_attachments',\n    );\n    if (\n      !isEmpty(attachmentsFilesFiled) &&\n      attachmentsFilesFiled.required &&\n      formData[attachmentsFilesFiled.name].length === 0\n    ) {\n      setError(attachmentsFilesFiled.name, {\n        type: 'required',\n        message: b3Lang('global.validate.required', {\n          label: attachmentsFilesFiled.label ?? '',\n        }),\n      });\n\n      showLoading(false);\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleResetBcTob2bContactInformation = (FieldName: string) => {\n    if (bcTob2bContactInformation) {\n      const newBcTob2bContactInformation = bcTob2bContactInformation.map(\n        (contactInformationField) => {\n          if (contactInformationField.name === FieldName) {\n            return {\n              ...contactInformationField,\n              disabled: false,\n            };\n          }\n          return contactInformationField;\n        },\n      );\n\n      if (dispatch) {\n        dispatch({\n          type: 'all',\n          payload: {\n            bcTob2bContactInformation: [...newBcTob2bContactInformation],\n          },\n        });\n      }\n    }\n  };\n\n  const handleValidateCompanyUserExtraFields = async (extraFields: CustomFieldItems[]) => {\n    try {\n      const res = await validateBCCompanyUserExtraFields({\n        extraFields,\n      });\n\n      if (res.code !== 200) {\n        const message = res.data?.errMsg || res.message || '';\n\n        const messageArr = message.split(':');\n\n        if (messageArr.length >= 2) {\n          const field = bcTob2bContactInformation?.find(\n            (field: RegisterFields) => field.custom && Base64.decode(field.name) === messageArr[0],\n          );\n          if (field) {\n            setError(field.name, {\n              type: 'manual',\n              message: messageArr[1],\n            });\n            handleResetBcTob2bContactInformation(field.name);\n            showLoading(false);\n            return false;\n          }\n        }\n        setErrorMessage(message);\n        showLoading(false);\n        return false;\n      }\n      setErrorMessage('');\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n\n  const handleNext = (event: MouseEvent) => {\n    const hasAttachmentsFilesError = handleValidateAttachmentFiles();\n\n    handleSubmit(async (data: CustomFieldItems) => {\n      if (hasAttachmentsFilesError) return;\n      showLoading(true);\n\n      try {\n        const isValidate = await validateCompanyExtraFieldsUnique(data);\n        if (!isValidate) {\n          return;\n        }\n\n        // get company user extra field\n        const b2bContactInformationList = bcTob2bContactInformation || [];\n        const companyUserExtraFieldsList = b2bContactInformationList.filter(\n          (item) => !!item.custom,\n        );\n\n        const companyUserExtraFields: Array<CustomFieldItems> = [];\n        if (companyUserExtraFieldsList.length) {\n          companyUserExtraFieldsList.forEach((item: CustomFieldItems) => {\n            const itemExtraField: CustomFieldItems = {};\n            itemExtraField.fieldName = deCodeField(item.name);\n            itemExtraField.fieldValue = data[item.name] || item?.default || '';\n            companyUserExtraFields.push(itemExtraField);\n          });\n        }\n\n        let isCompanyUserValidate = true;\n        if (companyUserExtraFields.length > 0) {\n          isCompanyUserValidate = await handleValidateCompanyUserExtraFields(\n            companyUserExtraFields,\n          );\n        }\n        if (!isCompanyUserValidate) {\n          return;\n        }\n\n        const attachmentsList = bcTob2bCompanyInformation.filter(\n          (list) => list.fieldType === 'files',\n        );\n        const fileList = await getFileUrl(attachmentsList || [], data);\n        await getB2BFieldsValue(data, customerId, fileList, companyUserExtraFields);\n\n        const isAuto = companyAutoApproval.enabled;\n\n        if (emailAddress) {\n          dispatch({\n            type: 'finishInfo',\n            payload: {\n              submitSuccess: true,\n              isAutoApproval: isAuto,\n              blockPendingAccountOrderCreation,\n            },\n          });\n          dispatch({\n            type: 'all',\n            payload: {\n              accountType: '1',\n            },\n          });\n          await getCurrentCustomerInfo();\n          setShowFinishPage(true);\n        }\n      } catch (err: any) {\n        b2bLogger.error(err);\n        setErrorMessage(err?.message || err);\n      } finally {\n        showLoading(false);\n      }\n    })(event);\n  };\n\n  const handleFinish = () => {\n    const isLoginLandLocation = loginJump(navigate, true);\n\n    if (!isLoginLandLocation) return;\n\n    if (companyAutoApproval.enabled) {\n      navigate('/orders');\n    } else {\n      window.location.href = '/';\n    }\n  };\n\n  return (\n    <B3Card setOpenPage={setOpenPage}>\n      <RegisteredContainer isMobile={isMobile}>\n        <B3Spin isSpinning={isLoading} tip={b3Lang('global.tips.loading')} transparency=\"0\">\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              width: '100%',\n              alignItems: 'center',\n              '& h4': {\n                color: customColor,\n              },\n              '& input, & .MuiFormControl-root .MuiTextField-root, & .MuiDropzoneArea-textContainer, & .MuiSelect-select.MuiSelect-filled, & .MuiTextField-root .MuiInputBase-multiline':\n                {\n                  borderRadius: '4px',\n                  borderBottomLeftRadius: '0',\n                  borderBottomRightRadius: '0',\n                },\n            }}\n          >\n            {logo && (\n              <RegisteredImage>\n                <ImageListItem\n                  sx={{\n                    maxWidth: '250px',\n                  }}\n                  onClick={() => {\n                    window.location.href = '/';\n                  }}\n                >\n                  <img src={logo} alt={b3Lang('global.tips.registerLogo')} loading=\"lazy\" />\n                </ImageListItem>\n              </RegisteredImage>\n            )}\n\n            {showFinishPage ? (\n              <RegisteredFinish handleFinish={handleFinish} isBCToB2B />\n            ) : (\n              <StyledRegisterContent\n                sx={{\n                  width: isMobile ? '100%' : '537px',\n                  boxShadow:\n                    '0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 1px 3px rgba(0, 0, 0, 0.12)',\n                  borderRadius: '4px',\n                  marginTop: '1rem',\n                  background: '#FFFFFF',\n                  padding: '0 0.8rem 1rem 0.8rem',\n                }}\n              >\n                <InformationLabels>{b3Lang('registeredbctob2b.title')}</InformationLabels>\n\n                {errorMessage && (\n                  <Alert severity=\"error\">\n                    <TipContent>{errorMessage}</TipContent>\n                  </Alert>\n                )}\n\n                <Box\n                  sx={{\n                    width: '100%',\n                  }}\n                >\n                  <InformationFourLabels>\n                    {bcTob2bContactInformation?.length\n                      ? bcTob2bContactInformation[0]?.groupName\n                      : ''}\n                  </InformationFourLabels>\n                  <B3CustomForm\n                    formFields={bcTob2bContactInformation || []}\n                    errors={errors}\n                    control={control}\n                    getValues={getValues}\n                    setValue={setValue}\n                  />\n                </Box>\n\n                <Box\n                  sx={{\n                    width: '100%',\n                  }}\n                >\n                  <InformationFourLabels>\n                    {bcTob2bCompanyInformation?.length\n                      ? bcTob2bCompanyInformation[0]?.groupName\n                      : ''}\n                  </InformationFourLabels>\n                  <B3CustomForm\n                    formFields={[...bcTob2bCompanyInformation, ...bcTob2bCompanyExtraFields]}\n                    errors={errors}\n                    control={control}\n                    getValues={getValues}\n                    setValue={setValue}\n                    setError={setError}\n                  />\n                </Box>\n\n                <Box\n                  sx={{\n                    width: '100%',\n                  }}\n                >\n                  <InformationFourLabels>\n                    {bcTob2bAddressBasicFields?.length\n                      ? bcTob2bAddressBasicFields[0]?.groupName\n                      : ''}\n                  </InformationFourLabels>\n\n                  <B3CustomForm\n                    formFields={bcTob2bAddressBasicFields}\n                    errors={errors}\n                    control={control}\n                    getValues={getValues}\n                    setValue={setValue}\n                  />\n                </Box>\n\n                {!showFinishPage && (\n                  <Box\n                    sx={{\n                      display: 'flex',\n                      flexDirection: 'row-reverse',\n                      pt: 2,\n                      width: '100%',\n                    }}\n                  >\n                    <CustomButton variant=\"contained\" onClick={handleNext}>\n                      {b3Lang('global.button.submit')}\n                    </CustomButton>\n                  </Box>\n                )}\n              </StyledRegisterContent>\n            )}\n          </Box>\n        </B3Spin>\n      </RegisteredContainer>\n    </B3Card>\n  );\n}\n"],"names":["StyledRegisterContent","styled","Box","RegisteredBCToB2B","props","errorMessage","setErrorMessage","useState","showFinishPage","setShowFinishPage","setOpenPage","b3Lang","useB3Lang","isMobile","useMobile","control","handleSubmit","getValues","errors","setValue","setError","watch","useForm","storeName","logo","blockPendingAccountOrderCreation","registerEnabled","useContext","GlobalContext","navigate","useNavigate","customer","useAppSelector","company","customerId","firstName","lastName","emailAddress","phoneNumber","state","dispatch","RegisteredContext","companyAutoApproval","backgroundColor","CustomStyleContext","customColor","getContrastColor","showLoading","isShow","useEffect","accountFormAllFields","getB2BAccountFormFields","newAccountFormFields","fields","accountFields","b2bAddressRequiredFields","bcToB2BAccountFormFields","getAccountFormFields","countries","getB2BCountries","newAddressInformationFields","addressFields","customerInfo","newContactInformation","contactInformationField","field","deCodeField","e","b2bLogger","bcTob2bContactInformation","isLoading","bcTob2bCompanyInformation","bcTob2bAddressBasicFields","countryList","bcTob2bCompanyExtraFields","handleCountryChange","countryCode","stateCode","stateList","_a","country","stateFields","formFields","countryValue","stateValue","subscription","value","name","type","getFileUrl","attachmentsList","data","attachments","file","uploadB2BFile","fileList","res","list","newData","error","getB2BFieldsValue","companyUserExtraFields","b2bFields","storeHash","companyInfo","companyExtraInfo","item","toHump","extraFields","itemExtraField","addressBasicInfo","addressExtraBasicInfo","channelId","createB2BCompanyUser","validateCompanyExtraFieldsUnique","extraCompanyInformation","validateBCCompanyExtraFields","message","messageArr","handleValidateAttachmentFiles","formData","attachmentsFilesFiled","info","isEmpty","handleResetBcTob2bContactInformation","FieldName","newBcTob2bContactInformation","handleValidateCompanyUserExtraFields","validateBCCompanyUserExtraFields","Base64","handleNext","event","hasAttachmentsFilesError","companyUserExtraFieldsList","isCompanyUserValidate","isAuto","getCurrentCustomerInfo","err","handleFinish","loginJump","jsx","B3Card","RegisteredContainer","B3Spin","jsxs","RegisteredImage","ImageListItem","RegisteredFinish","InformationLabels","Alert","TipContent","InformationFourLabels","B3CustomForm","_b","_c","CustomButton"],"mappings":"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"}