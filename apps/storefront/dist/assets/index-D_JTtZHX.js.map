{"version":3,"file":"index-D_JTtZHX.js","sources":["../../src/pages/SalesRepresentative/config.ts","../../src/pages/SalesRepresentative/utils.ts","../../src/pages/SalesRepresentative/index.tsx"],"sourcesContent":["export interface GetFilterMoreListProps {\n  fieldId: string;\n  rows?: string | number;\n  name: string;\n  label: string;\n  required: boolean;\n  default: string;\n  fieldType: string;\n  xs: number;\n  variant: string;\n  size: string;\n}\n\nexport const getAccountSettingsFields = (): GetFilterMoreListProps[] => {\n  return [\n    {\n      name: 'company',\n      fieldId: 'field_company',\n      label: 'Company',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'role',\n      fieldId: 'field_role',\n      label: 'Role',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n};\n\nexport const getPasswordModifiedFields = (): GetFilterMoreListProps[] => {\n  return [\n    {\n      name: 'currentPassword',\n      fieldId: 'field_current_password',\n      label: 'Current Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'password',\n      fieldId: 'field_password',\n      label: 'Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'confirmPassword',\n      fieldId: 'field_confirm_password',\n      label: 'Confirm Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n};\n","import Cookies from 'js-cookie';\n\nimport { Fields, ParamProps } from '@/types/accountSetting';\nimport { validatorRules } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport { BigCommerceStorefrontAPIBaseURL } from '@/utils/basicConfig';\n\nimport { deCodeField } from '../Registered/config';\n\nfunction sendUpdateAccountRequest(data: string): Promise<string> {\n  const requestOptions: RequestInit = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: data,\n    mode: 'cors',\n    credentials: 'include',\n  };\n\n  return fetch(\n    `${BigCommerceStorefrontAPIBaseURL}/account.php?action=update_account`,\n    requestOptions,\n  )\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.text();\n    })\n    .then((responseData) => responseData);\n}\n\nconst getXsrfToken = (): string | undefined => {\n  const token = Cookies.get('XSRF-TOKEN');\n\n  if (!token) {\n    return undefined;\n  }\n\n  return decodeURIComponent(token);\n};\n\n// Password and email Change Send emails\nfunction sendEmail(data: any, extraFields: any) {\n  return new Promise<boolean>((resolve, reject) => {\n    const { email, confirmPassword, newPassword, currentPassword } = data;\n\n    const requiredCustomFields =\n      extraFields.filter((item: CustomFieldItems) => item.required && item.custom) || [];\n    const formData = new URLSearchParams();\n    const token = getXsrfToken() || '';\n    formData.append('FormField[1][1]', email);\n    formData.append('FormField[1][24]', currentPassword);\n    formData.append('FormField[1][2]', newPassword);\n    formData.append('FormField[1][3]', confirmPassword);\n    formData.append('authenticity_token', token);\n\n    // extra\n    if (requiredCustomFields.length) {\n      requiredCustomFields.forEach((item: Partial<Fields>) => {\n        if (item.name?.includes('_')) {\n          const key = item.name?.split('_')[1];\n          const { formFields } = data;\n          const val = formFields.find(\n            (field: Partial<Fields>) => field.name === item.bcLabel,\n          ).value;\n          if (item.type === 'date') {\n            const time = val.split('-');\n            if (!val && time.length !== 3) return;\n            const [year, month, day] = time;\n            formData.append(`FormFieldYear[1][${key}]`, year);\n            formData.append(`FormFieldMonth[1][${key}]`, month);\n            formData.append(`FormFieldDay[1][${key}]`, day);\n          } else {\n            formData.append(`FormField[1][${key}]`, val);\n          }\n        }\n      });\n    }\n\n    const requestBody: string = formData.toString();\n\n    sendUpdateAccountRequest(requestBody)\n      .then((response) => {\n        const isFlag = response.includes('alertBox--error');\n        resolve(!isFlag);\n      })\n      .catch((error) => {\n        b2bLogger.error('Error:', error);\n        reject();\n      });\n  });\n}\n\nconst emailValidate = validatorRules(['email']);\n\nexport const initB2BInfo = (\n  accountSettings: any,\n  contactInformation: Partial<Fields>[],\n  accountB2BFormFields: Partial<Fields>[],\n  additionalInformation: Partial<Fields>[],\n) => {\n  const extraFields = accountSettings?.extraFields || [];\n  contactInformation.forEach((item: Partial<Fields>) => {\n    const contactItem = item;\n    if (deCodeField(item?.name || '') === 'first_name') {\n      contactItem.default = accountSettings.firstName;\n    }\n    if (deCodeField(item?.name || '') === 'last_name') {\n      contactItem.default = accountSettings.lastName;\n    }\n    if (deCodeField(item?.name || '') === 'phone') {\n      contactItem.default = accountSettings.phoneNumber;\n    }\n    if (deCodeField(item?.name || '') === 'email') {\n      contactItem.default = accountSettings.email;\n      contactItem.validate = emailValidate;\n    }\n  });\n\n  if (extraFields.length > 0) {\n    extraFields.forEach((field: CustomFieldItems) => {\n      const extraField = field;\n\n      const currentField = contactInformation.find(\n        (item) => deCodeField(item?.name || '') === extraField.fieldName,\n      );\n\n      if (currentField) {\n        currentField.default = extraField.fieldValue;\n      }\n    });\n  }\n\n  accountB2BFormFields.forEach((item: Partial<Fields>) => {\n    const formField = item;\n    if (item.name === 'role') {\n      formField.default = accountSettings.companyRoleName;\n      formField.disabled = true;\n    } else if (item.name === 'company') {\n      formField.default = accountSettings.company;\n      formField.disabled = true;\n    }\n  });\n\n  additionalInformation.forEach((item: Partial<Fields>) => {\n    const formFields = (accountSettings?.formFields || []).find(\n      (field: Partial<Fields>) => field.name === item.bcLabel,\n    );\n    const infoItem = item;\n    if (formFields) infoItem.default = formFields.value;\n  });\n\n  return [...contactInformation, ...accountB2BFormFields, ...additionalInformation];\n};\n\nexport const initBcInfo = (\n  accountSettings: any,\n  contactInformation: Partial<Fields>[],\n  additionalInformation: Partial<Fields>[],\n) => {\n  contactInformation.forEach((item: Partial<Fields>) => {\n    const contactInfoItem = item;\n    if (deCodeField(item?.name || '') === 'first_name') {\n      contactInfoItem.default = accountSettings.firstName;\n    }\n    if (deCodeField(item?.name || '') === 'last_name') {\n      contactInfoItem.default = accountSettings.lastName;\n    }\n    if (deCodeField(item?.name || '') === 'phone') {\n      contactInfoItem.default = accountSettings.phoneNumber;\n    }\n    if (deCodeField(item?.name || '') === 'email') {\n      contactInfoItem.default = accountSettings.email;\n      contactInfoItem.validate = emailValidate;\n    }\n    if (deCodeField(item?.name || '') === 'company') {\n      contactInfoItem.default = accountSettings.company;\n    }\n  });\n\n  additionalInformation.forEach((item: Partial<Fields>) => {\n    const formFields = (accountSettings?.formFields || []).find(\n      (field: Partial<Fields>) => field.name === item.bcLabel,\n    );\n    const infoItem = item;\n    if (formFields) infoItem.default = formFields.value;\n  });\n\n  return [...contactInformation, ...additionalInformation];\n};\n\nexport const b2bSubmitDataProcessing = (\n  data: CustomFieldItems,\n  accountSettings: any,\n  decryptionFields: Partial<Fields>[],\n  extraFields: Partial<Fields>[],\n) => {\n  const userExtraFields = accountSettings?.extraFields || [];\n\n  const param: Partial<ParamProps> = {};\n  param.formFields = [];\n  let pristine = true;\n  let flag = true;\n  let useExtraFieldsFlag = false;\n\n  Object.keys(data).forEach((key: string) => {\n    decryptionFields.forEach((item: Partial<Fields>) => {\n      if (key === item.name) {\n        flag = false;\n        if (deCodeField(item.name) === 'first_name') {\n          if (accountSettings.firstName !== data[item.name]) pristine = false;\n          param.firstName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'last_name') {\n          if (accountSettings.lastName !== data[item.name]) pristine = false;\n          param.lastName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'phone') {\n          if (accountSettings.phoneNumber !== data[item.name]) pristine = false;\n          param.phoneNumber = data[item.name];\n        }\n        if (deCodeField(item.name) === 'email') {\n          if (accountSettings.email !== data[item.name]) pristine = false;\n          param.email = data[item.name];\n        }\n        if (item.custom) {\n          const currentField = userExtraFields.find(\n            (field: CustomFieldItems) => field.fieldName === deCodeField(item?.name || ''),\n          );\n          if (currentField?.fieldValue !== data[item.name]) useExtraFieldsFlag = true;\n        }\n      }\n    });\n    if (useExtraFieldsFlag) {\n      pristine = false;\n    }\n\n    if (flag) {\n      extraFields.forEach((field: Partial<Fields>) => {\n        if (field.fieldId === key && param?.formFields) {\n          const { name } = field;\n          param.formFields.push({\n            name: field?.bcLabel || '',\n            value: data[key],\n          });\n          flag = false;\n          const account = (accountSettings?.formFields || []).find(\n            (formField: Partial<Fields>) => formField.name === field.bcLabel,\n          );\n          if (account && JSON.stringify(account.value) !== JSON.stringify(data[key])) {\n            pristine = false;\n          }\n\n          if (!accountSettings?.formFields?.length && name && !!data[name]) {\n            pristine = false;\n          }\n        }\n      });\n    }\n    if (flag) {\n      if (key === 'password') {\n        param.newPassword = data[key];\n        if (data[key]) pristine = false;\n      } else {\n        param[key] = data[key];\n      }\n    }\n    flag = true;\n  });\n\n  delete param.company;\n\n  delete param.role;\n\n  if (pristine) {\n    return undefined;\n  }\n\n  return param;\n};\n\nexport const bcSubmitDataProcessing = (\n  data: CustomFieldItems,\n  accountSettings: any,\n  decryptionFields: Partial<Fields>[],\n  extraFields: Partial<Fields>[],\n) => {\n  const param: Partial<ParamProps> = {};\n  param.formFields = [];\n  let pristine = true;\n  let flag = true;\n  Object.keys(data).forEach((key: string) => {\n    decryptionFields.forEach((item: Partial<Fields>) => {\n      if (key === item.name) {\n        flag = false;\n        if (deCodeField(item.name) === 'first_name') {\n          if (accountSettings.firstName !== data[item.name]) pristine = false;\n          param.firstName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'last_name') {\n          if (accountSettings.lastName !== data[item.name]) pristine = false;\n          param.lastName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'phone') {\n          if (accountSettings.phoneNumber !== data[item.name]) pristine = false;\n          param.phoneNumber = data[item.name];\n        }\n        if (deCodeField(item.name) === 'email') {\n          if (accountSettings.email !== data[item.name]) pristine = false;\n          param.email = data[item.name];\n        }\n        if (deCodeField(item.name) === 'company') {\n          if (accountSettings.company !== data[item.name]) pristine = false;\n          param.company = data[item.name];\n        }\n      }\n    });\n\n    if (flag) {\n      extraFields.forEach((field: Partial<Fields>) => {\n        if (field.fieldId === key && param?.formFields) {\n          param.formFields.push({\n            name: field?.bcLabel || '',\n            value: data[key],\n          });\n          flag = false;\n          const account = (accountSettings?.formFields || []).find(\n            (formField: Partial<Fields>) => formField.name === field.bcLabel,\n          );\n          if (account && JSON.stringify(account.value) !== JSON.stringify(data[key]))\n            pristine = false;\n        }\n      });\n    }\n\n    if (flag) {\n      if (key === 'password') {\n        param.newPassword = data[key];\n        if (data[key]) pristine = false;\n      } else {\n        param[key] = data[key];\n      }\n    }\n    flag = true;\n  });\n\n  if (pristine) {\n    return undefined;\n  }\n\n  return param;\n};\n\nexport default sendEmail;\n","import { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, Stack } from '@mui/material';\nimport trim from 'lodash-es/trim';\nimport CustomButton from '@/components/button/CustomButton';\nimport B3Spin from '@/components/spin/B3Spin';\nimport useStorageState from '@/hooks/useStorageState';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport {\n  checkUserBCEmail,\n  checkUserEmail,\n  getB2BAccountFormFields,\n  getB2BAccountSettings,\n  getBCAccountSettings,\n} from '@/shared/service/b2b';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { Fields, ParamProps } from '@/types/accountSetting';\nimport { channelId, snackbar } from '@/utils';\nimport { getAccountFormFields } from '../Registered/config';\nimport { getAccountSettingsFields, getPasswordModifiedFields } from './config';\nimport { initB2BInfo, initBcInfo } from './utils';\nimport B3Request from '@/shared/service/request/b3Fetch';\n\nfunction useData() {\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyInfoId = useAppSelector(({ company }) => company.companyInfo.id);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const companyId = role === 3 && isAgenting ? Number(salesRepCompanyId) : Number(companyInfoId);\n  const isBCUser = !isB2BUser || (role === 3 && !isAgenting);\n\n  const validateEmailValue = async (emailValue: string) => {\n    if (customer.emailAddress === trim(emailValue)) return true;\n    const payload = {\n      email: emailValue,\n      channelId,\n    };\n\n    const { isValid }: { isValid: boolean } = isBCUser\n      ? await checkUserBCEmail(payload)\n      : await checkUserEmail(payload);\n\n    return isValid;\n  };\n\n  const emailValidation = (data: Partial<ParamProps>) => {\n    if (data.email !== customer.emailAddress && !data.currentPassword) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const passwordValidation = (data: Partial<ParamProps>) => {\n    if (data.password !== data.confirmPassword) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return { isBCUser, companyId, customer, validateEmailValue, emailValidation, passwordValidation };\n}\n\nfunction AccountSetting() {\n  const { isBCUser, companyId } =\n    useData();\n\n  const [isFinishUpdate, setIsFinishUpdate] = useStorageState<boolean>(\n    'sf-isFinishUpdate',\n    false,\n    sessionStorage,\n  );\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const b3Lang = useB3Lang();\n  const navigate = useNavigate();\n\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n  const [salesStaff, setSalesStaff] = useState<any[]>([]);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        setLoading(true);\n        const fn = isBCUser ? getBCAccountSettings : getB2BAccountSettings;\n        const params = isBCUser ? {} : { companyId };\n        const key = isBCUser ? 'customerAccountSettings' : 'accountSettings';\n        const accountFormAllFields = await getB2BAccountFormFields(isBCUser ? 1 : 2);\n        const accountFormFields = getAccountFormFields(accountFormAllFields.accountFormFields || []);\n        const contactInformation = (accountFormFields?.contactInformation || []).filter(\n          (item: Partial<Fields>) => item.fieldId !== 'field_email_marketing_newsletter',\n        );\n        const { additionalInformation = [] } = accountFormFields;\n        const { [key]: accountSettings } = await fn(params);\n        const fields = isBCUser\n          ? initBcInfo(accountSettings, contactInformation, additionalInformation)\n          : initB2BInfo(accountSettings, contactInformation, getAccountSettingsFields(), additionalInformation);\n        const passwordModifiedFields = getPasswordModifiedFields();\n        const all = [...fields, ...passwordModifiedFields];\n        const roleItem = all.find((item) => item.name === 'role');\n        if (roleItem?.fieldType) roleItem.fieldType = 'text';\n\n        // --- NEW: Fetch sales staff\n        const { data: salesList = [] } = await B3Request.get(`/api/v3/io/sales-staffs`, \"B2BEditionRest\", { companyId });\n        if (salesList.length > 0) {\n          const fullSalesData = await Promise.all(\n            salesList.map((staff: { id: number }) =>\n              B3Request.get(`/api/v3/io/sales-staffs/${staff.id}`, \"B2BEditionRest\"),\n            ),\n          );\n          setSalesStaff(fullSalesData.map((res) => res.data));\n        }\n      } finally {\n        if (isFinishUpdate) {\n          snackbar.success(b3Lang('accountSettings.notification.detailsUpdated'));\n          setIsFinishUpdate(false);\n        }\n        setLoading(false);\n        setIsVisible(true);\n      }\n    };\n\n    init();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <B3Spin isSpinning={isLoading} background={backgroundColor}>\n      {isVisible && (\n        <Box mt={4}>\n          {salesStaff.length === 0 ? (\n            <CustomButton variant=\"outlined\" fullWidth onClick={() => navigate('/quote')}>\n              Request Sales Assistance\n            </CustomButton>\n          ) : (\n            <Stack direction={'row'}>\n              {salesStaff.map((rep) => (\n                <Box\n                  key={rep.id}\n                  sx={{\n                    p: 2,\n                    m: 2,\n                    border: '1px solid #ddd',\n                    borderRadius: '8px',\n                    backgroundColor: '#fff',\n                  }}\n                >\n                  <Box fontWeight=\"bold\">{rep.name}</Box>\n                  <Box>Email: {rep.email}</Box>\n                  <Box>Phone: {rep.phoneNumber}</Box>\n                </Box>\n              ))}\n            </Stack>\n          )}\n        </Box>\n      )}\n    </B3Spin>\n  );\n}\n\nexport default AccountSetting;\n"],"names":["getAccountSettingsFields","getPasswordModifiedFields","emailValidate","validatorRules","initB2BInfo","accountSettings","contactInformation","accountB2BFormFields","additionalInformation","extraFields","item","contactItem","deCodeField","field","extraField","currentField","formField","formFields","infoItem","initBcInfo","contactInfoItem","useData","isB2BUser","useAppSelector","isB2BUserSelector","companyInfoId","company","customer","role","salesRepCompanyId","b2bFeatures","isAgenting","companyId","isBCUser","emailValue","trim","payload","channelId","isValid","checkUserBCEmail","checkUserEmail","data","AccountSetting","isFinishUpdate","setIsFinishUpdate","useStorageState","backgroundColor","useContext","CustomStyleContext","b3Lang","useB3Lang","navigate","useNavigate","isLoading","setLoading","useState","isVisible","setIsVisible","salesStaff","setSalesStaff","useEffect","fn","getBCAccountSettings","getB2BAccountSettings","params","key","accountFormAllFields","getB2BAccountFormFields","accountFormFields","getAccountFormFields","fields","passwordModifiedFields","roleItem","salesList","B3Request","fullSalesData","staff","res","snackbar","jsx","B3Spin","Box","CustomButton","Stack","rep","jsxs"],"mappings":"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"}