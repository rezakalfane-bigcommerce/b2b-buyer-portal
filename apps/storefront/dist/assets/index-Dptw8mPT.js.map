{"version":3,"file":"index-Dptw8mPT.js","sources":["../../src/pages/Dashboard/components/DashboardCard.tsx","../../src/pages/Dashboard/ActionMenuCell.tsx","../../src/pages/Dashboard/CompanyNameCell/SelectedBadge.tsx","../../src/pages/Dashboard/CompanyNameCell/index.tsx","../../src/pages/Dashboard/index.tsx"],"sourcesContent":["import { useB3Lang } from '@b3/lang';\nimport { Box, Button, Card, CardContent, Typography } from '@mui/material';\n\ninterface DashboardCardProps {\n  companyName: string;\n  email: string;\n  isSelected: boolean;\n  action: { label: string; onClick: () => void };\n}\n\nfunction SelectedBadge() {\n  const b3Lang = useB3Lang();\n\n  return (\n    <Box\n      sx={{\n        fontWeight: 400,\n        fontSize: '13px',\n        background: '#ED6C02',\n        display: 'inline-block',\n        p: '2px 7px',\n        color: '#FFFFFF',\n        borderRadius: '10px',\n      }}\n    >\n      {b3Lang('dashboard.selected')}\n    </Box>\n  );\n}\n\nexport function DashboardCard({ companyName, email, isSelected, action }: DashboardCardProps) {\n  return (\n    <Card>\n      <CardContent\n        sx={{\n          color: '#313440',\n        }}\n      >\n        <Typography\n          sx={{\n            fontWeight: 400,\n            fontSize: '24px',\n            color: 'rgba(0, 0, 0, 0.87)',\n          }}\n        >\n          {companyName}\n        </Typography>\n\n        {isSelected && <SelectedBadge />}\n\n        <Box\n          sx={{\n            display: 'flex',\n            fontSize: '16px',\n            mt: '15px',\n            gap: '5px',\n          }}\n        >\n          <Typography\n            sx={{\n              fontWeight: 500,\n            }}\n          >\n            Email:\n          </Typography>\n          <Typography variant=\"body1\">{email}</Typography>\n        </Box>\n      </CardContent>\n\n      <Button\n        sx={{\n          ml: '10px',\n          mb: '10px',\n        }}\n        variant=\"text\"\n        onClick={() => action.onClick()}\n      >\n        {action.label}\n      </Button>\n    </Card>\n  );\n}\n","import { useRef, useState } from 'react';\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\nimport { IconButton, Menu, MenuItem } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nexport const StyledMenu = styled(Menu)(() => ({\n  '& .MuiPaper-elevation': {\n    boxShadow:\n      '0px 1px 0px -1px rgba(0, 0, 0, 0.1), 0px 1px 6px rgba(0, 0, 0, 0.07), 0px 1px 4px rgba(0, 0, 0, 0.06)',\n    borderRadius: '4px',\n  },\n}));\n\ninterface Props {\n  label: string;\n  onClick: () => void;\n}\n\nexport function ActionMenuCell({ label, onClick }: Props) {\n  const ref = useRef<HTMLButtonElement | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)} ref={ref}>\n        <MoreHorizIcon />\n      </IconButton>\n      <StyledMenu\n        anchorEl={ref.current}\n        open={isOpen}\n        onClose={() => setIsOpen(false)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <MenuItem\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={() => {\n            onClick();\n            setIsOpen(false);\n          }}\n        >\n          {label}\n        </MenuItem>\n      </StyledMenu>\n    </>\n  );\n}\n","import { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\n\nexport function SelectedBadge() {\n  const b3Lang = useB3Lang();\n\n  return (\n    <Box\n      sx={{\n        fontWeight: 400,\n        fontSize: '13px',\n        background: '#ED6C02',\n        ml: '16px',\n        p: '2px 7px',\n        color: '#FFFFFF',\n        borderRadius: '10px',\n      }}\n    >\n      {b3Lang('dashboard.selected')}\n    </Box>\n  );\n}\n","import { Box } from '@mui/material';\n\nimport { SelectedBadge } from './SelectedBadge';\n\ninterface Props {\n  companyName: string;\n  isSelected: boolean;\n}\n\nexport function CompanyNameCell({ companyName, isSelected }: Props) {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n      }}\n    >\n      {companyName}\n      {isSelected && <SelectedBadge />}\n    </Box>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\n\nimport { usePageMask } from '@/components';\nimport B3FilterSearch from '@/components/filter/B3FilterSearch';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { B3PaginationTable, GetRequestList } from '@/components/table/B3PaginationTable';\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport { useSort } from '@/hooks';\nimport { PageProps } from '@/pages/PageProps';\nimport { superAdminCompanies } from '@/shared/service/b2b';\nimport { useAppSelector } from '@/store';\nimport { endMasquerade, startMasquerade } from '@/utils/masquerade';\n\nimport { DashboardCard } from './components/DashboardCard';\nimport { ActionMenuCell } from './ActionMenuCell';\nimport { CompanyNameCell } from './CompanyNameCell';\n\ninterface ListItem {\n  [key: string]: string;\n}\n\nexport const defaultSortKey = 'companyName';\n\nexport const sortKeys = {\n  companyName: 'companyName',\n  companyAdminName: 'companyAdminName',\n  companyEmail: 'companyEmail',\n};\n\nconst rowsPerPage = [10, 20, 30];\n\nfunction useData() {\n  const customerId = useAppSelector(({ company }) => company.customer.id);\n  const b2bId = useAppSelector(({ company }) => company.customer.b2bId);\n  const salesRepCompanyId = Number(\n    useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id),\n  );\n\n  return { salesRepCompanyId, b2bId, customerId };\n}\n\nfunction Dashboard(props: PageProps) {\n  const showPageMask = usePageMask();\n\n  const { salesRepCompanyId, b2bId, customerId } = useData();\n\n  const { setOpenPage } = props;\n  const b3Lang = useB3Lang();\n\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n\n  const [filterData, setFilterData] = useState<ListItem>({\n    q: '',\n    orderBy: sortKeys[defaultSortKey],\n  });\n\n  const [handleSetOrderBy, order, orderBy] = useSort(\n    sortKeys,\n    defaultSortKey,\n    filterData,\n    setFilterData,\n    'asc',\n  );\n\n  const location = useLocation();\n\n  const getSuperAdminCompaniesList: GetRequestList<ListItem, ListItem> = async (params) => {\n    let list = { edges: [], totalCount: 0 };\n    if (typeof b2bId === 'number') {\n      list = (await superAdminCompanies(b2bId, params)).superAdminCompanies;\n    }\n\n    return list;\n  };\n\n  const startActing = async (companyId: number) => {\n    try {\n      setIsRequestLoading(true);\n      if (typeof b2bId === 'number') {\n        await startMasquerade({ customerId, companyId });\n      }\n\n      setOpenPage({\n        isOpen: true,\n        openUrl: '/dashboard',\n      });\n\n      setFilterData({\n        ...filterData,\n      });\n    } finally {\n      setIsRequestLoading(false);\n    }\n  };\n\n  const endActing = async () => {\n    try {\n      showPageMask(true);\n      if (typeof b2bId === 'number') {\n        await endMasquerade();\n      }\n      setFilterData({\n        ...filterData,\n      });\n    } finally {\n      showPageMask(false);\n    }\n  };\n\n  useEffect(() => {\n    const params = {\n      ...location,\n    };\n    if (params?.state) {\n      endActing();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location]);\n\n  const handleChange = async (q: string) => {\n    setFilterData({\n      ...filterData,\n      q,\n    });\n  };\n\n  const columnItems: TableColumnItem<ListItem>[] = [\n    {\n      key: 'companyName',\n      title: b3Lang('dashboard.company'),\n      render: ({ companyName, companyId }) => (\n        <CompanyNameCell\n          companyName={companyName}\n          isSelected={Number(companyId) === Number(salesRepCompanyId)}\n        />\n      ),\n      isSortable: true,\n    },\n    {\n      key: 'companyEmail',\n      title: b3Lang('dashboard.email'),\n      isSortable: true,\n    },\n    {\n      key: 'actions',\n      title: b3Lang('dashboard.action'),\n      render: ({ companyId }) => {\n        const isSelected = Number(companyId) === Number(salesRepCompanyId);\n\n        if (isSelected) {\n          return (\n            <ActionMenuCell\n              label={b3Lang('dashboard.endMasqueradeAction')}\n              onClick={() => endActing()}\n            />\n          );\n        }\n\n        return (\n          <ActionMenuCell\n            label={b3Lang('dashboard.masqueradeAction')}\n            onClick={() => startActing(Number(companyId))}\n          />\n        );\n      },\n    },\n  ];\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n        }}\n      >\n        <Box\n          sx={{\n            mb: '24px',\n          }}\n        >\n          <B3FilterSearch handleChange={handleChange} />\n        </Box>\n        <B3PaginationTable\n          columnItems={columnItems}\n          rowsPerPageOptions={rowsPerPage}\n          getRequestList={getSuperAdminCompaniesList}\n          searchParams={filterData || {}}\n          isCustomRender={false}\n          requestLoading={setIsRequestLoading}\n          tableKey=\"id\"\n          sortDirection={order}\n          orderBy={orderBy}\n          sortByFn={handleSetOrderBy}\n          renderItem={({ companyName, companyEmail, companyId }) => {\n            const isSelected = Number(companyId) === Number(salesRepCompanyId);\n            const action = isSelected\n              ? {\n                  label: b3Lang('dashboard.endMasqueradeAction'),\n                  onClick: () => {\n                    endActing();\n                  },\n                }\n              : {\n                  label: b3Lang('dashboard.masqueradeAction'),\n                  onClick: () => {\n                    startActing(Number(companyId));\n                  },\n                };\n\n            return (\n              <DashboardCard\n                companyName={companyName}\n                email={companyEmail}\n                isSelected={isSelected}\n                action={action}\n              />\n            );\n          }}\n        />\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default Dashboard;\n"],"names":["SelectedBadge","b3Lang","useB3Lang","jsx","Box","DashboardCard","companyName","email","isSelected","action","Card","jsxs","CardContent","Typography","Button","StyledMenu","styled","Menu","ActionMenuCell","label","onClick","ref","useRef","isOpen","setIsOpen","useState","Fragment","IconButton","MoreHorizIcon","MenuItem","CompanyNameCell","defaultSortKey","sortKeys","rowsPerPage","useData","customerId","useAppSelector","company","b2bId","b2bFeatures","Dashboard","props","showPageMask","usePageMask","salesRepCompanyId","setOpenPage","isRequestLoading","setIsRequestLoading","filterData","setFilterData","handleSetOrderBy","order","orderBy","useSort","location","useLocation","getSuperAdminCompaniesList","params","list","superAdminCompanies","startActing","companyId","startMasquerade","endActing","endMasquerade","useEffect","handleChange","q","columnItems","B3Spin","B3FilterSearch","B3PaginationTable","companyEmail"],"mappings":"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"}