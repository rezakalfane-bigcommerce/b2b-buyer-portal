{"version":3,"file":"index-DsARH3y9.js","sources":["../../src/hooks/useGetCountry.ts","../../src/utils/quoteUtils.ts","../../src/pages/quote/components/AddToQuote.tsx","../../src/pages/quote/components/ContactInfo.tsx","../../src/pages/quote/components/AddressItemCard.tsx","../../src/pages/quote/components/ChooseAddress.tsx","../../src/pages/quote/components/QuoteAddress.tsx","../../src/pages/quote/components/QuoteSubmissionResponse.tsx","../../src/pages/quote/shared/utils.ts","../../src/pages/quote/components/QuoteSummary.tsx","../../src/components/table/PaginationTable.tsx","../../src/pages/quote/components/QuoteTableCard.tsx","../../src/pages/quote/components/QuoteTable.tsx","../../src/pages/quote/config.ts","../../src/pages/QuoteDraft/index.tsx"],"sourcesContent":["import { useContext, useEffect } from 'react';\nimport { Control, FieldValues, UseFormGetValues, UseFormSetValue, useWatch } from 'react-hook-form';\n\nimport { GlobalContext } from '@/shared/global';\nimport { Country, State } from '@/shared/global/context/config';\nimport { getB2BCountries } from '@/shared/service/b2b';\n\nconst useSetCountry = () => {\n  const {\n    state: { countriesList },\n    dispatch,\n  } = useContext(GlobalContext);\n\n  useEffect(() => {\n    const init = async () => {\n      if (countriesList && !countriesList.length) {\n        const { countries } = await getB2BCountries();\n\n        dispatch({\n          type: 'common',\n          payload: {\n            countriesList: countries,\n          },\n        });\n      }\n    };\n    init();\n    // ignore dispatch, it's not affecting any value from this\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countriesList]);\n};\n\ninterface FormFieldsProps extends Record<string, any> {\n  name: string;\n  label?: string;\n  required?: boolean;\n  fieldType?: string;\n  default?: string | Array<any> | number;\n  xs: number;\n  variant: string;\n  size: string;\n  options?: any[];\n}\n\ninterface GetCountryProps {\n  setAddress: (arr: FormFieldsProps[]) => void;\n  setValue: UseFormSetValue<FieldValues>;\n  getValues: UseFormGetValues<FieldValues>;\n  addresses: FormFieldsProps[];\n  control: Control;\n}\n\nconst useGetCountry = ({\n  setAddress,\n  setValue,\n  getValues,\n  control,\n  addresses,\n}: GetCountryProps) => {\n  const {\n    state: { countriesList },\n  } = useContext(GlobalContext);\n\n  const countryCode = useWatch({\n    control,\n    name: 'country',\n  });\n\n  // Populate country array\n  useEffect(() => {\n    const countriesFieldIndex = addresses.findIndex(\n      (formFields: FormFieldsProps) => formFields.name === 'country',\n    );\n    if (countriesList?.length && countriesFieldIndex !== -1) {\n      setAddress(\n        addresses.map((addressField, addressFieldIndex) => {\n          if (countriesFieldIndex === addressFieldIndex) {\n            return { ...addressField, options: countriesList };\n          }\n          return addressField;\n        }),\n      );\n    }\n    // ignore addresses cause it will trigger loop array\n    // ignore setAddress due it's no affecting any logic\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countriesList]);\n\n  // Populate state array when the user change selected country\n  useEffect(() => {\n    if (!countryCode || !countriesList?.length) return;\n    const stateList =\n      countriesList.find((country: Country) => country.countryCode === countryCode)?.states || [];\n    const stateFieldIndex = addresses.findIndex(\n      (formFields: FormFieldsProps) => formFields.name === 'state',\n    );\n    if (stateFieldIndex !== -1) {\n      setAddress(\n        addresses.map((addressField, addressFieldIndex) => {\n          if (stateFieldIndex === addressFieldIndex) {\n            if (stateList.length > 0) {\n              return {\n                ...addressField,\n                fieldType: 'dropdown',\n                options: stateList,\n                required: true,\n              };\n            }\n            return { ...addressField, fieldType: 'text', options: [], required: false };\n          }\n          return addressField;\n        }),\n      );\n    }\n\n    const stateVal = getValues('state');\n\n    setValue(\n      'state',\n      stateVal &&\n        countryCode &&\n        (stateList.find((state: State) => state.stateName === stateVal) || stateList.length === 0)\n        ? stateVal\n        : '',\n    );\n    // ignore addresses cause it will trigger loop array\n    // ignore setAddress, getValues and setValue due they're not affecting any value from this\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countryCode, countriesList]);\n};\n\nexport { useGetCountry, useSetCountry };\n","import { QuoteInfo } from '@/types/quotes';\n\ntype ValidKeys = 'contactInfo' | 'shippingAddress' | 'billingAddress';\n\nconst validateObject = (quoteInfo: QuoteInfo, key: ValidKeys) =>\n  Object.values(quoteInfo?.[key]).every((x) => x === '' || x === 0);\n\nexport default validateObject;\n","import { useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\nimport { Box, Card, CardContent, Divider } from '@mui/material';\nimport { v1 as uuid } from 'uuid';\n\nimport { B3CollapseContainer, B3Upload } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\nimport { PRODUCT_DEFAULT_IMAGE } from '@/constants';\nimport { useBlockPendingAccountViewPrice } from '@/hooks';\nimport { searchB2BProducts, searchBcProducts } from '@/shared/service/b2b';\nimport { useAppSelector } from '@/store';\nimport { snackbar } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport {\n  addQuoteDraftProducts,\n  calculateProductListPrice,\n  validProductQty,\n} from '@/utils/b3Product/b3Product';\nimport { conversionProductsList } from '@/utils/b3Product/shared/config';\n\nimport QuickAdd from '../../ShoppingListDetails/components/QuickAdd';\nimport SearchProduct from '../../ShoppingListDetails/components/SearchProduct';\n\ninterface AddToListProps {\n  updateList: () => void;\n  addToQuote: (products: CustomFieldItems[]) => void;\n  isB2BUser: boolean;\n}\n\nexport default function AddToQuote(props: AddToListProps) {\n  const { updateList, addToQuote, isB2BUser } = props;\n\n  const companyId = useAppSelector(({ company }) => company.companyInfo.id);\n  const customerGroupId = useAppSelector(({ company }) => company.customer.customerGroupId);\n  const companyStatus = useAppSelector(({ company }) => company.companyInfo.status);\n\n  const [isOpenBulkLoadCSV, setIsOpenBulkLoadCSV] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [blockPendingAccountViewPrice] = useBlockPendingAccountViewPrice();\n\n  const b3Lang = useB3Lang();\n\n  const getNewQuoteProduct = (products: CustomFieldItems[]) =>\n    products.map((product) => {\n      const {\n        variantId,\n        newSelectOptionList,\n        id: productId,\n        name: productName,\n        quantity,\n        variants = [],\n        basePrice,\n        taxPrice,\n        calculatedValue,\n      } = product;\n\n      const variantInfo =\n        variants.length === 1\n          ? variants[0]\n          : variants.find((item: CustomFieldItems) => item.variant_id === variantId);\n\n      const { image_url: primaryImage = '', sku: variantSku } = variantInfo;\n\n      let selectOptions;\n      try {\n        selectOptions = JSON.stringify(newSelectOptionList);\n      } catch (error) {\n        selectOptions = '[]';\n      }\n\n      const taxExclusive = variantInfo.bc_calculated_price.tax_exclusive;\n      const taxInclusive = variantInfo.bc_calculated_price.tax_inclusive;\n\n      const basePriceExclusiveTax = basePrice || taxExclusive;\n\n      const tax = taxPrice || Number(taxInclusive) - Number(taxExclusive);\n\n      return {\n        node: {\n          basePrice: basePriceExclusiveTax,\n          taxPrice: tax,\n          optionList: selectOptions,\n          id: uuid(),\n          primaryImage,\n          productId,\n          productName,\n          calculatedValue,\n          productsSearch: {\n            ...product,\n            selectOptions,\n          },\n          quantity,\n          variantSku,\n        },\n      };\n    });\n\n  const addToList = async (products: CustomFieldItems[]) => {\n    const newProducts = getNewQuoteProduct(products);\n    const noSkuProducts = products.filter(({ sku, variantId, variants }) => {\n      const currentProduct = variants.find(\n        (item: CustomFieldItems) => item.variant_id === variantId || item.variantId === variantId,\n      );\n\n      const variantSku = currentProduct.sku;\n\n      return !(sku || variantSku);\n    });\n    if (noSkuProducts.length > 0) {\n      snackbar.error(b3Lang('quoteDraft.notification.cantAddProductsNoSku'), {\n        isClose: true,\n      });\n    }\n\n    if (noSkuProducts.length === products.length) return [];\n\n    addToQuote(newProducts);\n\n    snackbar.success(b3Lang('quoteDraft.notification.productSingular'), {\n      isClose: true,\n    });\n\n    return products;\n  };\n\n  const quickAddToList = async (variantProducts: CustomFieldItems[]) => {\n    const productIds = variantProducts.map((item) => item.productId);\n\n    const { productsSearch } = await searchB2BProducts({\n      productIds,\n      companyId,\n      customerGroupId,\n    });\n\n    const productList = productsSearch.map((product: CustomFieldItems) => {\n      const variantProduct =\n        variantProducts.find(\n          (variantProduct: CustomFieldItems) => variantProduct.productId === product.id,\n        ) || {};\n\n      const { variantId, newSelectOptionList, quantity } = variantProduct;\n\n      return {\n        ...product,\n        variantId,\n        newSelectOptionList,\n        quantity,\n      };\n    });\n\n    await calculateProductListPrice(productList);\n\n    const newProducts = getNewQuoteProduct(productList);\n\n    addToQuote(newProducts);\n\n    snackbar.success(b3Lang('quoteDraft.notification.productPlural'), {\n      isClose: true,\n    });\n\n    return variantProducts;\n  };\n\n  const getOptionsList = (options: CustomFieldItems) => {\n    if (options?.length === 0) return [];\n\n    const option = options.map(\n      ({ option_id: optionId, id }: { option_id: number | string; id: string | number }) => ({\n        optionId: `attribute[${optionId}]`,\n        optionValue: id,\n      }),\n    );\n\n    return option;\n  };\n\n  const handleCSVAddToList = async (productsData: CustomFieldItems) => {\n    setIsLoading(true);\n    try {\n      const { validProduct } = productsData;\n\n      const productIds: number[] = [];\n      validProduct.forEach((product: CustomFieldItems) => {\n        const { products } = product;\n\n        if (!productIds.includes(Number(products.productId))) {\n          productIds.push(Number(products.productId));\n        }\n      });\n\n      const getProducts = isB2BUser ? searchB2BProducts : searchBcProducts;\n\n      const { productsSearch } = await getProducts({\n        productIds,\n        companyId,\n        customerGroupId,\n      });\n\n      const newProductInfo: CustomFieldItems = conversionProductsList(productsSearch);\n\n      let isSuccess = false;\n\n      const newProducts: CustomFieldItems[] = [];\n      validProduct.forEach((product: CustomFieldItems) => {\n        const {\n          products: { option, variantSku, productId, productName, variantId },\n          qty,\n        } = product;\n\n        const optionsList = getOptionsList(option);\n\n        const currentProductSearch = newProductInfo.find(\n          (product: CustomFieldItems) => Number(product.id) === Number(productId),\n        );\n\n        const variantItem = currentProductSearch.variants.find(\n          (item: CustomFieldItems) => item?.sku?.toUpperCase() === variantSku?.toUpperCase(),\n        );\n\n        const quoteListitem = {\n          node: {\n            id: uuid(),\n            variantSku: variantItem?.sku,\n            variantId,\n            productsSearch: currentProductSearch,\n            primaryImage: variantItem.image_url || PRODUCT_DEFAULT_IMAGE,\n            productName,\n            quantity: Number(qty) || 1,\n            optionList: JSON.stringify(optionsList),\n            productId,\n            basePrice: variantItem.bc_calculated_price.as_entered,\n            taxPrice:\n              variantItem.bc_calculated_price.tax_inclusive -\n              variantItem.bc_calculated_price.tax_exclusive,\n          },\n        };\n\n        newProducts.push(quoteListitem);\n\n        isSuccess = true;\n      });\n      isSuccess = validProductQty(newProducts);\n      if (isSuccess) {\n        await calculateProductListPrice(newProducts, '2');\n\n        addQuoteDraftProducts(newProducts);\n        snackbar.success(b3Lang('quoteDraft.notification.productPlural'), {\n          isClose: true,\n        });\n        updateList();\n        setIsOpenBulkLoadCSV(false);\n      } else {\n        snackbar.error(b3Lang('quoteDraft.notification.errorRangeProducts'));\n      }\n    } catch (e) {\n      b2bLogger.error(e);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleOpenUploadDiag = () => {\n    if (blockPendingAccountViewPrice && companyStatus === 0) {\n      snackbar.info(b3Lang('quoteDraft.notification.businessAccountPendingActivation'));\n    } else {\n      setIsOpenBulkLoadCSV(true);\n    }\n  };\n\n  return (\n    <Card>\n      <CardContent\n        sx={{\n          p: '16px !important',\n        }}\n      >\n        <B3CollapseContainer title={b3Lang('quoteDraft.collapseTitle.addToQuote')}>\n          <SearchProduct\n            updateList={updateList}\n            addToList={addToList}\n            type=\"quote\"\n            searchDialogTitle={b3Lang('quoteDraft.modalTitle.addToQuote')}\n            addButtonText={b3Lang('quoteDraft.searchProduct.addToQuoteButton')}\n            isB2BUser={isB2BUser}\n          />\n\n          <Divider />\n\n          <QuickAdd\n            updateList={updateList}\n            quickAddToList={quickAddToList}\n            level={1}\n            buttonText={b3Lang('quoteDraft.button.addProductsToAddToQuote')}\n          />\n\n          <Divider />\n\n          <Box\n            sx={{\n              margin: '20px 0 0',\n            }}\n          >\n            <CustomButton variant=\"text\" onClick={() => handleOpenUploadDiag()}>\n              <UploadFileIcon\n                sx={{\n                  marginRight: '8px',\n                }}\n              />\n              {b3Lang('quoteDraft.button.bulkUploadCSV')}\n            </CustomButton>\n          </Box>\n\n          <B3Upload\n            isOpen={isOpenBulkLoadCSV}\n            setIsOpen={setIsOpenBulkLoadCSV}\n            handleAddToList={handleCSVAddToList}\n            isLoading={isLoading}\n            withModifiers\n          />\n        </B3CollapseContainer>\n      </CardContent>\n    </Card>\n  );\n}\n","import { forwardRef, useEffect, useImperativeHandle } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { LangFormatFunction, useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\nimport trim from 'lodash-es/trim';\n\nimport { B3CustomForm } from '@/components';\nimport { useMobile } from '@/hooks';\nimport { validateQuoteExtraFields } from '@/shared/service/b2b';\nimport { isValidUserTypeSelector, useAppSelector } from '@/store';\nimport { CustomerRole } from '@/types';\nimport {\n  ContactInfo as ContactInfoType,\n  QuoteExtraFields,\n  QuoteFormattedItemsProps,\n} from '@/types/quotes';\nimport { validatorRules } from '@/utils';\n\nexport interface GetQuoteInfoProps {\n  isMobile: boolean;\n  b3Lang: LangFormatFunction;\n  quoteExtraFields: QuoteFormattedItemsProps[];\n  referenceNumber: string | undefined;\n  recipients: string[] | undefined;\n  handleSaveClick: (ccEmails: string[]) => void;\n}\n\nconst emailValidate = validatorRules(['email']);\n\nconst getContactInfo = (isMobile: boolean, b3Lang: LangFormatFunction, isGuest: boolean) => {\n  const contactInfo = [\n    {\n      name: 'name',\n      label: b3Lang('quoteDraft.contactInfo.contactPerson'),\n      required: true,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n      disabled: !isGuest,\n    },\n    {\n      name: 'email',\n      label: b3Lang('quoteDraft.contactInfo.email'),\n      required: true,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n      validate: emailValidate,\n      disabled: !isGuest,\n    },\n    {\n      name: 'phoneNumber',\n      label: b3Lang('quoteDraft.contactInfo.phone'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'companyName',\n      label: b3Lang('quoteDraft.contactInfo.companyName'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n\n  return contactInfo;\n};\n\nconst getQuoteInfo = ({\n  isMobile,\n  b3Lang,\n  quoteExtraFields,\n  referenceNumber,\n  recipients,\n  handleSaveClick,\n}: GetQuoteInfoProps) => {\n  const currentExtraFields = quoteExtraFields.map((field) => ({\n    ...field,\n    xs: isMobile ? 12 : 6,\n  }));\n\n  const quoteInfo = [\n    {\n      name: 'quoteTitle',\n      label: b3Lang('quoteDraft.contactInfo.quoteTitle'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'referenceNumber',\n      label: b3Lang('quoteDraft.contactInfo.referenceNumber'),\n      required: false,\n      default: referenceNumber || '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    ...currentExtraFields,\n    {\n      name: 'ccEmail',\n      label: b3Lang('quoteDraft.contactInfo.ccEmail'),\n      required: false,\n      default: '',\n      fieldType: 'multiInputText',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n      isEmail: true,\n      existValue: recipients,\n      validate: emailValidate,\n      isEnterTrigger: true,\n      handleSave: handleSaveClick,\n    },\n  ];\n\n  return quoteInfo;\n};\n\ninterface ContactInfoProps {\n  info: ContactInfoType;\n  quoteExtraFields: QuoteFormattedItemsProps[];\n  emailAddress?: string;\n  referenceNumber?: string | undefined;\n  extraFieldsDefault: QuoteExtraFields[];\n  recipients: string[] | undefined;\n  handleSaveCCEmail: (ccEmail: string[]) => void;\n}\n\nfunction ContactInfo(\n  {\n    info,\n    emailAddress,\n    quoteExtraFields,\n    referenceNumber,\n    extraFieldsDefault,\n    recipients,\n    handleSaveCCEmail,\n  }: ContactInfoProps,\n  ref: any,\n) {\n  const {\n    control,\n    getValues,\n    setError,\n    formState: { errors },\n    setValue,\n    handleSubmit,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const isGuest = role === CustomerRole.GUEST;\n\n  const isValidUserType = useAppSelector(isValidUserTypeSelector);\n\n  const [isMobile] = useMobile();\n\n  const b3Lang = useB3Lang();\n\n  useEffect(() => {\n    if (info && JSON.stringify(info) !== '{}') {\n      Object.keys(info).forEach((item: string) => {\n        setValue(item, info && info[item as keyof ContactInfoType]);\n      });\n    }\n\n    if (extraFieldsDefault.length) {\n      extraFieldsDefault.forEach((item) => {\n        if (item.fieldName) setValue(item.fieldName, item.value);\n      });\n    }\n    // Disable eslint exhaustive-deps rule for setValue dispatcher\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [info, extraFieldsDefault]);\n\n  const validateEmailValue = async (emailValue: string) => {\n    if (emailAddress === trim(emailValue)) return true;\n\n    if (!isValidUserType) {\n      setError('email', {\n        type: 'custom',\n        message: b3Lang('quoteDraft.contactInfo.emailExists'),\n      });\n    }\n\n    return isValidUserType;\n  };\n\n  const validateQuoteExtraFieldsInfo = async () => {\n    const values = getValues();\n    const extraFields = quoteExtraFields.map((field) => ({\n      fieldName: field.name,\n      fieldValue: field.name ? values[field.name] : '',\n    }));\n\n    const res = await validateQuoteExtraFields({\n      extraFields,\n    });\n\n    if (res.code !== 200) {\n      const message = res.data?.errMsg || res.message || '';\n\n      const messageArr = message.split(':');\n\n      if (messageArr.length >= 2) {\n        const field = quoteExtraFields?.find((field) => field.name === messageArr[0]);\n        if (field && field.name) {\n          setError(field.name, {\n            type: 'manual',\n            message: messageArr[1],\n          });\n\n          return false;\n        }\n      }\n      return false;\n    }\n    return true;\n  };\n\n  const handleSaveClick = (ccEmails: string[]) => {\n    handleSaveCCEmail(ccEmails);\n  };\n\n  const getContactInfoValue = async () => {\n    let isValid = true;\n    await handleSubmit(\n      async (data) => {\n        isValid = await validateEmailValue(data.email);\n      },\n      () => {\n        isValid = false;\n      },\n    )();\n\n    if (isValid) {\n      isValid = await validateQuoteExtraFieldsInfo();\n    }\n\n    return isValid ? getValues() : isValid;\n  };\n\n  useImperativeHandle(ref, () => ({\n    getContactInfoValue,\n  }));\n\n  const contactInfo = getContactInfo(isMobile, b3Lang, isGuest);\n  const quoteInfo = getQuoteInfo({\n    isMobile,\n    b3Lang,\n    quoteExtraFields,\n    referenceNumber,\n    recipients,\n    handleSaveClick,\n  });\n\n  const formData = [\n    {\n      title: b3Lang('quoteDraft.contactInfo.contact'),\n      infos: contactInfo,\n    },\n    {\n      title: b3Lang('quoteDraft.quoteInfo.title'),\n      infos: quoteInfo,\n      style: {\n        mt: '20px',\n      },\n    },\n  ];\n\n  return (\n    <Box width=\"100%\">\n      {formData.map((data) => (\n        <Box key={data.title} width=\"100%\">\n          <Box\n            sx={{\n              fontWeight: 400,\n              fontSize: '24px',\n              height: '32px',\n              mb: '20px',\n              ...data?.style,\n            }}\n          >\n            {data.title}\n          </Box>\n\n          <B3CustomForm\n            formFields={data.infos}\n            errors={errors}\n            control={control}\n            setError={setError}\n            getValues={getValues}\n            setValue={setValue}\n          />\n        </Box>\n      ))}\n    </Box>\n  );\n}\n\nexport default forwardRef(ContactInfo);\n","import { useB3Lang } from '@b3/lang';\nimport styled from '@emotion/styled';\nimport { Theme, useTheme } from '@mui/material';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\n\nimport { B3Tag } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\n\nimport { AddressItemType } from '../../../types/address';\n\nexport interface OrderItemCardProps {\n  item: AddressItemType;\n  onSetAddress: (data: AddressItemType) => void;\n}\n\ninterface TagBoxProps {\n  marginBottom: number | string;\n}\n\nconst TagBox = styled('div')(({ marginBottom }: TagBoxProps) => ({\n  marginBottom,\n  '& > span:not(:last-child)': {\n    marginRight: '4px',\n  },\n}));\n\ninterface FlexProps {\n  theme?: Theme;\n}\n\nconst Flex = styled('div')(({ theme }: FlexProps) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  marginTop: theme!.spacing(3),\n}));\n\nexport function AddressItemCard(props: OrderItemCardProps) {\n  const { item: addressInfo, onSetAddress } = props;\n\n  const theme = useTheme();\n\n  const b3Lang = useB3Lang();\n\n  return (\n    <Card key={addressInfo.id}>\n      <CardContent\n        sx={{\n          color: '#313440',\n          wordBreak: 'break-word',\n        }}\n      >\n        {addressInfo.label && (\n          <Typography\n            variant=\"h5\"\n            sx={{\n              marginBottom:\n                addressInfo.isDefaultShipping === 1 || addressInfo.isDefaultBilling === 1\n                  ? theme.spacing(1)\n                  : theme.spacing(3),\n              color: 'rgba(0, 0, 0, 0.87)',\n            }}\n          >\n            {addressInfo.label}\n          </Typography>\n        )}\n\n        <TagBox\n          marginBottom={\n            addressInfo.isDefaultShipping === 1 || addressInfo.isDefaultBilling === 1\n              ? theme.spacing(3)\n              : 0\n          }\n        >\n          {addressInfo.isDefaultShipping === 1 && (\n            <B3Tag color=\"#C4DD6C\" textColor=\"rgba(0, 0, 0, 0.87)\">\n              {b3Lang('quoteDraft.addressItemCard.defaultShipping')}\n            </B3Tag>\n          )}\n          {addressInfo.isDefaultBilling === 1 && (\n            <B3Tag color=\"#C4DD6C\" textColor=\"rgba(0, 0, 0, 0.87)\">\n              {b3Lang('quoteDraft.addressItemCard.defaultBilling')}\n            </B3Tag>\n          )}\n        </TagBox>\n\n        <Typography variant=\"body1\">{`${addressInfo.firstName} ${addressInfo.lastName}`}</Typography>\n        <Typography variant=\"body1\">{addressInfo.company || ''}</Typography>\n        <Typography variant=\"body1\">{addressInfo.addressLine1}</Typography>\n        <Typography variant=\"body1\">{addressInfo.addressLine2}</Typography>\n        <Typography variant=\"body1\">{`${addressInfo.city}, ${addressInfo.state} ${addressInfo.zipCode}, ${addressInfo.country}`}</Typography>\n        <Typography variant=\"body1\">{addressInfo.phoneNumber}</Typography>\n\n        <Flex>\n          <CustomButton\n            variant=\"text\"\n            onClick={() => {\n              onSetAddress(addressInfo);\n            }}\n          >\n            {b3Lang('quoteDraft.addressItemCard.chooseAddress')}\n          </CustomButton>\n        </Flex>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, Grid } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\nimport B3FilterSearch from '@/components/filter/B3FilterSearch';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { AddressItemType } from '@/types/address';\n\nimport { AddressItemCard } from './AddressItemCard';\n\ntype AddressItemProps = {\n  node: AddressItemType;\n};\n\ninterface ChooseAddressProps {\n  isOpen: boolean;\n  addressList: AddressItemProps[];\n  closeModal: () => void;\n  handleChangeAddress: (address: AddressItemType) => void;\n  type: string;\n}\n\ninterface RefProps {\n  copyList: AddressItemType[];\n}\n\nfunction ChooseAddress({\n  isOpen,\n  closeModal,\n  handleChangeAddress,\n  addressList = [],\n  type,\n}: ChooseAddressProps) {\n  const recordList = useRef<RefProps>({\n    copyList: [],\n  });\n  const b3Lang = useB3Lang();\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const [list, setList] = useState<AddressItemType[]>([]);\n\n  useEffect(() => {\n    if (addressList.length) {\n      const allList = addressList.map((item: AddressItemProps) => item.node);\n      const newList = allList.filter(\n        (item) =>\n          (item.isShipping === 1 && type === 'shipping') ||\n          (item.isBilling === 1 && type === 'billing'),\n      );\n      recordList.current.copyList = isB2BUser ? newList : allList;\n      setList(newList);\n    }\n  }, [addressList, type, isB2BUser]);\n\n  const keys = [\n    'address',\n    'firstName',\n    'lastName',\n    'phoneNumber',\n    'state',\n    'zipCode',\n    'country',\n    'label',\n    'address',\n    'addressLine1',\n  ];\n\n  const handleSearchProduct = (q: string) => {\n    if (!q && recordList?.current) {\n      setList(recordList.current.copyList);\n      return;\n    }\n    const newList: AddressItemType[] = [];\n    keys.forEach((key: string) => {\n      let flag = true;\n      list.forEach((item: AddressItemType) => {\n        if (item[key].includes(q) && flag) {\n          newList.push(item);\n          flag = false;\n        }\n      });\n    });\n    setList(newList);\n  };\n\n  const handleCancelClicked = () => {\n    closeModal();\n  };\n\n  return (\n    <B3Dialog\n      fullWidth\n      isOpen={isOpen}\n      handleLeftClick={handleCancelClicked}\n      title={b3Lang('quoteDraft.chooseAddress.chooseFromSaved')}\n      showRightBtn={false}\n      maxWidth=\"lg\"\n    >\n      <Box>\n        <B3FilterSearch\n          searchBGColor=\"rgba(0, 0, 0, 0.06)\"\n          placeholder={b3Lang('quoteDraft.chooseAddress.searchAddress')}\n          handleChange={(e) => {\n            handleSearchProduct(e);\n          }}\n        />\n      </Box>\n      <Box\n        sx={{\n          mt: '20px',\n        }}\n      >\n        <Grid container spacing={2}>\n          {list.map((addressItem: AddressItemType) => (\n            <Grid item key={addressItem.id} xs={4}>\n              <AddressItemCard item={addressItem} onSetAddress={handleChangeAddress} />\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n    </B3Dialog>\n  );\n}\n\nexport default ChooseAddress;\n","import { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, Typography } from '@mui/material';\nimport cloneDeep from 'lodash-es/cloneDeep';\n\nimport { B3CustomForm } from '@/components';\nimport { useGetCountry, useMobile } from '@/hooks';\nimport { AddressItemType } from '@/types/address';\nimport { BillingAddress, ContactInfo, ShippingAddress } from '@/types/quotes';\n\nimport ChooseAddress from './ChooseAddress';\n\ntype AddressItemProps = {\n  node: AddressItemType;\n};\n\ninterface AccountFormFieldsProps extends Record<string, any> {\n  name: string;\n  label?: string;\n  required?: boolean;\n  fieldType?: string;\n  default?: string | Array<any> | number;\n  xs: number;\n  variant: string;\n  size: string;\n  options?: any[];\n}\n\ninterface AddressProps {\n  title: string;\n  pr?: string | number;\n  pl?: string | number;\n  addressList?: AddressItemProps[];\n  info: ContactInfo | ShippingAddress | BillingAddress;\n  role: string | number;\n  accountFormFields: AccountFormFieldsProps[];\n  shippingSameAsBilling: boolean;\n  type: string;\n  setBillingChange: (value: boolean) => void;\n}\n\nexport interface FormFieldsProps extends Record<string, any> {\n  name: string;\n  label?: string;\n  required?: boolean;\n  fieldType?: string;\n  default?: string | Array<any> | number;\n  xs: number;\n  variant: string;\n  size: string;\n  options?: any[];\n  replaceOptions?: {\n    label: string;\n    value: string;\n  };\n}\n\nexport interface Country {\n  countryCode: string;\n  countryName: string;\n  id?: string;\n  states: [];\n}\nexport interface State {\n  stateCode?: string;\n  stateName?: string;\n  id?: string;\n}\n\nfunction QuoteAddress(\n  {\n    title,\n    addressList = [],\n    pr = 0,\n    pl = 0,\n    info,\n    role,\n    accountFormFields = [],\n    shippingSameAsBilling = false,\n    type,\n    setBillingChange,\n  }: AddressProps,\n  ref: any,\n) {\n  const {\n    control,\n    getValues,\n    formState: { errors },\n    setValue,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const [isMobile] = useMobile();\n  const b3Lang = useB3Lang();\n\n  type InfoKeys = keyof typeof info;\n\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const [quoteAddress, setQuoteAddress] = useState<AccountFormFieldsProps[]>(\n    cloneDeep(accountFormFields),\n  );\n\n  useGetCountry({\n    control,\n    setValue,\n    getValues,\n    setAddress: setQuoteAddress,\n    addresses: quoteAddress,\n  });\n\n  const getContactInfoValue = () => getValues();\n  const setShippingInfoValue = (address: any) => {\n    const addressKey = Object.keys(address);\n\n    addressKey.forEach((item: string) => {\n      if (item === 'company') return;\n      setValue(item, address[item]);\n    });\n  };\n\n  useImperativeHandle(ref, () => ({\n    getContactInfoValue,\n    setShippingInfoValue,\n  }));\n\n  const handleAddressChoose = () => {\n    setOpen(true);\n  };\n\n  const handleCloseAddressChoose = () => {\n    setOpen(false);\n  };\n\n  const handleChangeAddress = (address: AddressItemType) => {\n    const addressItem: any = {\n      label: address?.label || '',\n      firstName: address?.firstName || '',\n      lastName: address?.lastName || '',\n      company: address?.company || '',\n      country: address?.countryCode || '',\n      address: address?.addressLine1 || '',\n      apartment: address?.addressLine2 || '',\n      city: address?.city || '',\n      state: address?.state || '',\n      zipCode: address?.zipCode || '',\n      phoneNumber: address?.phoneNumber || '',\n    };\n\n    Object.keys(addressItem).forEach((item: string) => {\n      if (item === 'company') return;\n      setValue(item, addressItem[item]);\n    });\n    if (type === 'billing' && shippingSameAsBilling) {\n      setBillingChange(true);\n    }\n\n    handleCloseAddressChoose();\n  };\n\n  useEffect(() => {\n    if (JSON.stringify(info) !== '{}') {\n      Object.keys(info).forEach((item: string) => {\n        setValue(item, info[item as InfoKeys]);\n      });\n    }\n    // Disabling this rule as dispatcher dep setValue is the same between renders\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [info]);\n\n  return (\n    <Box width={isMobile ? '100%' : '50%'} mt={isMobile ? '2rem' : '0'} pr={pr} pl={pl}>\n      <Box\n        sx={{\n          display: 'flex',\n          mb: '20px',\n        }}\n      >\n        <Typography\n          sx={{\n            fontWeight: 400,\n            fontSize: '24px',\n            height: '32px',\n            mr: '16px',\n          }}\n        >\n          {title}\n        </Typography>\n        {Number(role) !== 100 && (\n          <Typography\n            onClick={handleAddressChoose}\n            sx={{\n              fontWeight: 500,\n              fontSize: '14px',\n              color: 'primary.main',\n              display: 'flex',\n              alignItems: 'flex-end',\n              cursor: 'pointer',\n              textTransform: 'uppercase',\n            }}\n          >\n            {b3Lang('quoteDraft.quoteAddress.chooseFromSaved')}\n          </Typography>\n        )}\n      </Box>\n\n      <B3CustomForm\n        formFields={quoteAddress}\n        errors={errors}\n        control={control}\n        getValues={getValues}\n        setValue={setValue}\n      />\n\n      <ChooseAddress\n        isOpen={isOpen}\n        handleChangeAddress={handleChangeAddress}\n        closeModal={handleCloseAddressChoose}\n        addressList={addressList}\n        type={type}\n      />\n    </Box>\n  );\n}\n\nexport default forwardRef(QuoteAddress);\n","import { useB3Lang } from '@b3/lang';\nimport { Box, Typography } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\n\ninterface QuoteSubmissionResponseProps {\n  isOpen: boolean;\n  onClose: () => void;\n  quoteSubmissionResponseInfo: {\n    value: string;\n    key: string;\n    message: string;\n    title: string;\n  };\n}\n\nfunction QuoteSubmissionResponse({\n  isOpen = false,\n  onClose,\n  quoteSubmissionResponseInfo,\n}: QuoteSubmissionResponseProps) {\n  const b3Lang = useB3Lang();\n  const messageArr = quoteSubmissionResponseInfo.message.split('\\n');\n\n  return (\n    <Box\n      sx={{\n        '#b2b-dialog-container': {\n          '& [aria-labelledby=\"alert-dialog-title\"]': {\n            width: '500px',\n            maxHeight: '500px',\n          },\n\n          '& h2': {\n            color: '#313440',\n          },\n          '& h6': {\n            color: '#313440',\n            fontSize: '16px',\n          },\n        },\n      }}\n    >\n      <B3Dialog\n        isOpen={isOpen}\n        title={quoteSubmissionResponseInfo.title}\n        showLeftBtn={false}\n        handRightClick={onClose}\n        isShowBordered={false}\n        rightSizeBtn={b3Lang('quoteDraft.submission.response.button.text')}\n        maxWidth={false}\n      >\n        {messageArr.map((item) => {\n          return (\n            <Typography\n              variant=\"subtitle2\"\n              sx={{\n                marginTop: '1rem',\n              }}\n            >\n              {item}\n            </Typography>\n          );\n        })}\n      </B3Dialog>\n    </Box>\n  );\n}\n\nexport default QuoteSubmissionResponse;\n","import { store } from '@/store';\nimport { getVariantInfoDisplayPrice } from '@/utils/b3Product/b3Product';\n\nconst getQuoteDraftShowPriceTBD = (products: CustomFieldItems[]) => {\n  const {\n    global: {\n      blockPendingQuoteNonPurchasableOOS: { isEnableProduct },\n    },\n  } = store.getState();\n\n  if (!isEnableProduct) return false;\n\n  const isHidePrice = products.some((product) => {\n    if (!getVariantInfoDisplayPrice(product.node.basePrice, product)) return true;\n\n    return false;\n  });\n\n  return isHidePrice;\n};\n\nexport default getQuoteDraftShowPriceTBD;\n","import { forwardRef, Ref, useCallback, useEffect, useImperativeHandle, useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, Card, CardContent, Grid, Typography } from '@mui/material';\n\nimport { useAppSelector } from '@/store';\nimport { currencyFormat } from '@/utils';\nimport { getBCPrice } from '@/utils/b3Product/b3Product';\n\nimport getQuoteDraftShowPriceTBD from '../shared/utils';\n\ninterface Summary {\n  subtotal: number;\n  shipping: number;\n  tax: number;\n  grandTotal: number;\n}\n\nconst defaultSummary: Summary = {\n  subtotal: 0,\n  shipping: 0,\n  tax: 0,\n  grandTotal: 0,\n};\n\nconst QuoteSummary = forwardRef((_, ref: Ref<unknown>) => {\n  const b3Lang = useB3Lang();\n\n  const [quoteSummary, setQuoteSummary] = useState<Summary>({\n    ...defaultSummary,\n  });\n\n  const [isHideQuoteDraftPrice, setHideQuoteDraftPrice] = useState<boolean>(false);\n  const showInclusiveTaxPrice = useAppSelector(({ global }) => global.showInclusiveTaxPrice);\n  const draftQuoteList = useAppSelector(({ quoteInfo }) => quoteInfo.draftQuoteList);\n\n  const priceCalc = (price: number) => parseFloat(String(price));\n\n  const getSummary = useCallback(() => {\n    const isHidePrice = getQuoteDraftShowPriceTBD(draftQuoteList);\n\n    setHideQuoteDraftPrice(isHidePrice);\n\n    const newQuoteSummary = draftQuoteList.reduce(\n      (summary: Summary, product: CustomFieldItems) => {\n        const { basePrice, taxPrice: productTax = 0, quantity } = product.node;\n\n        let { subtotal, grandTotal, tax } = summary;\n\n        const { shipping } = summary;\n\n        const price = getBCPrice(Number(basePrice), Number(productTax));\n\n        subtotal += priceCalc(price * quantity);\n        tax += priceCalc(Number(productTax) * Number(quantity));\n\n        const totalPrice = showInclusiveTaxPrice ? subtotal : subtotal + tax;\n\n        grandTotal = totalPrice + shipping;\n\n        return {\n          grandTotal,\n          shipping,\n          tax,\n          subtotal,\n        };\n      },\n      {\n        ...defaultSummary,\n      },\n    );\n\n    setQuoteSummary(newQuoteSummary);\n  }, [showInclusiveTaxPrice, draftQuoteList]);\n\n  useEffect(() => {\n    getSummary();\n  }, [getSummary]);\n\n  useImperativeHandle(ref, () => ({\n    refreshSummary: () => getSummary(),\n  }));\n\n  const priceFormat = (price: number) => currencyFormat(price);\n\n  const showPrice = (price: string | number): string | number => {\n    if (isHideQuoteDraftPrice) return b3Lang('quoteDraft.quoteSummary.tbd');\n\n    return price;\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <Box>\n          <Typography variant=\"h5\">{b3Lang('quoteDraft.quoteSummary.summary')}</Typography>\n          <Box\n            sx={{\n              marginTop: '20px',\n              color: '#212121',\n            }}\n          >\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              sx={{\n                margin: '4px 0',\n              }}\n            >\n              <Typography>{b3Lang('quoteDraft.quoteSummary.subTotal')}</Typography>\n              <Typography>{showPrice(priceFormat(quoteSummary.subtotal))}</Typography>\n            </Grid>\n\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              sx={{\n                margin: '4px 0',\n              }}\n            >\n              <Typography>{b3Lang('quoteDraft.quoteSummary.shipping')}</Typography>\n              <Typography>{b3Lang('quoteDraft.quoteSummary.tbd')}</Typography>\n            </Grid>\n\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              sx={{\n                margin: '4px 0',\n              }}\n            >\n              <Typography>{b3Lang('quoteDraft.quoteSummary.tax')}</Typography>\n              <Typography>{showPrice(priceFormat(quoteSummary.tax))}</Typography>\n            </Grid>\n\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              sx={{\n                margin: '24px 0 0',\n              }}\n            >\n              <Typography\n                sx={{\n                  fontWeight: 'bold',\n                }}\n              >\n                {b3Lang('quoteDraft.quoteSummary.grandTotal')}\n              </Typography>\n              <Typography\n                sx={{\n                  fontWeight: 'bold',\n                }}\n              >\n                {showPrice(priceFormat(quoteSummary.grandTotal))}\n              </Typography>\n            </Grid>\n          </Box>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n});\nexport default QuoteSummary;\n","import { FC, ReactElement, useCallback, useEffect, useState } from 'react';\n\nimport { useMobile } from '@/hooks';\n\nimport { B3Table, isNodeWrapper, PossibleNodeWrapper, TableColumnItem } from './B3Table';\n\nexport interface TablePagination {\n  offset: number;\n  first: number;\n}\n\ninterface PaginationTableProps<Row extends object> {\n  tableFixed?: boolean;\n  tableHeaderHide?: boolean;\n  columnItems: TableColumnItem<Row>[];\n  itemSpacing?: number;\n  itemXs?: number;\n  rowsPerPageOptions?: number[];\n  showPagination?: boolean;\n  renderItem?: (row: Row, index?: number, checkBox?: () => ReactElement) => ReactElement;\n  CollapseComponent?: FC<{ row: Row }>;\n  isCustomRender?: boolean;\n  noDataText?: string;\n  tableKey?: string;\n  showCheckbox?: boolean;\n  showSelectAllCheckbox?: boolean;\n  selectedSymbol?: string;\n  isSelectOtherPageCheckbox?: boolean;\n  showBorder?: boolean;\n  getSelectCheckbox?: (arr: Array<string | number>) => void;\n  hover?: boolean;\n  labelRowsPerPage?: string;\n  itemIsMobileSpacing?: number;\n  disableCheckbox?: boolean;\n  applyAllDisableCheckbox?: boolean;\n  onClickRow?: (item: Row, index?: number) => void;\n  showRowsPerPageOptions?: boolean;\n  sortDirection?: 'asc' | 'desc';\n  sortByFn?: (e: { key: string }) => void;\n  orderBy?: string;\n  pageType?: string;\n  items: PossibleNodeWrapper<Row>[];\n}\n\nfunction PaginationTable<Row extends object>({\n  columnItems,\n  isCustomRender = false,\n  tableKey,\n  renderItem,\n  noDataText = '',\n  tableFixed = false,\n  tableHeaderHide = false,\n  rowsPerPageOptions = [10, 20, 30],\n  itemSpacing = 2,\n  itemXs = 4,\n  showCheckbox = false,\n  showSelectAllCheckbox = false,\n  selectedSymbol = 'id',\n  isSelectOtherPageCheckbox = false,\n  showBorder = true,\n  getSelectCheckbox,\n  hover = false,\n  labelRowsPerPage = '',\n  itemIsMobileSpacing = 2,\n  disableCheckbox = false,\n  onClickRow,\n  showPagination = true,\n  showRowsPerPageOptions = true,\n  CollapseComponent,\n  applyAllDisableCheckbox = true,\n  sortDirection = 'asc',\n  sortByFn = () => {},\n  orderBy = '',\n  pageType = '',\n  items,\n}: PaginationTableProps<Row>) {\n  const initPagination = {\n    offset: 0,\n    first: rowsPerPageOptions[0],\n  };\n\n  const [pagination, setPagination] = useState<TablePagination>(initPagination);\n\n  const [isAllSelect, setAllSelect] = useState<boolean>(false);\n\n  const [selectCheckbox, setSelectCheckbox] = useState<Array<string | number>>([]);\n\n  const [isMobile] = useMobile();\n\n  useEffect(() => {\n    if (getSelectCheckbox) getSelectCheckbox(selectCheckbox);\n    // disabling as getSelectCheckbox will trigger rerenders if the user passes a function that is not memoized\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectCheckbox, items]);\n\n  const handlePaginationChange = async (pagination: TablePagination) => {\n    setPagination(pagination);\n  };\n\n  const tablePagination = {\n    ...pagination,\n    count: items.length,\n  };\n\n  const getCurrentAllItemsSelect = useCallback(() => {\n    if (!selectCheckbox.length) return false;\n    return items.every((item) => {\n      const option = isNodeWrapper(item) ? item.node : item;\n\n      // @ts-expect-error typed previously as an any\n      return selectCheckbox.includes(option[selectedSymbol]);\n    });\n  }, [items, selectCheckbox, selectedSymbol]);\n\n  useEffect(() => {\n    if (isSelectOtherPageCheckbox) {\n      const flag = getCurrentAllItemsSelect();\n      setAllSelect(flag);\n    }\n  }, [selectCheckbox, pagination, isSelectOtherPageCheckbox, getCurrentAllItemsSelect]);\n\n  const handleSelectAllItems = () => {\n    const singlePageCheckbox = () => {\n      if (selectCheckbox.length === items.length) {\n        setSelectCheckbox([]);\n      } else {\n        const selects: Array<string | number> = [];\n        items.forEach((item) => {\n          const option = isNodeWrapper(item) ? item.node : item;\n          if (option) {\n            if (pageType === 'shoppingListDetailsTable') {\n              selects.push(\n                // @ts-expect-error typed previously as an any\n                option.quantity > 0 || !option.disableCurrentCheckbox ? option[selectedSymbol] : '',\n              );\n            } else {\n              // @ts-expect-error typed previously as an any\n              selects.push(option[selectedSymbol]);\n            }\n          }\n        });\n        setSelectCheckbox(selects);\n      }\n    };\n\n    const otherPageCheckbox = () => {\n      const flag = getCurrentAllItemsSelect();\n\n      const newSelectCheckbox = [...selectCheckbox];\n      if (flag) {\n        items.forEach((item) => {\n          const option = isNodeWrapper(item) ? item.node : item;\n          // @ts-expect-error typed previously as an any\n          const index = newSelectCheckbox.findIndex((item) => item === option[selectedSymbol]);\n          newSelectCheckbox.splice(index, 1);\n        });\n      } else {\n        items.forEach((item) => {\n          const option = isNodeWrapper(item) ? item.node : item;\n          // @ts-expect-error typed previously as an any\n          if (!selectCheckbox.includes(option[selectedSymbol])) {\n            // @ts-expect-error typed previously as an any\n            newSelectCheckbox.push(option[selectedSymbol]);\n          }\n        });\n      }\n\n      setSelectCheckbox(newSelectCheckbox);\n    };\n\n    if (isSelectOtherPageCheckbox) {\n      otherPageCheckbox();\n    } else {\n      singlePageCheckbox();\n    }\n  };\n\n  const handleSelectOneItem = (id: string | number) => {\n    const selects = [...selectCheckbox];\n    const index = selects.indexOf(id);\n    if (index !== -1) {\n      selects.splice(index, 1);\n    } else {\n      selects.push(id);\n    }\n    setSelectCheckbox(selects);\n  };\n\n  return (\n    <B3Table\n      hover={hover}\n      columnItems={columnItems || []}\n      listItems={items.slice(pagination.offset, pagination.offset + pagination.first)}\n      pagination={tablePagination}\n      rowsPerPageOptions={rowsPerPageOptions}\n      onPaginationChange={handlePaginationChange}\n      isCustomRender={isCustomRender}\n      isInfiniteScroll={isMobile}\n      renderItem={renderItem}\n      tableFixed={tableFixed}\n      tableHeaderHide={tableHeaderHide}\n      itemSpacing={itemSpacing}\n      itemXs={itemXs}\n      noDataText={noDataText}\n      tableKey={tableKey}\n      itemIsMobileSpacing={itemIsMobileSpacing}\n      showCheckbox={showCheckbox}\n      showSelectAllCheckbox={showSelectAllCheckbox}\n      disableCheckbox={disableCheckbox}\n      selectedSymbol={selectedSymbol}\n      isSelectOtherPageCheckbox={isSelectOtherPageCheckbox}\n      isAllSelect={isAllSelect}\n      selectCheckbox={selectCheckbox}\n      handleSelectAllItems={handleSelectAllItems}\n      handleSelectOneItem={handleSelectOneItem}\n      showBorder={showBorder}\n      labelRowsPerPage={labelRowsPerPage}\n      onClickRow={onClickRow}\n      showPagination={showPagination}\n      showRowsPerPageOptions={showRowsPerPageOptions}\n      CollapseComponent={CollapseComponent}\n      applyAllDisableCheckbox={applyAllDisableCheckbox}\n      sortDirection={sortDirection}\n      sortByFn={sortByFn}\n      orderBy={orderBy}\n    />\n  );\n}\n\nexport default PaginationTable;\n","import { useB3Lang } from '@b3/lang';\nimport { Delete, Edit } from '@mui/icons-material';\nimport { Box, CardContent, styled, TextField, Typography } from '@mui/material';\n\nimport { PRODUCT_DEFAULT_IMAGE } from '@/constants';\nimport { currencyFormat } from '@/utils';\nimport { getBCPrice, getDisplayPrice } from '@/utils/b3Product/b3Product';\n\nimport { getProductOptionsFields } from '../../../utils/b3Product/shared/config';\n\ninterface QuoteTableCardProps {\n  item: any;\n  onEdit: (item: any, itemId: string) => void;\n  onDelete: (id: string) => void;\n  handleUpdateProductQty: (id: number | string, value: number | string) => void;\n  idEdit: boolean;\n  len: number;\n  itemIndex?: number;\n}\n\nconst StyledImage = styled('img')(() => ({\n  maxWidth: '60px',\n  height: 'auto',\n  marginRight: '0.5rem',\n}));\n\nfunction QuoteTableCard(props: QuoteTableCardProps) {\n  const {\n    item: quoteTableItem,\n    onEdit,\n    onDelete,\n    handleUpdateProductQty,\n    idEdit,\n    len,\n    itemIndex,\n  } = props;\n\n  const {\n    basePrice,\n    quantity,\n    id,\n    primaryImage,\n    productName,\n    variantSku,\n    productsSearch,\n    taxPrice = 0,\n  } = quoteTableItem;\n\n  const b3Lang = useB3Lang();\n\n  const price = getBCPrice(Number(basePrice), Number(taxPrice));\n\n  const total = price * Number(quantity);\n\n  const product: any = {\n    ...quoteTableItem.productsSearch,\n    selectOptions: quoteTableItem.optionList,\n  };\n\n  const productFields = getProductOptionsFields(product, {});\n\n  const optionList = JSON.parse(quoteTableItem.optionList);\n  const optionsValue: CustomFieldItems[] = productFields.filter((item) => item.valueText);\n\n  const { productUrl } = productsSearch;\n\n  const singlePrice = getDisplayPrice({\n    price: currencyFormat(price),\n    productInfo: quoteTableItem,\n    showText: b3Lang('quoteDraft.quoteSummary.tbd'),\n  });\n\n  const totalPrice = getDisplayPrice({\n    price: currencyFormat(total),\n    productInfo: quoteTableItem,\n    showText: b3Lang('quoteDraft.quoteSummary.tbd'),\n  });\n\n  return (\n    <Box\n      key={quoteTableItem.id}\n      width=\"100%\"\n      sx={{\n        borderTop: '1px solid #D9DCE9',\n        borderBottom: itemIndex === len - 1 ? '1px solid #D9DCE9' : '',\n      }}\n    >\n      <CardContent\n        sx={{\n          color: '#313440',\n          display: 'flex',\n          pl: 0,\n        }}\n      >\n        <Box>\n          <StyledImage\n            src={primaryImage || PRODUCT_DEFAULT_IMAGE}\n            alt=\"Product-img\"\n            loading=\"lazy\"\n          />\n        </Box>\n        <Box\n          sx={{\n            flex: 1,\n          }}\n        >\n          <Typography\n            variant=\"body1\"\n            color=\"#212121\"\n            onClick={() => {\n              const {\n                location: { origin },\n              } = window;\n\n              if (productUrl) {\n                window.location.href = `${origin}${productUrl}`;\n              }\n            }}\n            sx={{\n              cursor: 'pointer',\n            }}\n          >\n            {productName}\n          </Typography>\n          <Typography variant=\"body1\" color=\"#616161\">\n            {variantSku}\n          </Typography>\n          <Box\n            sx={{\n              margin: '1rem 0',\n            }}\n          >\n            {optionList.length > 0 && optionsValue.length > 0 && (\n              <Box>\n                {optionsValue.map((option: any) => (\n                  <Typography\n                    sx={{\n                      fontSize: '0.75rem',\n                      lineHeight: '1.5',\n                      color: '#455A64',\n                    }}\n                    key={option.valueLabel}\n                  >\n                    {`${option.valueLabel}: ${option.valueText}`}\n                  </Typography>\n                ))}\n              </Box>\n            )}\n          </Box>\n\n          <Typography sx={{ fontSize: '14px' }}>{`Price: ${singlePrice}`}</Typography>\n\n          <TextField\n            size=\"small\"\n            type=\"number\"\n            variant=\"filled\"\n            label=\"qty\"\n            disabled={!idEdit}\n            inputProps={{\n              inputMode: 'numeric',\n              pattern: '[0-9]*',\n            }}\n            value={quantity}\n            sx={{\n              margin: '1rem 0',\n              width: '60%',\n              maxWidth: '100px',\n              '& label': {\n                fontSize: '14px',\n              },\n              '& input': {\n                fontSize: '14px',\n              },\n            }}\n            onChange={(e) => {\n              handleUpdateProductQty(quoteTableItem, e.target.value);\n            }}\n          />\n          <Typography sx={{ fontSize: '14px' }}>{`Total: ${totalPrice}`}</Typography>\n          <Box\n            sx={{\n              marginTop: '1rem',\n              textAlign: 'end',\n            }}\n            id=\"shoppingList-actionList-mobile\"\n          >\n            {optionList.length > 0 && idEdit && (\n              <Edit\n                sx={{\n                  marginRight: '0.5rem',\n                  cursor: 'pointer',\n                  color: 'rgba(0, 0, 0, 0.54)',\n                }}\n                onClick={() => {\n                  onEdit(\n                    {\n                      ...productsSearch,\n                      quantity,\n                      selectOptions: quoteTableItem.optionList,\n                    },\n                    id,\n                  );\n                }}\n              />\n            )}\n            {idEdit && (\n              <Delete\n                sx={{\n                  cursor: 'pointer',\n                  color: 'rgba(0, 0, 0, 0.54)',\n                }}\n                onClick={() => {\n                  onDelete(id);\n                }}\n              />\n            )}\n          </Box>\n        </Box>\n      </CardContent>\n    </Box>\n  );\n}\n\nexport default QuoteTableCard;\n","import { useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Delete, Edit } from '@mui/icons-material';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport { Box, styled, TextField, Typography } from '@mui/material';\nimport ceil from 'lodash-es/ceil';\n\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport PaginationTable from '@/components/table/PaginationTable';\nimport { PRODUCT_DEFAULT_IMAGE } from '@/constants';\nimport {\n  deleteProductFromDraftQuoteList,\n  setDraftProduct,\n  useAppDispatch,\n  useAppSelector,\n} from '@/store';\nimport { Product } from '@/types';\nimport { QuoteItem } from '@/types/quotes';\nimport { currencyFormat, snackbar } from '@/utils';\nimport {\n  calculateProductListPrice,\n  getBCPrice,\n  getDisplayPrice,\n  getVariantInfoOOSAndPurchase,\n  setModifierQtyPrice,\n} from '@/utils/b3Product/b3Product';\nimport { getProductOptionsFields } from '@/utils/b3Product/shared/config';\n\nimport ChooseOptionsDialog from '../../ShoppingListDetails/components/ChooseOptionsDialog';\n\nimport QuoteTableCard from './QuoteTableCard';\n\ninterface ShoppingDetailTableProps {\n  total: number;\n  items: any[];\n  idEdit?: boolean;\n  isB2BUser: boolean;\n  updateSummary: () => void;\n}\n\nconst StyledQuoteTableContainer = styled('div')(() => ({\n  backgroundColor: '#FFFFFF',\n  padding: '0',\n  width: '100%',\n\n  '& tbody': {\n    '& tr': {\n      '& td': {\n        verticalAlign: 'top',\n      },\n      '& td: first-of-type': {\n        verticalAlign: 'inherit',\n      },\n    },\n    '& tr: hover': {\n      '& #shoppingList-actionList': {\n        opacity: 1,\n      },\n    },\n  },\n}));\n\nconst StyledImage = styled('img')(() => ({\n  maxWidth: '60px',\n  height: 'auto',\n  marginRight: '0.5rem',\n}));\n\nconst StyledTextField = styled(TextField)(() => ({\n  '& input': {\n    paddingTop: '12px',\n    paddingRight: '6px',\n  },\n}));\nconst QUOTE_PRODUCT_QTY_MAX = 1000000;\n\nfunction QuoteTable(props: ShoppingDetailTableProps) {\n  const { total, items, idEdit = true, isB2BUser, updateSummary } = props;\n  const b3Lang = useB3Lang();\n  const dispatch = useAppDispatch();\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n  const [chooseOptionsOpen, setSelectedOptionsOpen] = useState(false);\n  const [optionsProduct, setOptionsProduct] = useState<any>(null);\n  const [optionsProductId, setOptionsProductId] = useState<string>('');\n\n  const isEnableProduct = useAppSelector(\n    ({ global }) => global.blockPendingQuoteNonPurchasableOOS.isEnableProduct,\n  );\n\n  const handleUpdateProductQty = async (row: any, value: number | string) => {\n    const product = await setModifierQtyPrice(row, Number(value));\n\n    dispatch(\n      setDraftProduct({\n        id: product.id,\n        product: {\n          node: product,\n        },\n      }),\n    );\n    updateSummary();\n  };\n\n  const handleCheckProductQty = async (row: any, value: number | string) => {\n    let newQty = ceil(Number(value));\n    if (newQty === Number(value) && newQty >= 1 && newQty <= QUOTE_PRODUCT_QTY_MAX) return;\n\n    if (Number(value) < 1) {\n      newQty = 1;\n    }\n\n    if (Number(value) > QUOTE_PRODUCT_QTY_MAX) {\n      newQty = QUOTE_PRODUCT_QTY_MAX;\n    }\n\n    handleUpdateProductQty(row, newQty);\n  };\n\n  const handleDeleteClick = (id: string) => {\n    dispatch(deleteProductFromDraftQuoteList(id));\n    updateSummary();\n  };\n\n  const handleChooseOptionsDialogCancel = () => {\n    setSelectedOptionsOpen(false);\n  };\n\n  const handleOpenProductEdit = (product: Product, itemId: string) => {\n    setOptionsProduct(product);\n    setOptionsProductId(itemId);\n    setSelectedOptionsOpen(true);\n  };\n\n  const getNewQuoteProduct = (products: Product[]): QuoteItem[] =>\n    products.map((product) => {\n      const {\n        variantId,\n        newSelectOptionList,\n        id,\n        productId,\n        name: productName,\n        quantity,\n        variants = [],\n        basePrice,\n        taxPrice = 0,\n        calculatedNoTaxPrice = 0,\n        calculatedTaxPrice = 0,\n      } = product;\n\n      let [variantInfo] = variants;\n      if (variants.length > 1) {\n        variantInfo = variants.find((item) => item.variant_id === variantId) ?? variantInfo;\n      }\n\n      const { image_url: primaryImage = '', sku: variantSku } = variantInfo;\n\n      let selectOptions;\n      try {\n        selectOptions = JSON.stringify(newSelectOptionList);\n      } catch (error) {\n        selectOptions = '[]';\n      }\n\n      const taxExclusive = variantInfo!.bc_calculated_price?.tax_exclusive || 0;\n      const basePriceExclusiveTax = basePrice || taxExclusive;\n\n      return {\n        node: {\n          basePrice: basePriceExclusiveTax,\n          taxPrice,\n          optionList: selectOptions,\n          id: id.toString(),\n          primaryImage,\n          productId,\n          productName,\n          productsSearch: {\n            ...product,\n            selectOptions,\n          },\n          quantity: Number(quantity),\n          variantSku,\n          calculatedTaxPrice,\n          calculatedNoTaxPrice,\n          calculatedValue: {},\n        },\n      };\n    });\n\n  const handleChooseOptionsDialogConfirm = async (products: Product[]) => {\n    await calculateProductListPrice(products);\n    const newProducts = getNewQuoteProduct(products);\n\n    newProducts.forEach((product) => {\n      const { basePrice } = product.node;\n      const newProduct = product;\n      newProduct.node.id = optionsProductId;\n\n      newProduct.node.basePrice = basePrice;\n    });\n\n    setSelectedOptionsOpen(false);\n\n    dispatch(setDraftProduct({ id: optionsProductId, product: newProducts[0] }));\n    updateSummary();\n\n    snackbar.success(b3Lang('quoteDraft.quoteTable.productUpdated'));\n  };\n\n  const columnItems: TableColumnItem<QuoteItem['node']>[] = [\n    {\n      key: 'Product',\n      title: b3Lang('quoteDraft.quoteTable.product'),\n      render: (row: CustomFieldItems) => {\n        const product: any = {\n          ...row.productsSearch,\n          selectOptions: row.optionList,\n        };\n        const productFields = getProductOptionsFields(product, {});\n\n        const optionList = JSON.parse(row.optionList);\n        const optionsValue: CustomFieldItems[] = productFields.filter((item) => item.valueText);\n        const currentProduct = getVariantInfoOOSAndPurchase(row);\n        const inventoryTracking =\n          row?.productsSearch?.inventoryTracking || row?.inventoryTracking || 'none';\n\n        let inventoryLevel = row?.productsSearch?.inventoryLevel || row?.inventoryLevel || 0;\n        if (inventoryTracking === 'variant') {\n          const currentVariant = row?.productsSearch?.variants.find(\n            (variant: CustomFieldItems) => variant.sku === row.variantSku,\n          );\n\n          inventoryLevel = currentVariant?.inventory_level;\n        }\n\n        return (\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'flex-start',\n            }}\n          >\n            <StyledImage\n              src={row.primaryImage || PRODUCT_DEFAULT_IMAGE}\n              alt=\"Product-img\"\n              loading=\"lazy\"\n            />\n            <Box>\n              <Typography\n                variant=\"body1\"\n                color=\"#212121\"\n                onClick={() => {\n                  const {\n                    location: { origin },\n                  } = window;\n\n                  if (product?.productUrl) {\n                    window.location.href = `${origin}${product?.productUrl}`;\n                  }\n                }}\n                sx={{\n                  cursor: 'pointer',\n                }}\n              >\n                {row.productName}\n              </Typography>\n              <Typography variant=\"body1\" color=\"#616161\">\n                {row.variantSku}\n              </Typography>\n              {optionList.length > 0 && optionsValue.length > 0 && (\n                <Box>\n                  {optionsValue.map((option: any) => (\n                    <Typography\n                      sx={{\n                        fontSize: '0.75rem',\n                        lineHeight: '1.5',\n                        color: '#455A64',\n                      }}\n                      key={option.valueLabel}\n                    >\n                      {`${option.valueLabel}: ${option.valueText}`}\n                    </Typography>\n                  ))}\n                </Box>\n              )}\n\n              {!isEnableProduct && currentProduct?.name && (\n                <Box sx={{ color: 'red' }}>\n                  <Box\n                    sx={{\n                      mt: '1rem',\n                      display: 'flex',\n                      alignItems: 'center',\n                      '& svg': { mr: '0.5rem' },\n                    }}\n                  >\n                    <WarningIcon color=\"error\" fontSize=\"small\" />\n                    {currentProduct?.type === 'oos'\n                      ? b3Lang('quoteDraft.quoteTable.outOfStock.tip')\n                      : b3Lang('quoteDraft.quoteTable.unavailable.tip')}\n                  </Box>\n                  {currentProduct?.type === 'oos' && (\n                    <Box>\n                      {b3Lang('quoteDraft.quoteTable.oosNumber.tip', {\n                        qty: inventoryLevel,\n                      })}\n                    </Box>\n                  )}\n                </Box>\n              )}\n            </Box>\n          </Box>\n        );\n      },\n      width: '40%',\n    },\n    {\n      key: 'Price',\n      title: b3Lang('quoteDraft.quoteTable.price'),\n      render: (row: CustomFieldItems) => {\n        const { basePrice, taxPrice } = row;\n\n        const inTaxPrice = getBCPrice(Number(basePrice), Number(taxPrice));\n        return (\n          <Typography\n            sx={{\n              padding: '12px 0',\n            }}\n          >\n            {getDisplayPrice({\n              price: currencyFormat(inTaxPrice),\n              productInfo: row,\n              showText: b3Lang('quoteDraft.quoteSummary.tbd'),\n            })}\n          </Typography>\n        );\n      },\n      width: '15%',\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      key: 'Qty',\n      title: b3Lang('quoteDraft.quoteTable.qty'),\n      render: (row) => (\n        <StyledTextField\n          size=\"small\"\n          type=\"number\"\n          variant=\"filled\"\n          disabled={!idEdit}\n          value={row.quantity}\n          inputProps={{\n            inputMode: 'numeric',\n            pattern: '[0-9]*',\n          }}\n          onChange={(e) => {\n            handleUpdateProductQty(row, Number(e.target.value));\n          }}\n          onBlur={(e) => {\n            handleCheckProductQty(row, Number(e.target.value));\n          }}\n          sx={{\n            width: '75%',\n          }}\n        />\n      ),\n      width: '15%',\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      key: 'Total',\n      title: b3Lang('quoteDraft.quoteTable.total'),\n      render: (row) => {\n        const { basePrice, quantity, taxPrice } = row;\n\n        const inTaxPrice = getBCPrice(Number(basePrice), Number(taxPrice));\n        const total = inTaxPrice * Number(quantity);\n        const optionList = JSON.parse(row.optionList);\n\n        return (\n          <Box>\n            <Typography\n              sx={{\n                padding: '12px 0',\n              }}\n            >\n              {getDisplayPrice({\n                price: currencyFormat(total),\n                productInfo: row,\n                showText: b3Lang('quoteDraft.quoteSummary.tbd'),\n              })}\n            </Typography>\n            <Box\n              sx={{\n                marginTop: '1rem',\n                opacity: 0,\n                textAlign: 'end',\n              }}\n              id=\"shoppingList-actionList\"\n            >\n              {optionList.length > 0 && idEdit && (\n                <Edit\n                  sx={{\n                    marginRight: '0.5rem',\n                    cursor: 'pointer',\n                    color: 'rgba(0, 0, 0, 0.54)',\n                  }}\n                  onClick={() => {\n                    const { productsSearch, id, optionList, quantity } = row;\n\n                    handleOpenProductEdit(\n                      {\n                        ...productsSearch,\n                        quantity,\n                        selectOptions: optionList,\n                      },\n                      id,\n                    );\n                  }}\n                />\n              )}\n              {idEdit && (\n                <Delete\n                  sx={{\n                    cursor: 'pointer',\n                    color: 'rgba(0, 0, 0, 0.54)',\n                  }}\n                  onClick={() => {\n                    const { id } = row;\n                    handleDeleteClick(id);\n                  }}\n                />\n              )}\n            </Box>\n          </Box>\n        );\n      },\n      width: '15%',\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ];\n\n  return (\n    <StyledQuoteTableContainer>\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          margin: '0.5rem 0 1rem',\n        }}\n      >\n        <Typography\n          sx={{\n            fontSize: '24px',\n          }}\n        >\n          {b3Lang('quoteDraft.quoteTable.totalProducts', { total: total || 0 })}\n        </Typography>\n      </Box>\n\n      <PaginationTable\n        columnItems={columnItems}\n        rowsPerPageOptions={[12, 24, 36]}\n        items={items}\n        isCustomRender={false}\n        hover\n        labelRowsPerPage={b3Lang('quoteDraft.quoteTable.perPage')}\n        showBorder={false}\n        itemIsMobileSpacing={0}\n        noDataText={b3Lang('quoteDraft.quoteTable.noProducts')}\n        renderItem={(row, index?) => (\n          <QuoteTableCard\n            len={total || 0}\n            item={row}\n            itemIndex={index}\n            onEdit={handleOpenProductEdit}\n            onDelete={handleDeleteClick}\n            handleUpdateProductQty={handleUpdateProductQty}\n            idEdit={idEdit}\n          />\n        )}\n      />\n\n      <ChooseOptionsDialog\n        isOpen={chooseOptionsOpen}\n        isLoading={isRequestLoading}\n        setIsLoading={setIsRequestLoading}\n        product={optionsProduct}\n        onCancel={handleChooseOptionsDialogCancel}\n        onConfirm={\n          handleChooseOptionsDialogConfirm as unknown as (products: CustomFieldItems[]) => void\n        }\n        isEdit\n        isB2BUser={isB2BUser}\n      />\n    </StyledQuoteTableContainer>\n  );\n}\n\nexport default QuoteTable;\n","import { LangFormatFunction } from '@b3/lang';\n\nconst getAccountFormFields = (isMobile: boolean, b3Lang: LangFormatFunction) => {\n  const accountFormFields = [\n    {\n      name: 'label',\n      label: b3Lang('quoteDraft.config.addressLabel'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'firstName',\n      label: b3Lang('quoteDraft.config.firstName'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'lastName',\n      label: b3Lang('quoteDraft.config.lastName'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'companyName',\n      label: b3Lang('quoteDraft.config.company'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'country',\n      label: b3Lang('quoteDraft.config.country'),\n      required: false,\n      default: '',\n      fieldType: 'dropdown',\n      options: [],\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n      replaceOptions: {\n        label: 'countryName',\n        value: 'countryCode',\n      },\n    },\n    {\n      name: 'address',\n      label: b3Lang('quoteDraft.config.addressLine1'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'apartment',\n      label: b3Lang('quoteDraft.config.addressLine2'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'city',\n      label: b3Lang('quoteDraft.config.city'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      options: [],\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'state',\n      label: b3Lang('quoteDraft.config.state'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      options: [],\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n      replaceOptions: {\n        label: 'stateName',\n        value: 'stateName',\n      },\n    },\n    {\n      name: 'zipCode',\n      label: b3Lang('quoteDraft.config.zipCode'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      options: [],\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'phoneNumber',\n      label: b3Lang('quoteDraft.config.phoneNumber'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n\n  return accountFormFields;\n};\n\nexport default getAccountFormFields;\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { dispatchEvent } from '@b3/hooks';\nimport { useB3Lang } from '@b3/lang';\nimport { ArrowBackIosNew } from '@mui/icons-material';\nimport { Box, Checkbox, FormControlLabel, Stack, Typography } from '@mui/material';\nimport { cloneDeep, concat, uniq } from 'lodash-es';\n\nimport CustomButton from '@/components/button/CustomButton';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { permissionLevels } from '@/constants';\nimport { useMobile, useSetCountry, useValidatePermissionWithComparisonType } from '@/hooks';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { GlobalContext } from '@/shared/global';\nimport {\n  createBCQuote,\n  createQuote,\n  getB2BCustomerAddresses,\n  getBCCustomerAddresses,\n} from '@/shared/service/b2b';\nimport { deleteCart } from '@/shared/service/bc/graphql/cart';\nimport {\n  activeCurrencyInfoSelector,\n  isB2BUserSelector,\n  resetDraftQuoteInfo,\n  resetDraftQuoteList,\n  setDraftQuoteInfo,\n  setDraftQuoteRecipients,\n  setQuoteUserId,\n  useAppDispatch,\n  useAppSelector,\n} from '@/store';\nimport { AddressItemType, BCAddressItemType } from '@/types/address';\nimport {\n  BillingAddress,\n  ContactInfoKeys,\n  QuoteExtraFields,\n  QuoteFormattedItemsProps,\n  QuoteInfo as QuoteInfoType,\n  ShippingAddress,\n} from '@/types/quotes';\nimport { B3LStorage, channelId, snackbar, storeHash } from '@/utils';\nimport { verifyCreatePermission } from '@/utils/b3CheckPermissions';\nimport { b2bPermissionsMap } from '@/utils/b3CheckPermissions/config';\nimport b2bLogger from '@/utils/b3Logger';\nimport { addQuoteDraftProducts, getVariantInfoOOSAndPurchase } from '@/utils/b3Product/b3Product';\nimport { deleteCartData } from '@/utils/cartUtils';\nimport validateObject from '@/utils/quoteUtils';\n\nimport { getProductOptionsFields } from '../../utils/b3Product/shared/config';\nimport { convertBCToB2BAddress } from '../Address/shared/config';\nimport { type PageProps } from '../PageProps';\nimport AddToQuote from '../quote/components/AddToQuote';\nimport ContactInfo from '../quote/components/ContactInfo';\nimport QuoteAddress from '../quote/components/QuoteAddress';\nimport QuoteAttachment from '../quote/components/QuoteAttachment';\nimport QuoteInfo from '../quote/components/QuoteInfo';\nimport QuoteNote from '../quote/components/QuoteNote';\nimport QuoteStatus from '../quote/components/QuoteStatus';\nimport QuoteSubmissionResponse from '../quote/components/QuoteSubmissionResponse';\nimport QuoteSummary from '../quote/components/QuoteSummary';\nimport QuoteTable from '../quote/components/QuoteTable';\nimport getAccountFormFields from '../quote/config';\nimport Container from '../quote/style';\nimport getB2BQuoteExtraFields from '../quote/utils/getQuoteExtraFields';\n\ntype BCAddress = {\n  node: BCAddressItemType;\n};\n\ntype B2BAddress = {\n  node: AddressItemType;\n};\n\nexport interface Country {\n  countryCode: string;\n  countryName: string;\n  id?: string;\n}\n\ninterface InfoRefProps extends HTMLInputElement {\n  getContactInfoValue: () => any;\n  setShippingInfoValue: (address: any) => void;\n}\n\ninterface QuoteSummaryRef extends HTMLInputElement {\n  refreshSummary: () => void;\n}\n\nconst shippingAddress = {\n  address: '',\n  addressId: 0,\n  apartment: '',\n  city: '',\n  country: '',\n  firstName: '',\n  label: '',\n  lastName: '',\n  phoneNumber: '',\n  state: '',\n  zipCode: '',\n  companyName: '',\n};\n\nconst billingAddress = {\n  address: '',\n  addressId: 0,\n  apartment: '',\n  city: '',\n  country: '',\n  firstName: '',\n  label: '',\n  lastName: '',\n  phoneNumber: '',\n  state: '',\n  zipCode: '',\n  companyName: '',\n};\n\nfunction QuoteDraft({ setOpenPage }: PageProps) {\n  const {\n    state: { countriesList, openAPPParams },\n  } = useContext(GlobalContext);\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyB2BId = useAppSelector(({ company }) => company.companyInfo.id);\n  const companyName = useAppSelector(({ company }) => company.companyInfo.companyName);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const dispatch = useAppDispatch();\n  const enteredInclusiveTax = useAppSelector(\n    ({ storeConfigs }) => storeConfigs.currencies.enteredInclusiveTax,\n  );\n  const draftQuoteList = useAppSelector(({ quoteInfo }) => quoteInfo.draftQuoteList);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const salesRepCompanyName = useAppSelector(\n    ({ b2bFeatures }) => b2bFeatures.masqueradeCompany.companyName,\n  );\n  const quoteInfoOrigin = useAppSelector(({ quoteInfo }) => quoteInfo.draftQuoteInfo);\n  const currency = useAppSelector(activeCurrencyInfoSelector);\n  const quoteSubmissionResponseInfo = useAppSelector(\n    ({ global }) => global.quoteSubmissionResponse,\n  );\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  const isEnableProduct = useAppSelector(\n    ({ global }) => global.blockPendingQuoteNonPurchasableOOS.isEnableProduct,\n  );\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const quotesActionsPermission = useMemo(() => {\n    if (isB2BUser) {\n      return verifyCreatePermission(\n        b2bPermissionsMap.quotesCreateActionsPermission,\n        Number(selectCompanyHierarchyId),\n      );\n    }\n\n    return true;\n  }, [isB2BUser, selectCompanyHierarchyId]);\n\n  const navigate = useNavigate();\n\n  const b3Lang = useB3Lang();\n\n  const [isMobile] = useMobile();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [isEdit, setEdit] = useState<boolean>(false);\n\n  const [addressList, setAddressList] = useState<B2BAddress[]>([]);\n\n  const [shippingSameAsBilling, setShippingSameAsBilling] = useState<boolean>(false);\n  const [billingChange, setBillingChange] = useState<boolean>(false);\n  const [quoteSubmissionResponseOpen, setQuoteSubmissionResponseOpen] = useState<boolean>(false);\n  const [quoteId, setQuoteId] = useState<string | number>('');\n  const [currentCreatedAt, setCurrentCreatedAt] = useState<string | number>('');\n  const [extraFields, setExtraFields] = useState<QuoteFormattedItemsProps[]>([]);\n\n  const quoteSummaryRef = useRef<QuoteSummaryRef | null>(null);\n\n  const [isAddressCompanyHierarchy] = useValidatePermissionWithComparisonType({\n    level: permissionLevels.COMPANY_SUBSIDIARIES,\n    code: b2bPermissionsMap.getAddressesPermission,\n    containOrEqual: 'equal',\n  });\n\n  useSetCountry();\n\n  const contactInfoRef = useRef<InfoRefProps | null>(null);\n  const billingRef = useRef<InfoRefProps | null>(null);\n  const shippingRef = useRef<InfoRefProps | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      setLoading(true);\n      const setCustomInfo = (quoteInfo: any) => {\n        const newInfo = {\n          ...quoteInfo,\n        };\n        newInfo.contactInfo = {\n          name: `${customer.firstName} ${customer.lastName}`,\n          email: customer.emailAddress,\n          companyName: companyName || salesRepCompanyName || '',\n          phoneNumber: customer.phoneNumber,\n        };\n        dispatch(setDraftQuoteInfo(newInfo));\n      };\n\n      const quoteInfo = cloneDeep(quoteInfoOrigin);\n\n      try {\n        if (isB2BUser) {\n          const companyId = companyB2BId || salesRepCompanyId;\n\n          let addressB2BList = [];\n          const fetchAddresses = async (id: number) => {\n            const {\n              addresses: { edges },\n            } = await getB2BCustomerAddresses(id);\n            return edges;\n          };\n\n          if (!selectCompanyHierarchyId) {\n            addressB2BList = await fetchAddresses(Number(companyId));\n          } else if (selectCompanyHierarchyId && isAddressCompanyHierarchy) {\n            addressB2BList = await fetchAddresses(Number(selectCompanyHierarchyId));\n          }\n\n          const shippingDefaultAddress = addressB2BList.find(\n            (item: B2BAddress) => item?.node?.isDefaultShipping === 1,\n          );\n          const billingDefaultAddress = addressB2BList.find(\n            (item: B2BAddress) => item?.node?.isDefaultBilling === 1,\n          );\n\n          if (shippingDefaultAddress && validateObject(quoteInfo, 'shippingAddress')) {\n            const addressItem = {\n              label: shippingDefaultAddress?.node?.label || '',\n              firstName: shippingDefaultAddress?.node?.firstName || '',\n              lastName: shippingDefaultAddress?.node?.lastName || '',\n              companyName: shippingDefaultAddress?.node?.company || '',\n              country: shippingDefaultAddress?.node?.countryCode || '',\n              address: shippingDefaultAddress?.node?.addressLine1 || '',\n              apartment: shippingDefaultAddress?.node?.addressLine2 || '',\n              city: shippingDefaultAddress?.node?.city || '',\n              state: shippingDefaultAddress?.node?.state || '',\n              zipCode: shippingDefaultAddress?.node?.zipCode || '',\n              phoneNumber: shippingDefaultAddress?.node?.phoneNumber || '',\n              addressId: shippingDefaultAddress?.node?.id\n                ? Number(shippingDefaultAddress.node.id)\n                : 0,\n            };\n\n            quoteInfo.shippingAddress = addressItem as ShippingAddress;\n          }\n          if (\n            billingDefaultAddress &&\n            (!quoteInfo?.billingAddress || validateObject(quoteInfo, 'billingAddress'))\n          ) {\n            const addressItem = {\n              label: billingDefaultAddress?.node?.label || '',\n              firstName: billingDefaultAddress?.node?.firstName || '',\n              lastName: billingDefaultAddress?.node?.lastName || '',\n              companyName: billingDefaultAddress?.node?.company || '',\n              country: billingDefaultAddress?.node?.countryCode || '',\n              address: billingDefaultAddress?.node?.addressLine1 || '',\n              apartment: billingDefaultAddress?.node?.addressLine2 || '',\n              city: billingDefaultAddress?.node?.city || '',\n              state: billingDefaultAddress?.node?.state || '',\n              zipCode: billingDefaultAddress?.node?.zipCode || '',\n              phoneNumber: billingDefaultAddress?.node?.phoneNumber || '',\n              addressId: billingDefaultAddress?.node?.id\n                ? Number(billingDefaultAddress.node.id)\n                : 0,\n            };\n\n            quoteInfo.billingAddress = addressItem as BillingAddress;\n          }\n\n          setAddressList(addressB2BList);\n        } else if (role !== 100) {\n          const {\n            customerAddresses: { edges: addressBCList = [] },\n          } = await getBCCustomerAddresses();\n\n          const list = addressBCList.map((address: BCAddress) => ({\n            node: convertBCToB2BAddress(address.node),\n          }));\n          setAddressList(list);\n        }\n\n        const extraFieldsInfo = await getB2BQuoteExtraFields();\n        if (extraFieldsInfo.length) {\n          setExtraFields(extraFieldsInfo);\n          const preExtraFields = quoteInfo.extraFields;\n          const defaultValues = extraFieldsInfo?.map((field) => {\n            const defaultValue =\n              preExtraFields?.find((item: QuoteExtraFields) => item.fieldName === field.name)\n                ?.value || field?.default;\n\n            return {\n              id: Number(field.id),\n              fieldName: field.name,\n              value: defaultValue || '',\n            };\n          });\n          quoteInfo.extraFields = defaultValues;\n        }\n\n        if (\n          quoteInfo &&\n          (!quoteInfo?.contactInfo || validateObject(quoteInfo, 'contactInfo')) &&\n          Number(role) !== 100\n        ) {\n          setCustomInfo(quoteInfo);\n        } else if (quoteInfo) {\n          dispatch(setDraftQuoteInfo(quoteInfo));\n        }\n      } finally {\n        const quoteUserId = customer.b2bId || customer.id || 0;\n        dispatch(setQuoteUserId(Number(quoteUserId)));\n\n        setLoading(false);\n      }\n    };\n\n    init();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectCompanyHierarchyId, isAddressCompanyHierarchy]);\n\n  const quoteAndExtraFieldsInfo = useMemo(() => {\n    const contactInfo: CustomFieldItems = quoteInfoOrigin.contactInfo || {};\n\n    return {\n      info: {\n        quoteTitle: contactInfo?.quoteTitle || '',\n        referenceNumber: quoteInfoOrigin?.referenceNumber || '',\n      },\n      extraFields: quoteInfoOrigin.extraFields || [],\n      recipients: quoteInfoOrigin.recipients || [],\n    };\n  }, [quoteInfoOrigin]);\n\n  const getAddress = () => {\n    const addressSaveInfo = {\n      shippingAddress,\n      billingAddress,\n    };\n\n    if (billingRef?.current) {\n      addressSaveInfo.billingAddress = billingRef.current.getContactInfoValue();\n    }\n    if (shippingRef?.current) {\n      addressSaveInfo.shippingAddress = shippingRef.current.getContactInfoValue();\n    }\n\n    return addressSaveInfo;\n  };\n\n  const handleSaveCCEmail = async (ccEmail: string[]) => {\n    dispatch(setDraftQuoteRecipients(ccEmail));\n  };\n\n  const handleCollectingData = async (saveInfo: QuoteInfoType) => {\n    if (contactInfoRef?.current) {\n      const contactInfo = await contactInfoRef.current.getContactInfoValue();\n      if (!contactInfo) return false;\n\n      const currentRecipients = saveInfo?.recipients || [];\n      if (contactInfo.ccEmail.trim().length) {\n        saveInfo.recipients = uniq(concat(currentRecipients, [contactInfo.ccEmail]));\n      }\n\n      saveInfo.contactInfo = {\n        name: contactInfo?.name,\n        email: contactInfo?.email,\n        companyName: contactInfo?.companyName || '',\n        phoneNumber: contactInfo?.phoneNumber,\n        quoteTitle: contactInfo?.quoteTitle,\n      };\n      saveInfo.referenceNumber = contactInfo?.referenceNumber || '';\n\n      const extraFieldsInfo = extraFields.map((field) => ({\n        id: Number(field.id),\n        fieldName: field.name,\n        value: field.name ? contactInfo[field.name] : '',\n      }));\n      saveInfo.extraFields = extraFieldsInfo;\n\n      return true;\n    }\n    return false;\n  };\n\n  const handleSaveInfoClick = async () => {\n    const saveInfo = cloneDeep(quoteInfoOrigin);\n    if (contactInfoRef?.current) {\n      const data = await handleCollectingData(saveInfo);\n      if (!data) return;\n    }\n\n    const { shippingAddress, billingAddress } = getAddress();\n\n    saveInfo.shippingAddress = shippingAddress;\n    saveInfo.billingAddress = billingAddress;\n\n    const isComplete = Object.keys(saveInfo.contactInfo).every((key: string) => {\n      if (key === 'phoneNumber' || key === 'companyName' || key === 'quoteTitle') {\n        return true;\n      }\n      return !!saveInfo.contactInfo[key as ContactInfoKeys];\n    });\n\n    if (isComplete) {\n      dispatch(setDraftQuoteInfo(saveInfo));\n      setEdit(false);\n    }\n  };\n\n  const handleEditInfoClick = () => {\n    setEdit(true);\n  };\n\n  const accountFormFields = getAccountFormFields(isMobile, b3Lang);\n\n  const updateSummary = () => {\n    quoteSummaryRef.current?.refreshSummary();\n  };\n\n  const addToQuote = (products: CustomFieldItems[]) => {\n    addQuoteDraftProducts(products);\n  };\n\n  const getFileList = (files: CustomFieldItems[]) => {\n    if (role === 100) {\n      return [];\n    }\n\n    return files.map((file) => ({\n      fileUrl: file.fileUrl,\n      fileName: file.fileName,\n      fileType: file.fileType,\n      fileSize: file.fileSize,\n    }));\n  };\n\n  const handleReset = () => {\n    dispatch(resetDraftQuoteInfo());\n    dispatch(resetDraftQuoteList());\n    B3LStorage.delete('cartToQuoteId');\n  };\n\n  const handleAfterSubmit = (\n    inpQuoteId?: string | number,\n    inpCurrentCreatedAt?: string | number,\n  ) => {\n    const currentQuoteId = inpQuoteId || quoteId;\n    const createdAt = inpCurrentCreatedAt || currentCreatedAt;\n\n    if (currentQuoteId) {\n      handleReset();\n      navigate(`/quoteDetail/${currentQuoteId}?date=${createdAt}`, {\n        state: {\n          to: 'draft',\n        },\n      });\n    }\n  };\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    try {\n      const info = cloneDeep(quoteInfoOrigin);\n      if (isEdit && contactInfoRef?.current) {\n        const data = await handleCollectingData(info);\n        if (!data) return;\n      }\n\n      const contactInfo = info?.contactInfo || {};\n\n      const quoteTitle = contactInfo?.quoteTitle || '';\n\n      if ('quoteTitle' in contactInfo) delete contactInfo.quoteTitle;\n\n      const isComplete = Object.keys(contactInfo).every((key: string) => {\n        if (key === 'phoneNumber' || key === 'companyName') {\n          return true;\n        }\n\n        return contactInfo && !!contactInfo[key as ContactInfoKeys];\n      });\n\n      if (validateObject(quoteInfoOrigin, 'contactInfo') || !isComplete) {\n        snackbar.error(b3Lang('quoteDraft.addQuoteInfo'));\n        return;\n      }\n\n      if (!draftQuoteList || draftQuoteList.length === 0) {\n        snackbar.error(b3Lang('quoteDraft.submit'));\n        return;\n      }\n\n      if (!isEnableProduct) {\n        const itHasInvalidProduct = draftQuoteList.some((item) => {\n          return getVariantInfoOOSAndPurchase(item)?.name;\n        });\n\n        if (itHasInvalidProduct) {\n          snackbar.error(b3Lang('quoteDraft.submit.errorTip'));\n          return;\n        }\n      }\n\n      const note = info?.note || '';\n      const newNote = note.trim().replace(/[\\r\\n]/g, '\\\\n');\n\n      const perfectAddress = (address: ShippingAddress | BillingAddress) => {\n        const newAddress = cloneDeep(address);\n\n        const countryItem = countriesList?.find(\n          (item: Country) => item.countryCode === newAddress.country,\n        );\n\n        if (countryItem) {\n          newAddress.country = countryItem.countryName;\n        }\n\n        newAddress.address = address?.address || '';\n        newAddress.apartment = address?.apartment || '';\n\n        return newAddress;\n      };\n\n      const { shippingAddress: editShippingAddress, billingAddress: editBillingAddress } =\n        billingRef?.current ? getAddress() : info;\n\n      const shippingAddress = editShippingAddress ? perfectAddress(editShippingAddress) : {};\n\n      const billingAddress = editBillingAddress ? perfectAddress(editBillingAddress) : {};\n\n      let allPrice = 0;\n      let allTaxPrice = 0;\n\n      const calculationTime = (value: string | number) => {\n        if (typeof value === 'string' && value.includes('-')) {\n          return `${new Date(value).getTime() / 1000}`;\n        }\n        return value;\n      };\n\n      const productList = draftQuoteList.map((item) => {\n        const { node } = item;\n        const product = {\n          ...node.productsSearch,\n          selectOptions: node?.optionList || '',\n        };\n\n        const productFields = getProductOptionsFields(product, {});\n        const optionsList =\n          productFields\n            .map((item) => ({\n              optionId: item.optionId,\n              optionValue:\n                item.fieldType === 'date' ? calculationTime(item.optionValue) : item.optionValue,\n              optionLabel: `${item.valueText}`,\n              optionName: item.valueLabel,\n              type: item?.fieldOriginType || item.fieldType,\n            }))\n            .filter((list: CustomFieldItems) => !!list.optionName) || [];\n\n        const variants = node?.productsSearch?.variants;\n        let variantsItem;\n        if (Array.isArray(variants)) {\n          variantsItem = variants.find((item) => item.sku === node.variantSku);\n        }\n\n        allPrice += Number(node?.basePrice || 0) * Number(node?.quantity || 0);\n\n        allTaxPrice += Number(node?.taxPrice || 0) * Number(node?.quantity || 0);\n\n        const items = {\n          productId: node?.productsSearch?.id,\n          sku: node.variantSku,\n          basePrice: Number(node?.basePrice || 0).toFixed(currency.decimal_places),\n          discount: '0.00',\n          offeredPrice: Number(node?.basePrice || 0).toFixed(currency.decimal_places),\n          quantity: node.quantity,\n          variantId: variantsItem?.variant_id,\n          imageUrl: node.primaryImage,\n          productName: node.productName,\n          options: optionsList,\n        };\n\n        return items;\n      });\n\n      const fileList = getFileList(quoteInfoOrigin?.fileInfo || []);\n\n      const data = {\n        message: newNote,\n        legalTerms: '',\n        totalAmount: enteredInclusiveTax\n          ? allPrice.toFixed(currency.decimal_places)\n          : (allPrice + allTaxPrice).toFixed(currency.decimal_places),\n        grandTotal: allPrice.toFixed(currency.decimal_places),\n        subtotal: allPrice.toFixed(currency.decimal_places),\n        companyId: isB2BUser ? selectCompanyHierarchyId || companyB2BId || salesRepCompanyId : '',\n        storeHash,\n        quoteTitle,\n        discount: '0.00',\n        channelId,\n        userEmail: customer.emailAddress,\n        shippingAddress,\n        billingAddress,\n        contactInfo,\n        productList,\n        fileList,\n        taxTotal: allTaxPrice.toFixed(currency.decimal_places),\n        currency: {\n          currencyExchangeRate: currency.currency_exchange_rate,\n          token: currency.token,\n          location: currency.token_location,\n          decimalToken: currency.decimal_token,\n          decimalPlaces: currency.decimal_places,\n          thousandsToken: currency.thousands_token,\n          currencyCode: currency.currency_code,\n        },\n        referenceNumber: `${info.referenceNumber}` || '',\n        extraFields: info.extraFields || [],\n        recipients: info.recipients || [],\n      };\n\n      const fn = Number(role) === 99 ? createBCQuote : createQuote;\n\n      if (!dispatchEvent('on-quote-create', data)) {\n        throw new Error();\n      }\n\n      const {\n        quoteCreate: {\n          quote: { id, createdAt },\n        },\n      } = await fn(data);\n\n      setQuoteId(id);\n      setCurrentCreatedAt(createdAt);\n\n      if (id) {\n        const cartId = B3LStorage.get('cartToQuoteId');\n        const deleteCartObject = deleteCartData(cartId);\n\n        await deleteCart(deleteCartObject);\n      }\n\n      if (quoteSubmissionResponseInfo.value === '0') {\n        handleAfterSubmit(id, createdAt);\n      } else {\n        setQuoteSubmissionResponseOpen(true);\n      }\n    } catch (error: any) {\n      b2bLogger.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCloseQuoteSubmissionResponse = () => {\n    setQuoteSubmissionResponseOpen(false);\n\n    handleAfterSubmit();\n  };\n\n  const backText = () => {\n    let text =\n      Number(role) === 100\n        ? b3Lang('quoteDraft.button.back')\n        : b3Lang('quoteDraft.button.backToQuoteLists');\n    if (openAPPParams?.quoteBtn === 'open') {\n      text = b3Lang('quoteDraft.button.back');\n    } else if (openAPPParams?.quoteBtn === 'add') {\n      text = b3Lang('quoteDraft.button.backToProduct');\n    }\n\n    return text;\n  };\n\n  useEffect(() => {\n    if (billingChange && shippingSameAsBilling) {\n      if (billingRef.current) {\n        const billingAddress = billingRef.current.getContactInfoValue();\n\n        if (shippingRef.current) {\n          shippingRef.current.setShippingInfoValue(billingAddress);\n        }\n      }\n    }\n  }, [billingChange, shippingSameAsBilling]);\n\n  return (\n    <B3Spin isSpinning={loading}>\n      <Box\n        sx={{\n          mb: '60px',\n          width: '100%',\n        }}\n      >\n        <Box\n          sx={{\n            marginBottom: '10px',\n            width: 'fit-content',\n            displayPrint: 'none',\n          }}\n        >\n          <Box\n            sx={{\n              color: 'primary.main',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n            }}\n            onClick={() => {\n              if (openAPPParams?.quoteBtn || Number(role) === 100) {\n                navigate('/');\n                setOpenPage({\n                  isOpen: false,\n                  openUrl: '',\n                });\n              } else {\n                navigate('/quotes');\n              }\n            }}\n          >\n            <ArrowBackIosNew\n              fontSize=\"small\"\n              sx={{\n                fontSize: '12px',\n                marginRight: '0.5rem',\n              }}\n            />\n            <p\n              style={{\n                margin: '0',\n              }}\n            >\n              {backText()}\n            </p>\n          </Box>\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              mb: '24px',\n              flexDirection: isMobile ? 'column' : 'row',\n              alignItems: isMobile ? 'flex-start' : 'center',\n            }}\n          >\n            <Typography\n              component=\"h3\"\n              sx={{\n                fontSize: '34px',\n                mr: '1rem',\n                mb: isMobile ? '1rem' : '0',\n                color: getContrastColor(backgroundColor),\n              }}\n            >\n              {b3Lang('quoteDraft.title.Quote')}\n            </Typography>\n            <QuoteStatus code=\"0\" />\n          </Box>\n          {quotesActionsPermission && (\n            <Box>\n              {!isMobile ? (\n                <CustomButton\n                  variant=\"contained\"\n                  size=\"small\"\n                  sx={{\n                    padding: '8px 22px',\n                    alignSelf: 'center',\n                    marginBottom: '24px',\n                  }}\n                  onClick={handleSubmit}\n                >\n                  {b3Lang('quoteDraft.button.submit')}\n                </CustomButton>\n              ) : (\n                <Box\n                  sx={{\n                    position: 'fixed',\n                    left: 0,\n                    bottom: 0,\n                    background: '#FFF',\n                    width: '100%',\n                    display: 'flex',\n                    p: '8px 0',\n                    zIndex: 100,\n                    justifyContent: 'center',\n                  }}\n                >\n                  <CustomButton\n                    variant=\"contained\"\n                    size=\"small\"\n                    sx={{\n                      height: '38px',\n                      width: '90%',\n                    }}\n                    onClick={handleSubmit}\n                  >\n                    {b3Lang('quoteDraft.button.submit')}\n                  </CustomButton>\n                </Box>\n              )}\n            </Box>\n          )}\n        </Box>\n\n        <Box>\n          {!isEdit && (\n            <QuoteInfo\n              quoteAndExtraFieldsInfo={quoteAndExtraFieldsInfo}\n              status=\"Draft\"\n              contactInfo={quoteInfoOrigin?.contactInfo}\n              shippingAddress={quoteInfoOrigin?.shippingAddress}\n              billingAddress={quoteInfoOrigin?.billingAddress || {}}\n              handleEditInfoClick={handleEditInfoClick}\n            />\n          )}\n          {isEdit && (\n            <Container flexDirection=\"column\">\n              <ContactInfo\n                emailAddress={customer.emailAddress}\n                info={quoteInfoOrigin?.contactInfo}\n                referenceNumber={quoteInfoOrigin?.referenceNumber || ''}\n                quoteExtraFields={extraFields}\n                extraFieldsDefault={quoteInfoOrigin.extraFields || []}\n                recipients={quoteInfoOrigin?.recipients || []}\n                handleSaveCCEmail={handleSaveCCEmail}\n                ref={contactInfoRef}\n              />\n              <Box\n                sx={{\n                  display: 'flex',\n                  mt: isMobile ? 0 : '3rem',\n                  flexDirection: isMobile ? 'column' : 'row',\n                }}\n              >\n                <QuoteAddress\n                  title={b3Lang('quoteDraft.section.billing')}\n                  info={quoteInfoOrigin?.billingAddress}\n                  addressList={addressList}\n                  pr={isMobile ? 0 : '8px'}\n                  ref={billingRef}\n                  role={role}\n                  accountFormFields={accountFormFields}\n                  shippingSameAsBilling={shippingSameAsBilling}\n                  type=\"billing\"\n                  setBillingChange={setBillingChange}\n                />\n                <QuoteAddress\n                  title={b3Lang('quoteDraft.section.shipping')}\n                  info={quoteInfoOrigin?.shippingAddress}\n                  addressList={addressList}\n                  pl={isMobile ? 0 : '8px'}\n                  ref={shippingRef}\n                  role={role}\n                  accountFormFields={accountFormFields}\n                  shippingSameAsBilling={shippingSameAsBilling}\n                  type=\"shipping\"\n                  setBillingChange={setBillingChange}\n                />\n              </Box>\n              <FormControlLabel\n                label={b3Lang('quoteDraft.checkbox.sameAddressShippingAndBilling')}\n                control={\n                  <Checkbox\n                    checked={shippingSameAsBilling}\n                    onChange={(e) => {\n                      setShippingSameAsBilling(e.target.checked);\n                      if (billingRef.current) {\n                        const billingAddress = billingRef.current.getContactInfoValue();\n\n                        if (shippingRef.current && e.target.checked) {\n                          shippingRef.current.setShippingInfoValue(billingAddress);\n                        }\n                      }\n                    }}\n                  />\n                }\n                sx={{\n                  mt: 2,\n                }}\n              />\n              <CustomButton\n                sx={{\n                  mt: '20px',\n                  mb: '15px',\n                }}\n                onClick={handleSaveInfoClick}\n                variant=\"outlined\"\n              >\n                {b3Lang('quoteDraft.button.saveInfo')}\n              </CustomButton>\n            </Container>\n          )}\n        </Box>\n        <Box\n          sx={{\n            mt: '20px',\n            display: 'flex',\n            flexDirection: isMobile ? 'column' : 'row',\n            alignItems: 'flex-start',\n          }}\n        >\n          <Container\n            flexDirection=\"column\"\n            xs={{\n              flexBasis: isMobile ? '100%' : '680px',\n              flexGrow: 2,\n              marginRight: '20px',\n              marginBottom: '20px',\n              boxShadow:\n                '0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 1px 3px rgba(0, 0, 0, 0.12)',\n              borderRadius: '4px',\n            }}\n          >\n            <QuoteTable\n              updateSummary={updateSummary}\n              total={draftQuoteList.length}\n              items={draftQuoteList}\n              isB2BUser={isB2BUser}\n            />\n          </Container>\n\n          <Container\n            flexDirection=\"column\"\n            xs={{\n              flexBasis: isMobile ? '100%' : '340px',\n              marginBottom: '20px',\n              backgroundColor: 'transparent',\n              padding: 0,\n              flexGrow: 1,\n            }}\n          >\n            <Stack\n              spacing={2}\n              sx={{\n                width: '100%',\n              }}\n            >\n              <QuoteSummary ref={quoteSummaryRef} />\n              <AddToQuote\n                updateList={updateSummary}\n                addToQuote={addToQuote}\n                isB2BUser={isB2BUser}\n              />\n\n              <QuoteNote quoteStatus=\"Draft\" />\n\n              {role !== 100 && <QuoteAttachment status={0} />}\n            </Stack>\n          </Container>\n        </Box>\n      </Box>\n\n      <QuoteSubmissionResponse\n        isOpen={quoteSubmissionResponseOpen}\n        onClose={handleCloseQuoteSubmissionResponse}\n        quoteSubmissionResponseInfo={quoteSubmissionResponseInfo}\n      />\n    </B3Spin>\n  );\n}\n\nexport default QuoteDraft;\n"],"names":["useSetCountry","countriesList","dispatch","useContext","GlobalContext","useEffect","countries","getB2BCountries","useGetCountry","setAddress","setValue","getValues","control","addresses","countryCode","useWatch","countriesFieldIndex","formFields","addressField","addressFieldIndex","stateList","_a","country","stateFieldIndex","stateVal","state","validateObject","quoteInfo","key","x","AddToQuote","props","updateList","addToQuote","isB2BUser","companyId","useAppSelector","company","customerGroupId","companyStatus","isOpenBulkLoadCSV","setIsOpenBulkLoadCSV","useState","isLoading","setIsLoading","blockPendingAccountViewPrice","useBlockPendingAccountViewPrice","b3Lang","useB3Lang","getNewQuoteProduct","products","product","variantId","newSelectOptionList","productId","productName","quantity","variants","basePrice","taxPrice","calculatedValue","variantInfo","item","primaryImage","variantSku","selectOptions","error","taxExclusive","taxInclusive","basePriceExclusiveTax","tax","uuid","addToList","newProducts","noSkuProducts","sku","snackbar","quickAddToList","variantProducts","productIds","productsSearch","searchB2BProducts","productList","variantProduct","calculateProductListPrice","getOptionsList","options","optionId","id","handleCSVAddToList","productsData","validProduct","getProducts","searchBcProducts","newProductInfo","conversionProductsList","isSuccess","option","qty","optionsList","currentProductSearch","variantItem","quoteListitem","PRODUCT_DEFAULT_IMAGE","validProductQty","addQuoteDraftProducts","e","b2bLogger","handleOpenUploadDiag","Card","jsx","CardContent","jsxs","B3CollapseContainer","SearchProduct","Divider","QuickAdd","Box","CustomButton","UploadFileIcon","B3Upload","emailValidate","validatorRules","getContactInfo","isMobile","isGuest","getQuoteInfo","quoteExtraFields","referenceNumber","recipients","handleSaveClick","currentExtraFields","field","ContactInfo","info","emailAddress","extraFieldsDefault","handleSaveCCEmail","ref","setError","errors","handleSubmit","useForm","CustomerRole","isValidUserType","isValidUserTypeSelector","useMobile","validateEmailValue","emailValue","trim","validateQuoteExtraFieldsInfo","values","extraFields","res","validateQuoteExtraFields","messageArr","ccEmails","getContactInfoValue","isValid","data","useImperativeHandle","contactInfo","formData","B3CustomForm","forwardRef","TagBox","styled","marginBottom","Flex","theme","AddressItemCard","addressInfo","onSetAddress","useTheme","Typography","B3Tag","ChooseAddress","isOpen","closeModal","handleChangeAddress","addressList","type","recordList","useRef","isB2BUserSelector","list","setList","allList","newList","keys","handleSearchProduct","q","flag","handleCancelClicked","B3Dialog","B3FilterSearch","Grid","addressItem","QuoteAddress","title","pr","pl","role","accountFormFields","shippingSameAsBilling","setBillingChange","setOpen","quoteAddress","setQuoteAddress","cloneDeep","setShippingInfoValue","address","handleAddressChoose","handleCloseAddressChoose","QuoteSubmissionResponse","onClose","quoteSubmissionResponseInfo","getQuoteDraftShowPriceTBD","isEnableProduct","store","getVariantInfoDisplayPrice","defaultSummary","QuoteSummary","_","quoteSummary","setQuoteSummary","isHideQuoteDraftPrice","setHideQuoteDraftPrice","showInclusiveTaxPrice","global","draftQuoteList","priceCalc","price","getSummary","useCallback","isHidePrice","newQuoteSummary","summary","productTax","subtotal","grandTotal","shipping","getBCPrice","priceFormat","currencyFormat","showPrice","PaginationTable","columnItems","isCustomRender","tableKey","renderItem","noDataText","tableFixed","tableHeaderHide","rowsPerPageOptions","itemSpacing","itemXs","showCheckbox","showSelectAllCheckbox","selectedSymbol","isSelectOtherPageCheckbox","showBorder","getSelectCheckbox","hover","labelRowsPerPage","itemIsMobileSpacing","disableCheckbox","onClickRow","showPagination","showRowsPerPageOptions","CollapseComponent","applyAllDisableCheckbox","sortDirection","sortByFn","orderBy","pageType","items","initPagination","pagination","setPagination","isAllSelect","setAllSelect","selectCheckbox","setSelectCheckbox","handlePaginationChange","tablePagination","getCurrentAllItemsSelect","isNodeWrapper","handleSelectAllItems","newSelectCheckbox","index","selects","handleSelectOneItem","B3Table","StyledImage","QuoteTableCard","quoteTableItem","onEdit","onDelete","handleUpdateProductQty","idEdit","len","itemIndex","total","productFields","getProductOptionsFields","optionList","optionsValue","productUrl","singlePrice","getDisplayPrice","totalPrice","origin","TextField","Edit","Delete","StyledQuoteTableContainer","StyledTextField","QUOTE_PRODUCT_QTY_MAX","QuoteTable","updateSummary","useAppDispatch","isRequestLoading","setIsRequestLoading","chooseOptionsOpen","setSelectedOptionsOpen","optionsProduct","setOptionsProduct","optionsProductId","setOptionsProductId","row","value","setModifierQtyPrice","setDraftProduct","handleCheckProductQty","newQty","ceil","handleDeleteClick","deleteProductFromDraftQuoteList","handleChooseOptionsDialogCancel","handleOpenProductEdit","itemId","calculatedNoTaxPrice","calculatedTaxPrice","_b","handleChooseOptionsDialogConfirm","newProduct","currentProduct","getVariantInfoOOSAndPurchase","inventoryTracking","inventoryLevel","currentVariant","_c","variant","WarningIcon","inTaxPrice","ChooseOptionsDialog","getAccountFormFields","shippingAddress","billingAddress","QuoteDraft","setOpenPage","openAPPParams","companyB2BId","companyName","customer","enteredInclusiveTax","storeConfigs","salesRepCompanyId","b2bFeatures","salesRepCompanyName","quoteInfoOrigin","currency","activeCurrencyInfoSelector","selectCompanyHierarchyId","backgroundColor","CustomStyleContext","quotesActionsPermission","useMemo","verifyCreatePermission","b2bPermissionsMap","navigate","useNavigate","loading","setLoading","isEdit","setEdit","setAddressList","setShippingSameAsBilling","billingChange","quoteSubmissionResponseOpen","setQuoteSubmissionResponseOpen","quoteId","setQuoteId","currentCreatedAt","setCurrentCreatedAt","setExtraFields","quoteSummaryRef","isAddressCompanyHierarchy","useValidatePermissionWithComparisonType","permissionLevels","contactInfoRef","billingRef","shippingRef","setCustomInfo","newInfo","setDraftQuoteInfo","addressB2BList","fetchAddresses","edges","getB2BCustomerAddresses","shippingDefaultAddress","billingDefaultAddress","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","addressBCList","getBCCustomerAddresses","convertBCToB2BAddress","extraFieldsInfo","getB2BQuoteExtraFields","preExtraFields","defaultValues","defaultValue","quoteUserId","setQuoteUserId","quoteAndExtraFieldsInfo","getAddress","addressSaveInfo","ccEmail","setDraftQuoteRecipients","handleCollectingData","saveInfo","currentRecipients","uniq","concat","handleSaveInfoClick","handleEditInfoClick","getFileList","files","file","handleReset","resetDraftQuoteInfo","resetDraftQuoteList","B3LStorage","handleAfterSubmit","inpQuoteId","inpCurrentCreatedAt","currentQuoteId","createdAt","quoteTitle","isComplete","newNote","perfectAddress","newAddress","countryItem","editShippingAddress","editBillingAddress","allPrice","allTaxPrice","calculationTime","node","variantsItem","fileList","storeHash","channelId","fn","createBCQuote","createQuote","dispatchEvent","cartId","deleteCartObject","deleteCartData","deleteCart","handleCloseQuoteSubmissionResponse","backText","text","B3Spin","ArrowBackIosNew","getContrastColor","QuoteStatus","QuoteInfo","Container","FormControlLabel","Checkbox","Stack","QuoteNote","QuoteAttachment"],"mappings":"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"}