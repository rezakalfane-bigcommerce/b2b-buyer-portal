{"version":3,"file":"index-legacy-Be_B8ZGq.js","sources":["../../src/pages/QuoteDraft/index.tsx","../../src/hooks/useGetCountry.ts","../../src/utils/quoteUtils.ts","../../src/pages/quote/components/AddToQuote.tsx","../../src/pages/quote/components/ContactInfo.tsx","../../src/pages/quote/components/AddressItemCard.tsx","../../src/pages/quote/components/ChooseAddress.tsx","../../src/pages/quote/components/QuoteAddress.tsx","../../src/pages/quote/components/QuoteSubmissionResponse.tsx","../../src/pages/quote/shared/utils.ts","../../src/pages/quote/components/QuoteSummary.tsx","../../src/components/table/PaginationTable.tsx","../../src/pages/quote/components/QuoteTableCard.tsx","../../src/pages/quote/components/QuoteTable.tsx","../../src/pages/quote/config.ts"],"sourcesContent":["import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { dispatchEvent } from '@b3/hooks';\nimport { useB3Lang } from '@b3/lang';\nimport { ArrowBackIosNew } from '@mui/icons-material';\nimport { Box, Checkbox, FormControlLabel, Stack, Typography } from '@mui/material';\nimport { cloneDeep, concat, uniq } from 'lodash-es';\n\nimport CustomButton from '@/components/button/CustomButton';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { permissionLevels } from '@/constants';\nimport { useMobile, useSetCountry, useValidatePermissionWithComparisonType } from '@/hooks';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { GlobalContext } from '@/shared/global';\nimport {\n  createBCQuote,\n  createQuote,\n  getB2BCustomerAddresses,\n  getBCCustomerAddresses,\n} from '@/shared/service/b2b';\nimport { deleteCart } from '@/shared/service/bc/graphql/cart';\nimport {\n  activeCurrencyInfoSelector,\n  isB2BUserSelector,\n  resetDraftQuoteInfo,\n  resetDraftQuoteList,\n  setDraftQuoteInfo,\n  setDraftQuoteRecipients,\n  setQuoteUserId,\n  useAppDispatch,\n  useAppSelector,\n} from '@/store';\nimport { AddressItemType, BCAddressItemType } from '@/types/address';\nimport {\n  BillingAddress,\n  ContactInfoKeys,\n  QuoteExtraFields,\n  QuoteFormattedItemsProps,\n  QuoteInfo as QuoteInfoType,\n  ShippingAddress,\n} from '@/types/quotes';\nimport { B3LStorage, channelId, snackbar, storeHash } from '@/utils';\nimport { verifyCreatePermission } from '@/utils/b3CheckPermissions';\nimport { b2bPermissionsMap } from '@/utils/b3CheckPermissions/config';\nimport b2bLogger from '@/utils/b3Logger';\nimport { addQuoteDraftProducts, getVariantInfoOOSAndPurchase } from '@/utils/b3Product/b3Product';\nimport { deleteCartData } from '@/utils/cartUtils';\nimport validateObject from '@/utils/quoteUtils';\n\nimport { getProductOptionsFields } from '../../utils/b3Product/shared/config';\nimport { convertBCToB2BAddress } from '../Address/shared/config';\nimport { type PageProps } from '../PageProps';\nimport AddToQuote from '../quote/components/AddToQuote';\nimport ContactInfo from '../quote/components/ContactInfo';\nimport QuoteAddress from '../quote/components/QuoteAddress';\nimport QuoteAttachment from '../quote/components/QuoteAttachment';\nimport QuoteInfo from '../quote/components/QuoteInfo';\nimport QuoteNote from '../quote/components/QuoteNote';\nimport QuoteStatus from '../quote/components/QuoteStatus';\nimport QuoteSubmissionResponse from '../quote/components/QuoteSubmissionResponse';\nimport QuoteSummary from '../quote/components/QuoteSummary';\nimport QuoteTable from '../quote/components/QuoteTable';\nimport getAccountFormFields from '../quote/config';\nimport Container from '../quote/style';\nimport getB2BQuoteExtraFields from '../quote/utils/getQuoteExtraFields';\n\ntype BCAddress = {\n  node: BCAddressItemType;\n};\n\ntype B2BAddress = {\n  node: AddressItemType;\n};\n\nexport interface Country {\n  countryCode: string;\n  countryName: string;\n  id?: string;\n}\n\ninterface InfoRefProps extends HTMLInputElement {\n  getContactInfoValue: () => any;\n  setShippingInfoValue: (address: any) => void;\n}\n\ninterface QuoteSummaryRef extends HTMLInputElement {\n  refreshSummary: () => void;\n}\n\nconst shippingAddress = {\n  address: '',\n  addressId: 0,\n  apartment: '',\n  city: '',\n  country: '',\n  firstName: '',\n  label: '',\n  lastName: '',\n  phoneNumber: '',\n  state: '',\n  zipCode: '',\n  companyName: '',\n};\n\nconst billingAddress = {\n  address: '',\n  addressId: 0,\n  apartment: '',\n  city: '',\n  country: '',\n  firstName: '',\n  label: '',\n  lastName: '',\n  phoneNumber: '',\n  state: '',\n  zipCode: '',\n  companyName: '',\n};\n\nfunction QuoteDraft({ setOpenPage }: PageProps) {\n  const {\n    state: { countriesList, openAPPParams },\n  } = useContext(GlobalContext);\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyB2BId = useAppSelector(({ company }) => company.companyInfo.id);\n  const companyName = useAppSelector(({ company }) => company.companyInfo.companyName);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const dispatch = useAppDispatch();\n  const enteredInclusiveTax = useAppSelector(\n    ({ storeConfigs }) => storeConfigs.currencies.enteredInclusiveTax,\n  );\n  const draftQuoteList = useAppSelector(({ quoteInfo }) => quoteInfo.draftQuoteList);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const salesRepCompanyName = useAppSelector(\n    ({ b2bFeatures }) => b2bFeatures.masqueradeCompany.companyName,\n  );\n  const quoteInfoOrigin = useAppSelector(({ quoteInfo }) => quoteInfo.draftQuoteInfo);\n  const currency = useAppSelector(activeCurrencyInfoSelector);\n  const quoteSubmissionResponseInfo = useAppSelector(\n    ({ global }) => global.quoteSubmissionResponse,\n  );\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  const isEnableProduct = useAppSelector(\n    ({ global }) => global.blockPendingQuoteNonPurchasableOOS.isEnableProduct,\n  );\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const quotesActionsPermission = useMemo(() => {\n    if (isB2BUser) {\n      return verifyCreatePermission(\n        b2bPermissionsMap.quotesCreateActionsPermission,\n        Number(selectCompanyHierarchyId),\n      );\n    }\n\n    return true;\n  }, [isB2BUser, selectCompanyHierarchyId]);\n\n  const navigate = useNavigate();\n\n  const b3Lang = useB3Lang();\n\n  const [isMobile] = useMobile();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [isEdit, setEdit] = useState<boolean>(false);\n\n  const [addressList, setAddressList] = useState<B2BAddress[]>([]);\n\n  const [shippingSameAsBilling, setShippingSameAsBilling] = useState<boolean>(false);\n  const [billingChange, setBillingChange] = useState<boolean>(false);\n  const [quoteSubmissionResponseOpen, setQuoteSubmissionResponseOpen] = useState<boolean>(false);\n  const [quoteId, setQuoteId] = useState<string | number>('');\n  const [currentCreatedAt, setCurrentCreatedAt] = useState<string | number>('');\n  const [extraFields, setExtraFields] = useState<QuoteFormattedItemsProps[]>([]);\n\n  const quoteSummaryRef = useRef<QuoteSummaryRef | null>(null);\n\n  const [isAddressCompanyHierarchy] = useValidatePermissionWithComparisonType({\n    level: permissionLevels.COMPANY_SUBSIDIARIES,\n    code: b2bPermissionsMap.getAddressesPermission,\n    containOrEqual: 'equal',\n  });\n\n  useSetCountry();\n\n  const contactInfoRef = useRef<InfoRefProps | null>(null);\n  const billingRef = useRef<InfoRefProps | null>(null);\n  const shippingRef = useRef<InfoRefProps | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      setLoading(true);\n      const setCustomInfo = (quoteInfo: any) => {\n        const newInfo = {\n          ...quoteInfo,\n        };\n        newInfo.contactInfo = {\n          name: `${customer.firstName} ${customer.lastName}`,\n          email: customer.emailAddress,\n          companyName: companyName || salesRepCompanyName || '',\n          phoneNumber: customer.phoneNumber,\n        };\n        dispatch(setDraftQuoteInfo(newInfo));\n      };\n\n      const quoteInfo = cloneDeep(quoteInfoOrigin);\n\n      try {\n        if (isB2BUser) {\n          const companyId = companyB2BId || salesRepCompanyId;\n\n          let addressB2BList = [];\n          const fetchAddresses = async (id: number) => {\n            const {\n              addresses: { edges },\n            } = await getB2BCustomerAddresses(id);\n            return edges;\n          };\n\n          if (!selectCompanyHierarchyId) {\n            addressB2BList = await fetchAddresses(Number(companyId));\n          } else if (selectCompanyHierarchyId && isAddressCompanyHierarchy) {\n            addressB2BList = await fetchAddresses(Number(selectCompanyHierarchyId));\n          }\n\n          const shippingDefaultAddress = addressB2BList.find(\n            (item: B2BAddress) => item?.node?.isDefaultShipping === 1,\n          );\n          const billingDefaultAddress = addressB2BList.find(\n            (item: B2BAddress) => item?.node?.isDefaultBilling === 1,\n          );\n\n          if (shippingDefaultAddress && validateObject(quoteInfo, 'shippingAddress')) {\n            const addressItem = {\n              label: shippingDefaultAddress?.node?.label || '',\n              firstName: shippingDefaultAddress?.node?.firstName || '',\n              lastName: shippingDefaultAddress?.node?.lastName || '',\n              companyName: shippingDefaultAddress?.node?.company || '',\n              country: shippingDefaultAddress?.node?.countryCode || '',\n              address: shippingDefaultAddress?.node?.addressLine1 || '',\n              apartment: shippingDefaultAddress?.node?.addressLine2 || '',\n              city: shippingDefaultAddress?.node?.city || '',\n              state: shippingDefaultAddress?.node?.state || '',\n              zipCode: shippingDefaultAddress?.node?.zipCode || '',\n              phoneNumber: shippingDefaultAddress?.node?.phoneNumber || '',\n              addressId: shippingDefaultAddress?.node?.id\n                ? Number(shippingDefaultAddress.node.id)\n                : 0,\n            };\n\n            quoteInfo.shippingAddress = addressItem as ShippingAddress;\n          }\n          if (\n            billingDefaultAddress &&\n            (!quoteInfo?.billingAddress || validateObject(quoteInfo, 'billingAddress'))\n          ) {\n            const addressItem = {\n              label: billingDefaultAddress?.node?.label || '',\n              firstName: billingDefaultAddress?.node?.firstName || '',\n              lastName: billingDefaultAddress?.node?.lastName || '',\n              companyName: billingDefaultAddress?.node?.company || '',\n              country: billingDefaultAddress?.node?.countryCode || '',\n              address: billingDefaultAddress?.node?.addressLine1 || '',\n              apartment: billingDefaultAddress?.node?.addressLine2 || '',\n              city: billingDefaultAddress?.node?.city || '',\n              state: billingDefaultAddress?.node?.state || '',\n              zipCode: billingDefaultAddress?.node?.zipCode || '',\n              phoneNumber: billingDefaultAddress?.node?.phoneNumber || '',\n              addressId: billingDefaultAddress?.node?.id\n                ? Number(billingDefaultAddress.node.id)\n                : 0,\n            };\n\n            quoteInfo.billingAddress = addressItem as BillingAddress;\n          }\n\n          setAddressList(addressB2BList);\n        } else if (role !== 100) {\n          const {\n            customerAddresses: { edges: addressBCList = [] },\n          } = await getBCCustomerAddresses();\n\n          const list = addressBCList.map((address: BCAddress) => ({\n            node: convertBCToB2BAddress(address.node),\n          }));\n          setAddressList(list);\n        }\n\n        const extraFieldsInfo = await getB2BQuoteExtraFields();\n        if (extraFieldsInfo.length) {\n          setExtraFields(extraFieldsInfo);\n          const preExtraFields = quoteInfo.extraFields;\n          const defaultValues = extraFieldsInfo?.map((field) => {\n            const defaultValue =\n              preExtraFields?.find((item: QuoteExtraFields) => item.fieldName === field.name)\n                ?.value || field?.default;\n\n            return {\n              id: Number(field.id),\n              fieldName: field.name,\n              value: defaultValue || '',\n            };\n          });\n          quoteInfo.extraFields = defaultValues;\n        }\n\n        if (\n          quoteInfo &&\n          (!quoteInfo?.contactInfo || validateObject(quoteInfo, 'contactInfo')) &&\n          Number(role) !== 100\n        ) {\n          setCustomInfo(quoteInfo);\n        } else if (quoteInfo) {\n          dispatch(setDraftQuoteInfo(quoteInfo));\n        }\n      } finally {\n        const quoteUserId = customer.b2bId || customer.id || 0;\n        dispatch(setQuoteUserId(Number(quoteUserId)));\n\n        setLoading(false);\n      }\n    };\n\n    init();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectCompanyHierarchyId, isAddressCompanyHierarchy]);\n\n  const quoteAndExtraFieldsInfo = useMemo(() => {\n    const contactInfo: CustomFieldItems = quoteInfoOrigin.contactInfo || {};\n\n    return {\n      info: {\n        quoteTitle: contactInfo?.quoteTitle || '',\n        referenceNumber: quoteInfoOrigin?.referenceNumber || '',\n      },\n      extraFields: quoteInfoOrigin.extraFields || [],\n      recipients: quoteInfoOrigin.recipients || [],\n    };\n  }, [quoteInfoOrigin]);\n\n  const getAddress = () => {\n    const addressSaveInfo = {\n      shippingAddress,\n      billingAddress,\n    };\n\n    if (billingRef?.current) {\n      addressSaveInfo.billingAddress = billingRef.current.getContactInfoValue();\n    }\n    if (shippingRef?.current) {\n      addressSaveInfo.shippingAddress = shippingRef.current.getContactInfoValue();\n    }\n\n    return addressSaveInfo;\n  };\n\n  const handleSaveCCEmail = async (ccEmail: string[]) => {\n    dispatch(setDraftQuoteRecipients(ccEmail));\n  };\n\n  const handleCollectingData = async (saveInfo: QuoteInfoType) => {\n    if (contactInfoRef?.current) {\n      const contactInfo = await contactInfoRef.current.getContactInfoValue();\n      if (!contactInfo) return false;\n\n      const currentRecipients = saveInfo?.recipients || [];\n      if (contactInfo.ccEmail.trim().length) {\n        saveInfo.recipients = uniq(concat(currentRecipients, [contactInfo.ccEmail]));\n      }\n\n      saveInfo.contactInfo = {\n        name: contactInfo?.name,\n        email: contactInfo?.email,\n        companyName: contactInfo?.companyName || '',\n        phoneNumber: contactInfo?.phoneNumber,\n        quoteTitle: contactInfo?.quoteTitle,\n      };\n      saveInfo.referenceNumber = contactInfo?.referenceNumber || '';\n\n      const extraFieldsInfo = extraFields.map((field) => ({\n        id: Number(field.id),\n        fieldName: field.name,\n        value: field.name ? contactInfo[field.name] : '',\n      }));\n      saveInfo.extraFields = extraFieldsInfo;\n\n      return true;\n    }\n    return false;\n  };\n\n  const handleSaveInfoClick = async () => {\n    const saveInfo = cloneDeep(quoteInfoOrigin);\n    if (contactInfoRef?.current) {\n      const data = await handleCollectingData(saveInfo);\n      if (!data) return;\n    }\n\n    const { shippingAddress, billingAddress } = getAddress();\n\n    saveInfo.shippingAddress = shippingAddress;\n    saveInfo.billingAddress = billingAddress;\n\n    const isComplete = Object.keys(saveInfo.contactInfo).every((key: string) => {\n      if (key === 'phoneNumber' || key === 'companyName' || key === 'quoteTitle') {\n        return true;\n      }\n      return !!saveInfo.contactInfo[key as ContactInfoKeys];\n    });\n\n    if (isComplete) {\n      dispatch(setDraftQuoteInfo(saveInfo));\n      setEdit(false);\n    }\n  };\n\n  const handleEditInfoClick = () => {\n    setEdit(true);\n  };\n\n  const accountFormFields = getAccountFormFields(isMobile, b3Lang);\n\n  const updateSummary = () => {\n    quoteSummaryRef.current?.refreshSummary();\n  };\n\n  const addToQuote = (products: CustomFieldItems[]) => {\n    addQuoteDraftProducts(products);\n  };\n\n  const getFileList = (files: CustomFieldItems[]) => {\n    if (role === 100) {\n      return [];\n    }\n\n    return files.map((file) => ({\n      fileUrl: file.fileUrl,\n      fileName: file.fileName,\n      fileType: file.fileType,\n      fileSize: file.fileSize,\n    }));\n  };\n\n  const handleReset = () => {\n    dispatch(resetDraftQuoteInfo());\n    dispatch(resetDraftQuoteList());\n    B3LStorage.delete('cartToQuoteId');\n  };\n\n  const handleAfterSubmit = (\n    inpQuoteId?: string | number,\n    inpCurrentCreatedAt?: string | number,\n  ) => {\n    const currentQuoteId = inpQuoteId || quoteId;\n    const createdAt = inpCurrentCreatedAt || currentCreatedAt;\n\n    if (currentQuoteId) {\n      handleReset();\n      navigate(`/quoteDetail/${currentQuoteId}?date=${createdAt}`, {\n        state: {\n          to: 'draft',\n        },\n      });\n    }\n  };\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    try {\n      const info = cloneDeep(quoteInfoOrigin);\n      if (isEdit && contactInfoRef?.current) {\n        const data = await handleCollectingData(info);\n        if (!data) return;\n      }\n\n      const contactInfo = info?.contactInfo || {};\n\n      const quoteTitle = contactInfo?.quoteTitle || '';\n\n      if ('quoteTitle' in contactInfo) delete contactInfo.quoteTitle;\n\n      const isComplete = Object.keys(contactInfo).every((key: string) => {\n        if (key === 'phoneNumber' || key === 'companyName') {\n          return true;\n        }\n\n        return contactInfo && !!contactInfo[key as ContactInfoKeys];\n      });\n\n      if (validateObject(quoteInfoOrigin, 'contactInfo') || !isComplete) {\n        snackbar.error(b3Lang('quoteDraft.addQuoteInfo'));\n        return;\n      }\n\n      if (!draftQuoteList || draftQuoteList.length === 0) {\n        snackbar.error(b3Lang('quoteDraft.submit'));\n        return;\n      }\n\n      if (!isEnableProduct) {\n        const itHasInvalidProduct = draftQuoteList.some((item) => {\n          return getVariantInfoOOSAndPurchase(item)?.name;\n        });\n\n        if (itHasInvalidProduct) {\n          snackbar.error(b3Lang('quoteDraft.submit.errorTip'));\n          return;\n        }\n      }\n\n      const note = info?.note || '';\n      const newNote = note.trim().replace(/[\\r\\n]/g, '\\\\n');\n\n      const perfectAddress = (address: ShippingAddress | BillingAddress) => {\n        const newAddress = cloneDeep(address);\n\n        const countryItem = countriesList?.find(\n          (item: Country) => item.countryCode === newAddress.country,\n        );\n\n        if (countryItem) {\n          newAddress.country = countryItem.countryName;\n        }\n\n        newAddress.address = address?.address || '';\n        newAddress.apartment = address?.apartment || '';\n\n        return newAddress;\n      };\n\n      const { shippingAddress: editShippingAddress, billingAddress: editBillingAddress } =\n        billingRef?.current ? getAddress() : info;\n\n      const shippingAddress = editShippingAddress ? perfectAddress(editShippingAddress) : {};\n\n      const billingAddress = editBillingAddress ? perfectAddress(editBillingAddress) : {};\n\n      let allPrice = 0;\n      let allTaxPrice = 0;\n\n      const calculationTime = (value: string | number) => {\n        if (typeof value === 'string' && value.includes('-')) {\n          return `${new Date(value).getTime() / 1000}`;\n        }\n        return value;\n      };\n\n      const productList = draftQuoteList.map((item) => {\n        const { node } = item;\n        const product = {\n          ...node.productsSearch,\n          selectOptions: node?.optionList || '',\n        };\n\n        const productFields = getProductOptionsFields(product, {});\n        const optionsList =\n          productFields\n            .map((item) => ({\n              optionId: item.optionId,\n              optionValue:\n                item.fieldType === 'date' ? calculationTime(item.optionValue) : item.optionValue,\n              optionLabel: `${item.valueText}`,\n              optionName: item.valueLabel,\n              type: item?.fieldOriginType || item.fieldType,\n            }))\n            .filter((list: CustomFieldItems) => !!list.optionName) || [];\n\n        const variants = node?.productsSearch?.variants;\n        let variantsItem;\n        if (Array.isArray(variants)) {\n          variantsItem = variants.find((item) => item.sku === node.variantSku);\n        }\n\n        allPrice += Number(node?.basePrice || 0) * Number(node?.quantity || 0);\n\n        allTaxPrice += Number(node?.taxPrice || 0) * Number(node?.quantity || 0);\n\n        const items = {\n          productId: node?.productsSearch?.id,\n          sku: node.variantSku,\n          basePrice: Number(node?.basePrice || 0).toFixed(currency.decimal_places),\n          discount: '0.00',\n          offeredPrice: Number(node?.basePrice || 0).toFixed(currency.decimal_places),\n          quantity: node.quantity,\n          variantId: variantsItem?.variant_id,\n          imageUrl: node.primaryImage,\n          productName: node.productName,\n          options: optionsList,\n        };\n\n        return items;\n      });\n\n      const fileList = getFileList(quoteInfoOrigin?.fileInfo || []);\n\n      const data = {\n        message: newNote,\n        legalTerms: '',\n        totalAmount: enteredInclusiveTax\n          ? allPrice.toFixed(currency.decimal_places)\n          : (allPrice + allTaxPrice).toFixed(currency.decimal_places),\n        grandTotal: allPrice.toFixed(currency.decimal_places),\n        subtotal: allPrice.toFixed(currency.decimal_places),\n        companyId: isB2BUser ? selectCompanyHierarchyId || companyB2BId || salesRepCompanyId : '',\n        storeHash,\n        quoteTitle,\n        discount: '0.00',\n        channelId,\n        userEmail: customer.emailAddress,\n        shippingAddress,\n        billingAddress,\n        contactInfo,\n        productList,\n        fileList,\n        taxTotal: allTaxPrice.toFixed(currency.decimal_places),\n        currency: {\n          currencyExchangeRate: currency.currency_exchange_rate,\n          token: currency.token,\n          location: currency.token_location,\n          decimalToken: currency.decimal_token,\n          decimalPlaces: currency.decimal_places,\n          thousandsToken: currency.thousands_token,\n          currencyCode: currency.currency_code,\n        },\n        referenceNumber: `${info.referenceNumber}` || '',\n        extraFields: info.extraFields || [],\n        recipients: info.recipients || [],\n      };\n\n      const fn = Number(role) === 99 ? createBCQuote : createQuote;\n\n      if (!dispatchEvent('on-quote-create', data)) {\n        throw new Error();\n      }\n\n      const {\n        quoteCreate: {\n          quote: { id, createdAt },\n        },\n      } = await fn(data);\n\n      setQuoteId(id);\n      setCurrentCreatedAt(createdAt);\n\n      if (id) {\n        const cartId = B3LStorage.get('cartToQuoteId');\n        const deleteCartObject = deleteCartData(cartId);\n\n        await deleteCart(deleteCartObject);\n      }\n\n      if (quoteSubmissionResponseInfo.value === '0') {\n        handleAfterSubmit(id, createdAt);\n      } else {\n        setQuoteSubmissionResponseOpen(true);\n      }\n    } catch (error: any) {\n      b2bLogger.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCloseQuoteSubmissionResponse = () => {\n    setQuoteSubmissionResponseOpen(false);\n\n    handleAfterSubmit();\n  };\n\n  const backText = () => {\n    let text =\n      Number(role) === 100\n        ? b3Lang('quoteDraft.button.back')\n        : b3Lang('quoteDraft.button.backToQuoteLists');\n    if (openAPPParams?.quoteBtn === 'open') {\n      text = b3Lang('quoteDraft.button.back');\n    } else if (openAPPParams?.quoteBtn === 'add') {\n      text = b3Lang('quoteDraft.button.backToProduct');\n    }\n\n    return text;\n  };\n\n  useEffect(() => {\n    if (billingChange && shippingSameAsBilling) {\n      if (billingRef.current) {\n        const billingAddress = billingRef.current.getContactInfoValue();\n\n        if (shippingRef.current) {\n          shippingRef.current.setShippingInfoValue(billingAddress);\n        }\n      }\n    }\n  }, [billingChange, shippingSameAsBilling]);\n\n  return (\n    <B3Spin isSpinning={loading}>\n      <Box\n        sx={{\n          mb: '60px',\n          width: '100%',\n        }}\n      >\n        <Box\n          sx={{\n            marginBottom: '10px',\n            width: 'fit-content',\n            displayPrint: 'none',\n          }}\n        >\n          <Box\n            sx={{\n              color: 'primary.main',\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n            }}\n            onClick={() => {\n              if (openAPPParams?.quoteBtn || Number(role) === 100) {\n                navigate('/');\n                setOpenPage({\n                  isOpen: false,\n                  openUrl: '',\n                });\n              } else {\n                navigate('/quotes');\n              }\n            }}\n          >\n            <ArrowBackIosNew\n              fontSize=\"small\"\n              sx={{\n                fontSize: '12px',\n                marginRight: '0.5rem',\n              }}\n            />\n            <p\n              style={{\n                margin: '0',\n              }}\n            >\n              {backText()}\n            </p>\n          </Box>\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              mb: '24px',\n              flexDirection: isMobile ? 'column' : 'row',\n              alignItems: isMobile ? 'flex-start' : 'center',\n            }}\n          >\n            <Typography\n              component=\"h3\"\n              sx={{\n                fontSize: '34px',\n                mr: '1rem',\n                mb: isMobile ? '1rem' : '0',\n                color: getContrastColor(backgroundColor),\n              }}\n            >\n              {b3Lang('quoteDraft.title.Quote')}\n            </Typography>\n            <QuoteStatus code=\"0\" />\n          </Box>\n          {quotesActionsPermission && (\n            <Box>\n              {!isMobile ? (\n                <CustomButton\n                  variant=\"contained\"\n                  size=\"small\"\n                  sx={{\n                    padding: '8px 22px',\n                    alignSelf: 'center',\n                    marginBottom: '24px',\n                  }}\n                  onClick={handleSubmit}\n                >\n                  {b3Lang('quoteDraft.button.submit')}\n                </CustomButton>\n              ) : (\n                <Box\n                  sx={{\n                    position: 'fixed',\n                    left: 0,\n                    bottom: 0,\n                    background: '#FFF',\n                    width: '100%',\n                    display: 'flex',\n                    p: '8px 0',\n                    zIndex: 100,\n                    justifyContent: 'center',\n                  }}\n                >\n                  <CustomButton\n                    variant=\"contained\"\n                    size=\"small\"\n                    sx={{\n                      height: '38px',\n                      width: '90%',\n                    }}\n                    onClick={handleSubmit}\n                  >\n                    {b3Lang('quoteDraft.button.submit')}\n                  </CustomButton>\n                </Box>\n              )}\n            </Box>\n          )}\n        </Box>\n\n        <Box>\n          {!isEdit && (\n            <QuoteInfo\n              quoteAndExtraFieldsInfo={quoteAndExtraFieldsInfo}\n              status=\"Draft\"\n              contactInfo={quoteInfoOrigin?.contactInfo}\n              shippingAddress={quoteInfoOrigin?.shippingAddress}\n              billingAddress={quoteInfoOrigin?.billingAddress || {}}\n              handleEditInfoClick={handleEditInfoClick}\n            />\n          )}\n          {isEdit && (\n            <Container flexDirection=\"column\">\n              <ContactInfo\n                emailAddress={customer.emailAddress}\n                info={quoteInfoOrigin?.contactInfo}\n                referenceNumber={quoteInfoOrigin?.referenceNumber || ''}\n                quoteExtraFields={extraFields}\n                extraFieldsDefault={quoteInfoOrigin.extraFields || []}\n                recipients={quoteInfoOrigin?.recipients || []}\n                handleSaveCCEmail={handleSaveCCEmail}\n                ref={contactInfoRef}\n              />\n              <Box\n                sx={{\n                  display: 'flex',\n                  mt: isMobile ? 0 : '3rem',\n                  flexDirection: isMobile ? 'column' : 'row',\n                }}\n              >\n                <QuoteAddress\n                  title={b3Lang('quoteDraft.section.billing')}\n                  info={quoteInfoOrigin?.billingAddress}\n                  addressList={addressList}\n                  pr={isMobile ? 0 : '8px'}\n                  ref={billingRef}\n                  role={role}\n                  accountFormFields={accountFormFields}\n                  shippingSameAsBilling={shippingSameAsBilling}\n                  type=\"billing\"\n                  setBillingChange={setBillingChange}\n                />\n                <QuoteAddress\n                  title={b3Lang('quoteDraft.section.shipping')}\n                  info={quoteInfoOrigin?.shippingAddress}\n                  addressList={addressList}\n                  pl={isMobile ? 0 : '8px'}\n                  ref={shippingRef}\n                  role={role}\n                  accountFormFields={accountFormFields}\n                  shippingSameAsBilling={shippingSameAsBilling}\n                  type=\"shipping\"\n                  setBillingChange={setBillingChange}\n                />\n              </Box>\n              <FormControlLabel\n                label={b3Lang('quoteDraft.checkbox.sameAddressShippingAndBilling')}\n                control={\n                  <Checkbox\n                    checked={shippingSameAsBilling}\n                    onChange={(e) => {\n                      setShippingSameAsBilling(e.target.checked);\n                      if (billingRef.current) {\n                        const billingAddress = billingRef.current.getContactInfoValue();\n\n                        if (shippingRef.current && e.target.checked) {\n                          shippingRef.current.setShippingInfoValue(billingAddress);\n                        }\n                      }\n                    }}\n                  />\n                }\n                sx={{\n                  mt: 2,\n                }}\n              />\n              <CustomButton\n                sx={{\n                  mt: '20px',\n                  mb: '15px',\n                }}\n                onClick={handleSaveInfoClick}\n                variant=\"outlined\"\n              >\n                {b3Lang('quoteDraft.button.saveInfo')}\n              </CustomButton>\n            </Container>\n          )}\n        </Box>\n        <Box\n          sx={{\n            mt: '20px',\n            display: 'flex',\n            flexDirection: isMobile ? 'column' : 'row',\n            alignItems: 'flex-start',\n          }}\n        >\n          <Container\n            flexDirection=\"column\"\n            xs={{\n              flexBasis: isMobile ? '100%' : '680px',\n              flexGrow: 2,\n              marginRight: '20px',\n              marginBottom: '20px',\n              boxShadow:\n                '0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 1px 3px rgba(0, 0, 0, 0.12)',\n              borderRadius: '4px',\n            }}\n          >\n            <QuoteTable\n              updateSummary={updateSummary}\n              total={draftQuoteList.length}\n              items={draftQuoteList}\n              isB2BUser={isB2BUser}\n            />\n          </Container>\n\n          <Container\n            flexDirection=\"column\"\n            xs={{\n              flexBasis: isMobile ? '100%' : '340px',\n              marginBottom: '20px',\n              backgroundColor: 'transparent',\n              padding: 0,\n              flexGrow: 1,\n            }}\n          >\n            <Stack\n              spacing={2}\n              sx={{\n                width: '100%',\n              }}\n            >\n              <QuoteSummary ref={quoteSummaryRef} />\n              <AddToQuote\n                updateList={updateSummary}\n                addToQuote={addToQuote}\n                isB2BUser={isB2BUser}\n              />\n\n              <QuoteNote quoteStatus=\"Draft\" />\n\n              {role !== 100 && <QuoteAttachment status={0} />}\n            </Stack>\n          </Container>\n        </Box>\n      </Box>\n\n      <QuoteSubmissionResponse\n        isOpen={quoteSubmissionResponseOpen}\n        onClose={handleCloseQuoteSubmissionResponse}\n        quoteSubmissionResponseInfo={quoteSubmissionResponseInfo}\n      />\n    </B3Spin>\n  );\n}\n\nexport default QuoteDraft;\n","import { useContext, useEffect } from 'react';\nimport { Control, FieldValues, UseFormGetValues, UseFormSetValue, useWatch } from 'react-hook-form';\n\nimport { GlobalContext } from '@/shared/global';\nimport { Country, State } from '@/shared/global/context/config';\nimport { getB2BCountries } from '@/shared/service/b2b';\n\nconst useSetCountry = () => {\n  const {\n    state: { countriesList },\n    dispatch,\n  } = useContext(GlobalContext);\n\n  useEffect(() => {\n    const init = async () => {\n      if (countriesList && !countriesList.length) {\n        const { countries } = await getB2BCountries();\n\n        dispatch({\n          type: 'common',\n          payload: {\n            countriesList: countries,\n          },\n        });\n      }\n    };\n    init();\n    // ignore dispatch, it's not affecting any value from this\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countriesList]);\n};\n\ninterface FormFieldsProps extends Record<string, any> {\n  name: string;\n  label?: string;\n  required?: boolean;\n  fieldType?: string;\n  default?: string | Array<any> | number;\n  xs: number;\n  variant: string;\n  size: string;\n  options?: any[];\n}\n\ninterface GetCountryProps {\n  setAddress: (arr: FormFieldsProps[]) => void;\n  setValue: UseFormSetValue<FieldValues>;\n  getValues: UseFormGetValues<FieldValues>;\n  addresses: FormFieldsProps[];\n  control: Control;\n}\n\nconst useGetCountry = ({\n  setAddress,\n  setValue,\n  getValues,\n  control,\n  addresses,\n}: GetCountryProps) => {\n  const {\n    state: { countriesList },\n  } = useContext(GlobalContext);\n\n  const countryCode = useWatch({\n    control,\n    name: 'country',\n  });\n\n  // Populate country array\n  useEffect(() => {\n    const countriesFieldIndex = addresses.findIndex(\n      (formFields: FormFieldsProps) => formFields.name === 'country',\n    );\n    if (countriesList?.length && countriesFieldIndex !== -1) {\n      setAddress(\n        addresses.map((addressField, addressFieldIndex) => {\n          if (countriesFieldIndex === addressFieldIndex) {\n            return { ...addressField, options: countriesList };\n          }\n          return addressField;\n        }),\n      );\n    }\n    // ignore addresses cause it will trigger loop array\n    // ignore setAddress due it's no affecting any logic\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countriesList]);\n\n  // Populate state array when the user change selected country\n  useEffect(() => {\n    if (!countryCode || !countriesList?.length) return;\n    const stateList =\n      countriesList.find((country: Country) => country.countryCode === countryCode)?.states || [];\n    const stateFieldIndex = addresses.findIndex(\n      (formFields: FormFieldsProps) => formFields.name === 'state',\n    );\n    if (stateFieldIndex !== -1) {\n      setAddress(\n        addresses.map((addressField, addressFieldIndex) => {\n          if (stateFieldIndex === addressFieldIndex) {\n            if (stateList.length > 0) {\n              return {\n                ...addressField,\n                fieldType: 'dropdown',\n                options: stateList,\n                required: true,\n              };\n            }\n            return { ...addressField, fieldType: 'text', options: [], required: false };\n          }\n          return addressField;\n        }),\n      );\n    }\n\n    const stateVal = getValues('state');\n\n    setValue(\n      'state',\n      stateVal &&\n        countryCode &&\n        (stateList.find((state: State) => state.stateName === stateVal) || stateList.length === 0)\n        ? stateVal\n        : '',\n    );\n    // ignore addresses cause it will trigger loop array\n    // ignore setAddress, getValues and setValue due they're not affecting any value from this\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countryCode, countriesList]);\n};\n\nexport { useGetCountry, useSetCountry };\n","import { QuoteInfo } from '@/types/quotes';\n\ntype ValidKeys = 'contactInfo' | 'shippingAddress' | 'billingAddress';\n\nconst validateObject = (quoteInfo: QuoteInfo, key: ValidKeys) =>\n  Object.values(quoteInfo?.[key]).every((x) => x === '' || x === 0);\n\nexport default validateObject;\n","import { useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\nimport { Box, Card, CardContent, Divider } from '@mui/material';\nimport { v1 as uuid } from 'uuid';\n\nimport { B3CollapseContainer, B3Upload } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\nimport { PRODUCT_DEFAULT_IMAGE } from '@/constants';\nimport { useBlockPendingAccountViewPrice } from '@/hooks';\nimport { searchB2BProducts, searchBcProducts } from '@/shared/service/b2b';\nimport { useAppSelector } from '@/store';\nimport { snackbar } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport {\n  addQuoteDraftProducts,\n  calculateProductListPrice,\n  validProductQty,\n} from '@/utils/b3Product/b3Product';\nimport { conversionProductsList } from '@/utils/b3Product/shared/config';\n\nimport QuickAdd from '../../ShoppingListDetails/components/QuickAdd';\nimport SearchProduct from '../../ShoppingListDetails/components/SearchProduct';\n\ninterface AddToListProps {\n  updateList: () => void;\n  addToQuote: (products: CustomFieldItems[]) => void;\n  isB2BUser: boolean;\n}\n\nexport default function AddToQuote(props: AddToListProps) {\n  const { updateList, addToQuote, isB2BUser } = props;\n\n  const companyId = useAppSelector(({ company }) => company.companyInfo.id);\n  const customerGroupId = useAppSelector(({ company }) => company.customer.customerGroupId);\n  const companyStatus = useAppSelector(({ company }) => company.companyInfo.status);\n\n  const [isOpenBulkLoadCSV, setIsOpenBulkLoadCSV] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [blockPendingAccountViewPrice] = useBlockPendingAccountViewPrice();\n\n  const b3Lang = useB3Lang();\n\n  const getNewQuoteProduct = (products: CustomFieldItems[]) =>\n    products.map((product) => {\n      const {\n        variantId,\n        newSelectOptionList,\n        id: productId,\n        name: productName,\n        quantity,\n        variants = [],\n        basePrice,\n        taxPrice,\n        calculatedValue,\n      } = product;\n\n      const variantInfo =\n        variants.length === 1\n          ? variants[0]\n          : variants.find((item: CustomFieldItems) => item.variant_id === variantId);\n\n      const { image_url: primaryImage = '', sku: variantSku } = variantInfo;\n\n      let selectOptions;\n      try {\n        selectOptions = JSON.stringify(newSelectOptionList);\n      } catch (error) {\n        selectOptions = '[]';\n      }\n\n      const taxExclusive = variantInfo.bc_calculated_price.tax_exclusive;\n      const taxInclusive = variantInfo.bc_calculated_price.tax_inclusive;\n\n      const basePriceExclusiveTax = basePrice || taxExclusive;\n\n      const tax = taxPrice || Number(taxInclusive) - Number(taxExclusive);\n\n      return {\n        node: {\n          basePrice: basePriceExclusiveTax,\n          taxPrice: tax,\n          optionList: selectOptions,\n          id: uuid(),\n          primaryImage,\n          productId,\n          productName,\n          calculatedValue,\n          productsSearch: {\n            ...product,\n            selectOptions,\n          },\n          quantity,\n          variantSku,\n        },\n      };\n    });\n\n  const addToList = async (products: CustomFieldItems[]) => {\n    const newProducts = getNewQuoteProduct(products);\n    const noSkuProducts = products.filter(({ sku, variantId, variants }) => {\n      const currentProduct = variants.find(\n        (item: CustomFieldItems) => item.variant_id === variantId || item.variantId === variantId,\n      );\n\n      const variantSku = currentProduct.sku;\n\n      return !(sku || variantSku);\n    });\n    if (noSkuProducts.length > 0) {\n      snackbar.error(b3Lang('quoteDraft.notification.cantAddProductsNoSku'), {\n        isClose: true,\n      });\n    }\n\n    if (noSkuProducts.length === products.length) return [];\n\n    addToQuote(newProducts);\n\n    snackbar.success(b3Lang('quoteDraft.notification.productSingular'), {\n      isClose: true,\n    });\n\n    return products;\n  };\n\n  const quickAddToList = async (variantProducts: CustomFieldItems[]) => {\n    const productIds = variantProducts.map((item) => item.productId);\n\n    const { productsSearch } = await searchB2BProducts({\n      productIds,\n      companyId,\n      customerGroupId,\n    });\n\n    const productList = productsSearch.map((product: CustomFieldItems) => {\n      const variantProduct =\n        variantProducts.find(\n          (variantProduct: CustomFieldItems) => variantProduct.productId === product.id,\n        ) || {};\n\n      const { variantId, newSelectOptionList, quantity } = variantProduct;\n\n      return {\n        ...product,\n        variantId,\n        newSelectOptionList,\n        quantity,\n      };\n    });\n\n    await calculateProductListPrice(productList);\n\n    const newProducts = getNewQuoteProduct(productList);\n\n    addToQuote(newProducts);\n\n    snackbar.success(b3Lang('quoteDraft.notification.productPlural'), {\n      isClose: true,\n    });\n\n    return variantProducts;\n  };\n\n  const getOptionsList = (options: CustomFieldItems) => {\n    if (options?.length === 0) return [];\n\n    const option = options.map(\n      ({ option_id: optionId, id }: { option_id: number | string; id: string | number }) => ({\n        optionId: `attribute[${optionId}]`,\n        optionValue: id,\n      }),\n    );\n\n    return option;\n  };\n\n  const handleCSVAddToList = async (productsData: CustomFieldItems) => {\n    setIsLoading(true);\n    try {\n      const { validProduct } = productsData;\n\n      const productIds: number[] = [];\n      validProduct.forEach((product: CustomFieldItems) => {\n        const { products } = product;\n\n        if (!productIds.includes(Number(products.productId))) {\n          productIds.push(Number(products.productId));\n        }\n      });\n\n      const getProducts = isB2BUser ? searchB2BProducts : searchBcProducts;\n\n      const { productsSearch } = await getProducts({\n        productIds,\n        companyId,\n        customerGroupId,\n      });\n\n      const newProductInfo: CustomFieldItems = conversionProductsList(productsSearch);\n\n      let isSuccess = false;\n\n      const newProducts: CustomFieldItems[] = [];\n      validProduct.forEach((product: CustomFieldItems) => {\n        const {\n          products: { option, variantSku, productId, productName, variantId },\n          qty,\n        } = product;\n\n        const optionsList = getOptionsList(option);\n\n        const currentProductSearch = newProductInfo.find(\n          (product: CustomFieldItems) => Number(product.id) === Number(productId),\n        );\n\n        const variantItem = currentProductSearch.variants.find(\n          (item: CustomFieldItems) => item?.sku?.toUpperCase() === variantSku?.toUpperCase(),\n        );\n\n        const quoteListitem = {\n          node: {\n            id: uuid(),\n            variantSku: variantItem?.sku,\n            variantId,\n            productsSearch: currentProductSearch,\n            primaryImage: variantItem.image_url || PRODUCT_DEFAULT_IMAGE,\n            productName,\n            quantity: Number(qty) || 1,\n            optionList: JSON.stringify(optionsList),\n            productId,\n            basePrice: variantItem.bc_calculated_price.as_entered,\n            taxPrice:\n              variantItem.bc_calculated_price.tax_inclusive -\n              variantItem.bc_calculated_price.tax_exclusive,\n          },\n        };\n\n        newProducts.push(quoteListitem);\n\n        isSuccess = true;\n      });\n      isSuccess = validProductQty(newProducts);\n      if (isSuccess) {\n        await calculateProductListPrice(newProducts, '2');\n\n        addQuoteDraftProducts(newProducts);\n        snackbar.success(b3Lang('quoteDraft.notification.productPlural'), {\n          isClose: true,\n        });\n        updateList();\n        setIsOpenBulkLoadCSV(false);\n      } else {\n        snackbar.error(b3Lang('quoteDraft.notification.errorRangeProducts'));\n      }\n    } catch (e) {\n      b2bLogger.error(e);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleOpenUploadDiag = () => {\n    if (blockPendingAccountViewPrice && companyStatus === 0) {\n      snackbar.info(b3Lang('quoteDraft.notification.businessAccountPendingActivation'));\n    } else {\n      setIsOpenBulkLoadCSV(true);\n    }\n  };\n\n  return (\n    <Card>\n      <CardContent\n        sx={{\n          p: '16px !important',\n        }}\n      >\n        <B3CollapseContainer title={b3Lang('quoteDraft.collapseTitle.addToQuote')}>\n          <SearchProduct\n            updateList={updateList}\n            addToList={addToList}\n            type=\"quote\"\n            searchDialogTitle={b3Lang('quoteDraft.modalTitle.addToQuote')}\n            addButtonText={b3Lang('quoteDraft.searchProduct.addToQuoteButton')}\n            isB2BUser={isB2BUser}\n          />\n\n          <Divider />\n\n          <QuickAdd\n            updateList={updateList}\n            quickAddToList={quickAddToList}\n            level={1}\n            buttonText={b3Lang('quoteDraft.button.addProductsToAddToQuote')}\n          />\n\n          <Divider />\n\n          <Box\n            sx={{\n              margin: '20px 0 0',\n            }}\n          >\n            <CustomButton variant=\"text\" onClick={() => handleOpenUploadDiag()}>\n              <UploadFileIcon\n                sx={{\n                  marginRight: '8px',\n                }}\n              />\n              {b3Lang('quoteDraft.button.bulkUploadCSV')}\n            </CustomButton>\n          </Box>\n\n          <B3Upload\n            isOpen={isOpenBulkLoadCSV}\n            setIsOpen={setIsOpenBulkLoadCSV}\n            handleAddToList={handleCSVAddToList}\n            isLoading={isLoading}\n            withModifiers\n          />\n        </B3CollapseContainer>\n      </CardContent>\n    </Card>\n  );\n}\n","import { forwardRef, useEffect, useImperativeHandle } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { LangFormatFunction, useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\nimport trim from 'lodash-es/trim';\n\nimport { B3CustomForm } from '@/components';\nimport { useMobile } from '@/hooks';\nimport { validateQuoteExtraFields } from '@/shared/service/b2b';\nimport { isValidUserTypeSelector, useAppSelector } from '@/store';\nimport { CustomerRole } from '@/types';\nimport {\n  ContactInfo as ContactInfoType,\n  QuoteExtraFields,\n  QuoteFormattedItemsProps,\n} from '@/types/quotes';\nimport { validatorRules } from '@/utils';\n\nexport interface GetQuoteInfoProps {\n  isMobile: boolean;\n  b3Lang: LangFormatFunction;\n  quoteExtraFields: QuoteFormattedItemsProps[];\n  referenceNumber: string | undefined;\n  recipients: string[] | undefined;\n  handleSaveClick: (ccEmails: string[]) => void;\n}\n\nconst emailValidate = validatorRules(['email']);\n\nconst getContactInfo = (isMobile: boolean, b3Lang: LangFormatFunction, isGuest: boolean) => {\n  const contactInfo = [\n    {\n      name: 'name',\n      label: b3Lang('quoteDraft.contactInfo.contactPerson'),\n      required: true,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n      disabled: !isGuest,\n    },\n    {\n      name: 'email',\n      label: b3Lang('quoteDraft.contactInfo.email'),\n      required: true,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n      validate: emailValidate,\n      disabled: !isGuest,\n    },\n    {\n      name: 'phoneNumber',\n      label: b3Lang('quoteDraft.contactInfo.phone'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'companyName',\n      label: b3Lang('quoteDraft.contactInfo.companyName'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n\n  return contactInfo;\n};\n\nconst getQuoteInfo = ({\n  isMobile,\n  b3Lang,\n  quoteExtraFields,\n  referenceNumber,\n  recipients,\n  handleSaveClick,\n}: GetQuoteInfoProps) => {\n  const currentExtraFields = quoteExtraFields.map((field) => ({\n    ...field,\n    xs: isMobile ? 12 : 6,\n  }));\n\n  const quoteInfo = [\n    {\n      name: 'quoteTitle',\n      label: b3Lang('quoteDraft.contactInfo.quoteTitle'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'referenceNumber',\n      label: b3Lang('quoteDraft.contactInfo.referenceNumber'),\n      required: false,\n      default: referenceNumber || '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    ...currentExtraFields,\n    {\n      name: 'ccEmail',\n      label: b3Lang('quoteDraft.contactInfo.ccEmail'),\n      required: false,\n      default: '',\n      fieldType: 'multiInputText',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n      isEmail: true,\n      existValue: recipients,\n      validate: emailValidate,\n      isEnterTrigger: true,\n      handleSave: handleSaveClick,\n    },\n  ];\n\n  return quoteInfo;\n};\n\ninterface ContactInfoProps {\n  info: ContactInfoType;\n  quoteExtraFields: QuoteFormattedItemsProps[];\n  emailAddress?: string;\n  referenceNumber?: string | undefined;\n  extraFieldsDefault: QuoteExtraFields[];\n  recipients: string[] | undefined;\n  handleSaveCCEmail: (ccEmail: string[]) => void;\n}\n\nfunction ContactInfo(\n  {\n    info,\n    emailAddress,\n    quoteExtraFields,\n    referenceNumber,\n    extraFieldsDefault,\n    recipients,\n    handleSaveCCEmail,\n  }: ContactInfoProps,\n  ref: any,\n) {\n  const {\n    control,\n    getValues,\n    setError,\n    formState: { errors },\n    setValue,\n    handleSubmit,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const isGuest = role === CustomerRole.GUEST;\n\n  const isValidUserType = useAppSelector(isValidUserTypeSelector);\n\n  const [isMobile] = useMobile();\n\n  const b3Lang = useB3Lang();\n\n  useEffect(() => {\n    if (info && JSON.stringify(info) !== '{}') {\n      Object.keys(info).forEach((item: string) => {\n        setValue(item, info && info[item as keyof ContactInfoType]);\n      });\n    }\n\n    if (extraFieldsDefault.length) {\n      extraFieldsDefault.forEach((item) => {\n        if (item.fieldName) setValue(item.fieldName, item.value);\n      });\n    }\n    // Disable eslint exhaustive-deps rule for setValue dispatcher\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [info, extraFieldsDefault]);\n\n  const validateEmailValue = async (emailValue: string) => {\n    if (emailAddress === trim(emailValue)) return true;\n\n    if (!isValidUserType) {\n      setError('email', {\n        type: 'custom',\n        message: b3Lang('quoteDraft.contactInfo.emailExists'),\n      });\n    }\n\n    return isValidUserType;\n  };\n\n  const validateQuoteExtraFieldsInfo = async () => {\n    const values = getValues();\n    const extraFields = quoteExtraFields.map((field) => ({\n      fieldName: field.name,\n      fieldValue: field.name ? values[field.name] : '',\n    }));\n\n    const res = await validateQuoteExtraFields({\n      extraFields,\n    });\n\n    if (res.code !== 200) {\n      const message = res.data?.errMsg || res.message || '';\n\n      const messageArr = message.split(':');\n\n      if (messageArr.length >= 2) {\n        const field = quoteExtraFields?.find((field) => field.name === messageArr[0]);\n        if (field && field.name) {\n          setError(field.name, {\n            type: 'manual',\n            message: messageArr[1],\n          });\n\n          return false;\n        }\n      }\n      return false;\n    }\n    return true;\n  };\n\n  const handleSaveClick = (ccEmails: string[]) => {\n    handleSaveCCEmail(ccEmails);\n  };\n\n  const getContactInfoValue = async () => {\n    let isValid = true;\n    await handleSubmit(\n      async (data) => {\n        isValid = await validateEmailValue(data.email);\n      },\n      () => {\n        isValid = false;\n      },\n    )();\n\n    if (isValid) {\n      isValid = await validateQuoteExtraFieldsInfo();\n    }\n\n    return isValid ? getValues() : isValid;\n  };\n\n  useImperativeHandle(ref, () => ({\n    getContactInfoValue,\n  }));\n\n  const contactInfo = getContactInfo(isMobile, b3Lang, isGuest);\n  const quoteInfo = getQuoteInfo({\n    isMobile,\n    b3Lang,\n    quoteExtraFields,\n    referenceNumber,\n    recipients,\n    handleSaveClick,\n  });\n\n  const formData = [\n    {\n      title: b3Lang('quoteDraft.contactInfo.contact'),\n      infos: contactInfo,\n    },\n    {\n      title: b3Lang('quoteDraft.quoteInfo.title'),\n      infos: quoteInfo,\n      style: {\n        mt: '20px',\n      },\n    },\n  ];\n\n  return (\n    <Box width=\"100%\">\n      {formData.map((data) => (\n        <Box key={data.title} width=\"100%\">\n          <Box\n            sx={{\n              fontWeight: 400,\n              fontSize: '24px',\n              height: '32px',\n              mb: '20px',\n              ...data?.style,\n            }}\n          >\n            {data.title}\n          </Box>\n\n          <B3CustomForm\n            formFields={data.infos}\n            errors={errors}\n            control={control}\n            setError={setError}\n            getValues={getValues}\n            setValue={setValue}\n          />\n        </Box>\n      ))}\n    </Box>\n  );\n}\n\nexport default forwardRef(ContactInfo);\n","import { useB3Lang } from '@b3/lang';\nimport styled from '@emotion/styled';\nimport { Theme, useTheme } from '@mui/material';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\n\nimport { B3Tag } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\n\nimport { AddressItemType } from '../../../types/address';\n\nexport interface OrderItemCardProps {\n  item: AddressItemType;\n  onSetAddress: (data: AddressItemType) => void;\n}\n\ninterface TagBoxProps {\n  marginBottom: number | string;\n}\n\nconst TagBox = styled('div')(({ marginBottom }: TagBoxProps) => ({\n  marginBottom,\n  '& > span:not(:last-child)': {\n    marginRight: '4px',\n  },\n}));\n\ninterface FlexProps {\n  theme?: Theme;\n}\n\nconst Flex = styled('div')(({ theme }: FlexProps) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  marginTop: theme!.spacing(3),\n}));\n\nexport function AddressItemCard(props: OrderItemCardProps) {\n  const { item: addressInfo, onSetAddress } = props;\n\n  const theme = useTheme();\n\n  const b3Lang = useB3Lang();\n\n  return (\n    <Card key={addressInfo.id}>\n      <CardContent\n        sx={{\n          color: '#313440',\n          wordBreak: 'break-word',\n        }}\n      >\n        {addressInfo.label && (\n          <Typography\n            variant=\"h5\"\n            sx={{\n              marginBottom:\n                addressInfo.isDefaultShipping === 1 || addressInfo.isDefaultBilling === 1\n                  ? theme.spacing(1)\n                  : theme.spacing(3),\n              color: 'rgba(0, 0, 0, 0.87)',\n            }}\n          >\n            {addressInfo.label}\n          </Typography>\n        )}\n\n        <TagBox\n          marginBottom={\n            addressInfo.isDefaultShipping === 1 || addressInfo.isDefaultBilling === 1\n              ? theme.spacing(3)\n              : 0\n          }\n        >\n          {addressInfo.isDefaultShipping === 1 && (\n            <B3Tag color=\"#C4DD6C\" textColor=\"rgba(0, 0, 0, 0.87)\">\n              {b3Lang('quoteDraft.addressItemCard.defaultShipping')}\n            </B3Tag>\n          )}\n          {addressInfo.isDefaultBilling === 1 && (\n            <B3Tag color=\"#C4DD6C\" textColor=\"rgba(0, 0, 0, 0.87)\">\n              {b3Lang('quoteDraft.addressItemCard.defaultBilling')}\n            </B3Tag>\n          )}\n        </TagBox>\n\n        <Typography variant=\"body1\">{`${addressInfo.firstName} ${addressInfo.lastName}`}</Typography>\n        <Typography variant=\"body1\">{addressInfo.company || ''}</Typography>\n        <Typography variant=\"body1\">{addressInfo.addressLine1}</Typography>\n        <Typography variant=\"body1\">{addressInfo.addressLine2}</Typography>\n        <Typography variant=\"body1\">{`${addressInfo.city}, ${addressInfo.state} ${addressInfo.zipCode}, ${addressInfo.country}`}</Typography>\n        <Typography variant=\"body1\">{addressInfo.phoneNumber}</Typography>\n\n        <Flex>\n          <CustomButton\n            variant=\"text\"\n            onClick={() => {\n              onSetAddress(addressInfo);\n            }}\n          >\n            {b3Lang('quoteDraft.addressItemCard.chooseAddress')}\n          </CustomButton>\n        </Flex>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, Grid } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\nimport B3FilterSearch from '@/components/filter/B3FilterSearch';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { AddressItemType } from '@/types/address';\n\nimport { AddressItemCard } from './AddressItemCard';\n\ntype AddressItemProps = {\n  node: AddressItemType;\n};\n\ninterface ChooseAddressProps {\n  isOpen: boolean;\n  addressList: AddressItemProps[];\n  closeModal: () => void;\n  handleChangeAddress: (address: AddressItemType) => void;\n  type: string;\n}\n\ninterface RefProps {\n  copyList: AddressItemType[];\n}\n\nfunction ChooseAddress({\n  isOpen,\n  closeModal,\n  handleChangeAddress,\n  addressList = [],\n  type,\n}: ChooseAddressProps) {\n  const recordList = useRef<RefProps>({\n    copyList: [],\n  });\n  const b3Lang = useB3Lang();\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const [list, setList] = useState<AddressItemType[]>([]);\n\n  useEffect(() => {\n    if (addressList.length) {\n      const allList = addressList.map((item: AddressItemProps) => item.node);\n      const newList = allList.filter(\n        (item) =>\n          (item.isShipping === 1 && type === 'shipping') ||\n          (item.isBilling === 1 && type === 'billing'),\n      );\n      recordList.current.copyList = isB2BUser ? newList : allList;\n      setList(newList);\n    }\n  }, [addressList, type, isB2BUser]);\n\n  const keys = [\n    'address',\n    'firstName',\n    'lastName',\n    'phoneNumber',\n    'state',\n    'zipCode',\n    'country',\n    'label',\n    'address',\n    'addressLine1',\n  ];\n\n  const handleSearchProduct = (q: string) => {\n    if (!q && recordList?.current) {\n      setList(recordList.current.copyList);\n      return;\n    }\n    const newList: AddressItemType[] = [];\n    keys.forEach((key: string) => {\n      let flag = true;\n      list.forEach((item: AddressItemType) => {\n        if (item[key].includes(q) && flag) {\n          newList.push(item);\n          flag = false;\n        }\n      });\n    });\n    setList(newList);\n  };\n\n  const handleCancelClicked = () => {\n    closeModal();\n  };\n\n  return (\n    <B3Dialog\n      fullWidth\n      isOpen={isOpen}\n      handleLeftClick={handleCancelClicked}\n      title={b3Lang('quoteDraft.chooseAddress.chooseFromSaved')}\n      showRightBtn={false}\n      maxWidth=\"lg\"\n    >\n      <Box>\n        <B3FilterSearch\n          searchBGColor=\"rgba(0, 0, 0, 0.06)\"\n          placeholder={b3Lang('quoteDraft.chooseAddress.searchAddress')}\n          handleChange={(e) => {\n            handleSearchProduct(e);\n          }}\n        />\n      </Box>\n      <Box\n        sx={{\n          mt: '20px',\n        }}\n      >\n        <Grid container spacing={2}>\n          {list.map((addressItem: AddressItemType) => (\n            <Grid item key={addressItem.id} xs={4}>\n              <AddressItemCard item={addressItem} onSetAddress={handleChangeAddress} />\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n    </B3Dialog>\n  );\n}\n\nexport default ChooseAddress;\n","import { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, Typography } from '@mui/material';\nimport cloneDeep from 'lodash-es/cloneDeep';\n\nimport { B3CustomForm } from '@/components';\nimport { useGetCountry, useMobile } from '@/hooks';\nimport { AddressItemType } from '@/types/address';\nimport { BillingAddress, ContactInfo, ShippingAddress } from '@/types/quotes';\n\nimport ChooseAddress from './ChooseAddress';\n\ntype AddressItemProps = {\n  node: AddressItemType;\n};\n\ninterface AccountFormFieldsProps extends Record<string, any> {\n  name: string;\n  label?: string;\n  required?: boolean;\n  fieldType?: string;\n  default?: string | Array<any> | number;\n  xs: number;\n  variant: string;\n  size: string;\n  options?: any[];\n}\n\ninterface AddressProps {\n  title: string;\n  pr?: string | number;\n  pl?: string | number;\n  addressList?: AddressItemProps[];\n  info: ContactInfo | ShippingAddress | BillingAddress;\n  role: string | number;\n  accountFormFields: AccountFormFieldsProps[];\n  shippingSameAsBilling: boolean;\n  type: string;\n  setBillingChange: (value: boolean) => void;\n}\n\nexport interface FormFieldsProps extends Record<string, any> {\n  name: string;\n  label?: string;\n  required?: boolean;\n  fieldType?: string;\n  default?: string | Array<any> | number;\n  xs: number;\n  variant: string;\n  size: string;\n  options?: any[];\n  replaceOptions?: {\n    label: string;\n    value: string;\n  };\n}\n\nexport interface Country {\n  countryCode: string;\n  countryName: string;\n  id?: string;\n  states: [];\n}\nexport interface State {\n  stateCode?: string;\n  stateName?: string;\n  id?: string;\n}\n\nfunction QuoteAddress(\n  {\n    title,\n    addressList = [],\n    pr = 0,\n    pl = 0,\n    info,\n    role,\n    accountFormFields = [],\n    shippingSameAsBilling = false,\n    type,\n    setBillingChange,\n  }: AddressProps,\n  ref: any,\n) {\n  const {\n    control,\n    getValues,\n    formState: { errors },\n    setValue,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const [isMobile] = useMobile();\n  const b3Lang = useB3Lang();\n\n  type InfoKeys = keyof typeof info;\n\n  const [isOpen, setOpen] = useState<boolean>(false);\n  const [quoteAddress, setQuoteAddress] = useState<AccountFormFieldsProps[]>(\n    cloneDeep(accountFormFields),\n  );\n\n  useGetCountry({\n    control,\n    setValue,\n    getValues,\n    setAddress: setQuoteAddress,\n    addresses: quoteAddress,\n  });\n\n  const getContactInfoValue = () => getValues();\n  const setShippingInfoValue = (address: any) => {\n    const addressKey = Object.keys(address);\n\n    addressKey.forEach((item: string) => {\n      if (item === 'company') return;\n      setValue(item, address[item]);\n    });\n  };\n\n  useImperativeHandle(ref, () => ({\n    getContactInfoValue,\n    setShippingInfoValue,\n  }));\n\n  const handleAddressChoose = () => {\n    setOpen(true);\n  };\n\n  const handleCloseAddressChoose = () => {\n    setOpen(false);\n  };\n\n  const handleChangeAddress = (address: AddressItemType) => {\n    const addressItem: any = {\n      label: address?.label || '',\n      firstName: address?.firstName || '',\n      lastName: address?.lastName || '',\n      company: address?.company || '',\n      country: address?.countryCode || '',\n      address: address?.addressLine1 || '',\n      apartment: address?.addressLine2 || '',\n      city: address?.city || '',\n      state: address?.state || '',\n      zipCode: address?.zipCode || '',\n      phoneNumber: address?.phoneNumber || '',\n    };\n\n    Object.keys(addressItem).forEach((item: string) => {\n      if (item === 'company') return;\n      setValue(item, addressItem[item]);\n    });\n    if (type === 'billing' && shippingSameAsBilling) {\n      setBillingChange(true);\n    }\n\n    handleCloseAddressChoose();\n  };\n\n  useEffect(() => {\n    if (JSON.stringify(info) !== '{}') {\n      Object.keys(info).forEach((item: string) => {\n        setValue(item, info[item as InfoKeys]);\n      });\n    }\n    // Disabling this rule as dispatcher dep setValue is the same between renders\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [info]);\n\n  return (\n    <Box width={isMobile ? '100%' : '50%'} mt={isMobile ? '2rem' : '0'} pr={pr} pl={pl}>\n      <Box\n        sx={{\n          display: 'flex',\n          mb: '20px',\n        }}\n      >\n        <Typography\n          sx={{\n            fontWeight: 400,\n            fontSize: '24px',\n            height: '32px',\n            mr: '16px',\n          }}\n        >\n          {title}\n        </Typography>\n        {Number(role) !== 100 && (\n          <Typography\n            onClick={handleAddressChoose}\n            sx={{\n              fontWeight: 500,\n              fontSize: '14px',\n              color: 'primary.main',\n              display: 'flex',\n              alignItems: 'flex-end',\n              cursor: 'pointer',\n              textTransform: 'uppercase',\n            }}\n          >\n            {b3Lang('quoteDraft.quoteAddress.chooseFromSaved')}\n          </Typography>\n        )}\n      </Box>\n\n      <B3CustomForm\n        formFields={quoteAddress}\n        errors={errors}\n        control={control}\n        getValues={getValues}\n        setValue={setValue}\n      />\n\n      <ChooseAddress\n        isOpen={isOpen}\n        handleChangeAddress={handleChangeAddress}\n        closeModal={handleCloseAddressChoose}\n        addressList={addressList}\n        type={type}\n      />\n    </Box>\n  );\n}\n\nexport default forwardRef(QuoteAddress);\n","import { useB3Lang } from '@b3/lang';\nimport { Box, Typography } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\n\ninterface QuoteSubmissionResponseProps {\n  isOpen: boolean;\n  onClose: () => void;\n  quoteSubmissionResponseInfo: {\n    value: string;\n    key: string;\n    message: string;\n    title: string;\n  };\n}\n\nfunction QuoteSubmissionResponse({\n  isOpen = false,\n  onClose,\n  quoteSubmissionResponseInfo,\n}: QuoteSubmissionResponseProps) {\n  const b3Lang = useB3Lang();\n  const messageArr = quoteSubmissionResponseInfo.message.split('\\n');\n\n  return (\n    <Box\n      sx={{\n        '#b2b-dialog-container': {\n          '& [aria-labelledby=\"alert-dialog-title\"]': {\n            width: '500px',\n            maxHeight: '500px',\n          },\n\n          '& h2': {\n            color: '#313440',\n          },\n          '& h6': {\n            color: '#313440',\n            fontSize: '16px',\n          },\n        },\n      }}\n    >\n      <B3Dialog\n        isOpen={isOpen}\n        title={quoteSubmissionResponseInfo.title}\n        showLeftBtn={false}\n        handRightClick={onClose}\n        isShowBordered={false}\n        rightSizeBtn={b3Lang('quoteDraft.submission.response.button.text')}\n        maxWidth={false}\n      >\n        {messageArr.map((item) => {\n          return (\n            <Typography\n              variant=\"subtitle2\"\n              sx={{\n                marginTop: '1rem',\n              }}\n            >\n              {item}\n            </Typography>\n          );\n        })}\n      </B3Dialog>\n    </Box>\n  );\n}\n\nexport default QuoteSubmissionResponse;\n","import { store } from '@/store';\nimport { getVariantInfoDisplayPrice } from '@/utils/b3Product/b3Product';\n\nconst getQuoteDraftShowPriceTBD = (products: CustomFieldItems[]) => {\n  const {\n    global: {\n      blockPendingQuoteNonPurchasableOOS: { isEnableProduct },\n    },\n  } = store.getState();\n\n  if (!isEnableProduct) return false;\n\n  const isHidePrice = products.some((product) => {\n    if (!getVariantInfoDisplayPrice(product.node.basePrice, product)) return true;\n\n    return false;\n  });\n\n  return isHidePrice;\n};\n\nexport default getQuoteDraftShowPriceTBD;\n","import { forwardRef, Ref, useCallback, useEffect, useImperativeHandle, useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, Card, CardContent, Grid, Typography } from '@mui/material';\n\nimport { useAppSelector } from '@/store';\nimport { currencyFormat } from '@/utils';\nimport { getBCPrice } from '@/utils/b3Product/b3Product';\n\nimport getQuoteDraftShowPriceTBD from '../shared/utils';\n\ninterface Summary {\n  subtotal: number;\n  shipping: number;\n  tax: number;\n  grandTotal: number;\n}\n\nconst defaultSummary: Summary = {\n  subtotal: 0,\n  shipping: 0,\n  tax: 0,\n  grandTotal: 0,\n};\n\nconst QuoteSummary = forwardRef((_, ref: Ref<unknown>) => {\n  const b3Lang = useB3Lang();\n\n  const [quoteSummary, setQuoteSummary] = useState<Summary>({\n    ...defaultSummary,\n  });\n\n  const [isHideQuoteDraftPrice, setHideQuoteDraftPrice] = useState<boolean>(false);\n  const showInclusiveTaxPrice = useAppSelector(({ global }) => global.showInclusiveTaxPrice);\n  const draftQuoteList = useAppSelector(({ quoteInfo }) => quoteInfo.draftQuoteList);\n\n  const priceCalc = (price: number) => parseFloat(String(price));\n\n  const getSummary = useCallback(() => {\n    const isHidePrice = getQuoteDraftShowPriceTBD(draftQuoteList);\n\n    setHideQuoteDraftPrice(isHidePrice);\n\n    const newQuoteSummary = draftQuoteList.reduce(\n      (summary: Summary, product: CustomFieldItems) => {\n        const { basePrice, taxPrice: productTax = 0, quantity } = product.node;\n\n        let { subtotal, grandTotal, tax } = summary;\n\n        const { shipping } = summary;\n\n        const price = getBCPrice(Number(basePrice), Number(productTax));\n\n        subtotal += priceCalc(price * quantity);\n        tax += priceCalc(Number(productTax) * Number(quantity));\n\n        const totalPrice = showInclusiveTaxPrice ? subtotal : subtotal + tax;\n\n        grandTotal = totalPrice + shipping;\n\n        return {\n          grandTotal,\n          shipping,\n          tax,\n          subtotal,\n        };\n      },\n      {\n        ...defaultSummary,\n      },\n    );\n\n    setQuoteSummary(newQuoteSummary);\n  }, [showInclusiveTaxPrice, draftQuoteList]);\n\n  useEffect(() => {\n    getSummary();\n  }, [getSummary]);\n\n  useImperativeHandle(ref, () => ({\n    refreshSummary: () => getSummary(),\n  }));\n\n  const priceFormat = (price: number) => currencyFormat(price);\n\n  const showPrice = (price: string | number): string | number => {\n    if (isHideQuoteDraftPrice) return b3Lang('quoteDraft.quoteSummary.tbd');\n\n    return price;\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <Box>\n          <Typography variant=\"h5\">{b3Lang('quoteDraft.quoteSummary.summary')}</Typography>\n          <Box\n            sx={{\n              marginTop: '20px',\n              color: '#212121',\n            }}\n          >\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              sx={{\n                margin: '4px 0',\n              }}\n            >\n              <Typography>{b3Lang('quoteDraft.quoteSummary.subTotal')}</Typography>\n              <Typography>{showPrice(priceFormat(quoteSummary.subtotal))}</Typography>\n            </Grid>\n\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              sx={{\n                margin: '4px 0',\n              }}\n            >\n              <Typography>{b3Lang('quoteDraft.quoteSummary.shipping')}</Typography>\n              <Typography>{b3Lang('quoteDraft.quoteSummary.tbd')}</Typography>\n            </Grid>\n\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              sx={{\n                margin: '4px 0',\n              }}\n            >\n              <Typography>{b3Lang('quoteDraft.quoteSummary.tax')}</Typography>\n              <Typography>{showPrice(priceFormat(quoteSummary.tax))}</Typography>\n            </Grid>\n\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              sx={{\n                margin: '24px 0 0',\n              }}\n            >\n              <Typography\n                sx={{\n                  fontWeight: 'bold',\n                }}\n              >\n                {b3Lang('quoteDraft.quoteSummary.grandTotal')}\n              </Typography>\n              <Typography\n                sx={{\n                  fontWeight: 'bold',\n                }}\n              >\n                {showPrice(priceFormat(quoteSummary.grandTotal))}\n              </Typography>\n            </Grid>\n          </Box>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n});\nexport default QuoteSummary;\n","import { FC, ReactElement, useCallback, useEffect, useState } from 'react';\n\nimport { useMobile } from '@/hooks';\n\nimport { B3Table, isNodeWrapper, PossibleNodeWrapper, TableColumnItem } from './B3Table';\n\nexport interface TablePagination {\n  offset: number;\n  first: number;\n}\n\ninterface PaginationTableProps<Row extends object> {\n  tableFixed?: boolean;\n  tableHeaderHide?: boolean;\n  columnItems: TableColumnItem<Row>[];\n  itemSpacing?: number;\n  itemXs?: number;\n  rowsPerPageOptions?: number[];\n  showPagination?: boolean;\n  renderItem?: (row: Row, index?: number, checkBox?: () => ReactElement) => ReactElement;\n  CollapseComponent?: FC<{ row: Row }>;\n  isCustomRender?: boolean;\n  noDataText?: string;\n  tableKey?: string;\n  showCheckbox?: boolean;\n  showSelectAllCheckbox?: boolean;\n  selectedSymbol?: string;\n  isSelectOtherPageCheckbox?: boolean;\n  showBorder?: boolean;\n  getSelectCheckbox?: (arr: Array<string | number>) => void;\n  hover?: boolean;\n  labelRowsPerPage?: string;\n  itemIsMobileSpacing?: number;\n  disableCheckbox?: boolean;\n  applyAllDisableCheckbox?: boolean;\n  onClickRow?: (item: Row, index?: number) => void;\n  showRowsPerPageOptions?: boolean;\n  sortDirection?: 'asc' | 'desc';\n  sortByFn?: (e: { key: string }) => void;\n  orderBy?: string;\n  pageType?: string;\n  items: PossibleNodeWrapper<Row>[];\n}\n\nfunction PaginationTable<Row extends object>({\n  columnItems,\n  isCustomRender = false,\n  tableKey,\n  renderItem,\n  noDataText = '',\n  tableFixed = false,\n  tableHeaderHide = false,\n  rowsPerPageOptions = [10, 20, 30],\n  itemSpacing = 2,\n  itemXs = 4,\n  showCheckbox = false,\n  showSelectAllCheckbox = false,\n  selectedSymbol = 'id',\n  isSelectOtherPageCheckbox = false,\n  showBorder = true,\n  getSelectCheckbox,\n  hover = false,\n  labelRowsPerPage = '',\n  itemIsMobileSpacing = 2,\n  disableCheckbox = false,\n  onClickRow,\n  showPagination = true,\n  showRowsPerPageOptions = true,\n  CollapseComponent,\n  applyAllDisableCheckbox = true,\n  sortDirection = 'asc',\n  sortByFn = () => {},\n  orderBy = '',\n  pageType = '',\n  items,\n}: PaginationTableProps<Row>) {\n  const initPagination = {\n    offset: 0,\n    first: rowsPerPageOptions[0],\n  };\n\n  const [pagination, setPagination] = useState<TablePagination>(initPagination);\n\n  const [isAllSelect, setAllSelect] = useState<boolean>(false);\n\n  const [selectCheckbox, setSelectCheckbox] = useState<Array<string | number>>([]);\n\n  const [isMobile] = useMobile();\n\n  useEffect(() => {\n    if (getSelectCheckbox) getSelectCheckbox(selectCheckbox);\n    // disabling as getSelectCheckbox will trigger rerenders if the user passes a function that is not memoized\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectCheckbox, items]);\n\n  const handlePaginationChange = async (pagination: TablePagination) => {\n    setPagination(pagination);\n  };\n\n  const tablePagination = {\n    ...pagination,\n    count: items.length,\n  };\n\n  const getCurrentAllItemsSelect = useCallback(() => {\n    if (!selectCheckbox.length) return false;\n    return items.every((item) => {\n      const option = isNodeWrapper(item) ? item.node : item;\n\n      // @ts-expect-error typed previously as an any\n      return selectCheckbox.includes(option[selectedSymbol]);\n    });\n  }, [items, selectCheckbox, selectedSymbol]);\n\n  useEffect(() => {\n    if (isSelectOtherPageCheckbox) {\n      const flag = getCurrentAllItemsSelect();\n      setAllSelect(flag);\n    }\n  }, [selectCheckbox, pagination, isSelectOtherPageCheckbox, getCurrentAllItemsSelect]);\n\n  const handleSelectAllItems = () => {\n    const singlePageCheckbox = () => {\n      if (selectCheckbox.length === items.length) {\n        setSelectCheckbox([]);\n      } else {\n        const selects: Array<string | number> = [];\n        items.forEach((item) => {\n          const option = isNodeWrapper(item) ? item.node : item;\n          if (option) {\n            if (pageType === 'shoppingListDetailsTable') {\n              selects.push(\n                // @ts-expect-error typed previously as an any\n                option.quantity > 0 || !option.disableCurrentCheckbox ? option[selectedSymbol] : '',\n              );\n            } else {\n              // @ts-expect-error typed previously as an any\n              selects.push(option[selectedSymbol]);\n            }\n          }\n        });\n        setSelectCheckbox(selects);\n      }\n    };\n\n    const otherPageCheckbox = () => {\n      const flag = getCurrentAllItemsSelect();\n\n      const newSelectCheckbox = [...selectCheckbox];\n      if (flag) {\n        items.forEach((item) => {\n          const option = isNodeWrapper(item) ? item.node : item;\n          // @ts-expect-error typed previously as an any\n          const index = newSelectCheckbox.findIndex((item) => item === option[selectedSymbol]);\n          newSelectCheckbox.splice(index, 1);\n        });\n      } else {\n        items.forEach((item) => {\n          const option = isNodeWrapper(item) ? item.node : item;\n          // @ts-expect-error typed previously as an any\n          if (!selectCheckbox.includes(option[selectedSymbol])) {\n            // @ts-expect-error typed previously as an any\n            newSelectCheckbox.push(option[selectedSymbol]);\n          }\n        });\n      }\n\n      setSelectCheckbox(newSelectCheckbox);\n    };\n\n    if (isSelectOtherPageCheckbox) {\n      otherPageCheckbox();\n    } else {\n      singlePageCheckbox();\n    }\n  };\n\n  const handleSelectOneItem = (id: string | number) => {\n    const selects = [...selectCheckbox];\n    const index = selects.indexOf(id);\n    if (index !== -1) {\n      selects.splice(index, 1);\n    } else {\n      selects.push(id);\n    }\n    setSelectCheckbox(selects);\n  };\n\n  return (\n    <B3Table\n      hover={hover}\n      columnItems={columnItems || []}\n      listItems={items.slice(pagination.offset, pagination.offset + pagination.first)}\n      pagination={tablePagination}\n      rowsPerPageOptions={rowsPerPageOptions}\n      onPaginationChange={handlePaginationChange}\n      isCustomRender={isCustomRender}\n      isInfiniteScroll={isMobile}\n      renderItem={renderItem}\n      tableFixed={tableFixed}\n      tableHeaderHide={tableHeaderHide}\n      itemSpacing={itemSpacing}\n      itemXs={itemXs}\n      noDataText={noDataText}\n      tableKey={tableKey}\n      itemIsMobileSpacing={itemIsMobileSpacing}\n      showCheckbox={showCheckbox}\n      showSelectAllCheckbox={showSelectAllCheckbox}\n      disableCheckbox={disableCheckbox}\n      selectedSymbol={selectedSymbol}\n      isSelectOtherPageCheckbox={isSelectOtherPageCheckbox}\n      isAllSelect={isAllSelect}\n      selectCheckbox={selectCheckbox}\n      handleSelectAllItems={handleSelectAllItems}\n      handleSelectOneItem={handleSelectOneItem}\n      showBorder={showBorder}\n      labelRowsPerPage={labelRowsPerPage}\n      onClickRow={onClickRow}\n      showPagination={showPagination}\n      showRowsPerPageOptions={showRowsPerPageOptions}\n      CollapseComponent={CollapseComponent}\n      applyAllDisableCheckbox={applyAllDisableCheckbox}\n      sortDirection={sortDirection}\n      sortByFn={sortByFn}\n      orderBy={orderBy}\n    />\n  );\n}\n\nexport default PaginationTable;\n","import { useB3Lang } from '@b3/lang';\nimport { Delete, Edit } from '@mui/icons-material';\nimport { Box, CardContent, styled, TextField, Typography } from '@mui/material';\n\nimport { PRODUCT_DEFAULT_IMAGE } from '@/constants';\nimport { currencyFormat } from '@/utils';\nimport { getBCPrice, getDisplayPrice } from '@/utils/b3Product/b3Product';\n\nimport { getProductOptionsFields } from '../../../utils/b3Product/shared/config';\n\ninterface QuoteTableCardProps {\n  item: any;\n  onEdit: (item: any, itemId: string) => void;\n  onDelete: (id: string) => void;\n  handleUpdateProductQty: (id: number | string, value: number | string) => void;\n  idEdit: boolean;\n  len: number;\n  itemIndex?: number;\n}\n\nconst StyledImage = styled('img')(() => ({\n  maxWidth: '60px',\n  height: 'auto',\n  marginRight: '0.5rem',\n}));\n\nfunction QuoteTableCard(props: QuoteTableCardProps) {\n  const {\n    item: quoteTableItem,\n    onEdit,\n    onDelete,\n    handleUpdateProductQty,\n    idEdit,\n    len,\n    itemIndex,\n  } = props;\n\n  const {\n    basePrice,\n    quantity,\n    id,\n    primaryImage,\n    productName,\n    variantSku,\n    productsSearch,\n    taxPrice = 0,\n  } = quoteTableItem;\n\n  const b3Lang = useB3Lang();\n\n  const price = getBCPrice(Number(basePrice), Number(taxPrice));\n\n  const total = price * Number(quantity);\n\n  const product: any = {\n    ...quoteTableItem.productsSearch,\n    selectOptions: quoteTableItem.optionList,\n  };\n\n  const productFields = getProductOptionsFields(product, {});\n\n  const optionList = JSON.parse(quoteTableItem.optionList);\n  const optionsValue: CustomFieldItems[] = productFields.filter((item) => item.valueText);\n\n  const { productUrl } = productsSearch;\n\n  const singlePrice = getDisplayPrice({\n    price: currencyFormat(price),\n    productInfo: quoteTableItem,\n    showText: b3Lang('quoteDraft.quoteSummary.tbd'),\n  });\n\n  const totalPrice = getDisplayPrice({\n    price: currencyFormat(total),\n    productInfo: quoteTableItem,\n    showText: b3Lang('quoteDraft.quoteSummary.tbd'),\n  });\n\n  return (\n    <Box\n      key={quoteTableItem.id}\n      width=\"100%\"\n      sx={{\n        borderTop: '1px solid #D9DCE9',\n        borderBottom: itemIndex === len - 1 ? '1px solid #D9DCE9' : '',\n      }}\n    >\n      <CardContent\n        sx={{\n          color: '#313440',\n          display: 'flex',\n          pl: 0,\n        }}\n      >\n        <Box>\n          <StyledImage\n            src={primaryImage || PRODUCT_DEFAULT_IMAGE}\n            alt=\"Product-img\"\n            loading=\"lazy\"\n          />\n        </Box>\n        <Box\n          sx={{\n            flex: 1,\n          }}\n        >\n          <Typography\n            variant=\"body1\"\n            color=\"#212121\"\n            onClick={() => {\n              const {\n                location: { origin },\n              } = window;\n\n              if (productUrl) {\n                window.location.href = `${origin}${productUrl}`;\n              }\n            }}\n            sx={{\n              cursor: 'pointer',\n            }}\n          >\n            {productName}\n          </Typography>\n          <Typography variant=\"body1\" color=\"#616161\">\n            {variantSku}\n          </Typography>\n          <Box\n            sx={{\n              margin: '1rem 0',\n            }}\n          >\n            {optionList.length > 0 && optionsValue.length > 0 && (\n              <Box>\n                {optionsValue.map((option: any) => (\n                  <Typography\n                    sx={{\n                      fontSize: '0.75rem',\n                      lineHeight: '1.5',\n                      color: '#455A64',\n                    }}\n                    key={option.valueLabel}\n                  >\n                    {`${option.valueLabel}: ${option.valueText}`}\n                  </Typography>\n                ))}\n              </Box>\n            )}\n          </Box>\n\n          <Typography sx={{ fontSize: '14px' }}>{`Price: ${singlePrice}`}</Typography>\n\n          <TextField\n            size=\"small\"\n            type=\"number\"\n            variant=\"filled\"\n            label=\"qty\"\n            disabled={!idEdit}\n            inputProps={{\n              inputMode: 'numeric',\n              pattern: '[0-9]*',\n            }}\n            value={quantity}\n            sx={{\n              margin: '1rem 0',\n              width: '60%',\n              maxWidth: '100px',\n              '& label': {\n                fontSize: '14px',\n              },\n              '& input': {\n                fontSize: '14px',\n              },\n            }}\n            onChange={(e) => {\n              handleUpdateProductQty(quoteTableItem, e.target.value);\n            }}\n          />\n          <Typography sx={{ fontSize: '14px' }}>{`Total: ${totalPrice}`}</Typography>\n          <Box\n            sx={{\n              marginTop: '1rem',\n              textAlign: 'end',\n            }}\n            id=\"shoppingList-actionList-mobile\"\n          >\n            {optionList.length > 0 && idEdit && (\n              <Edit\n                sx={{\n                  marginRight: '0.5rem',\n                  cursor: 'pointer',\n                  color: 'rgba(0, 0, 0, 0.54)',\n                }}\n                onClick={() => {\n                  onEdit(\n                    {\n                      ...productsSearch,\n                      quantity,\n                      selectOptions: quoteTableItem.optionList,\n                    },\n                    id,\n                  );\n                }}\n              />\n            )}\n            {idEdit && (\n              <Delete\n                sx={{\n                  cursor: 'pointer',\n                  color: 'rgba(0, 0, 0, 0.54)',\n                }}\n                onClick={() => {\n                  onDelete(id);\n                }}\n              />\n            )}\n          </Box>\n        </Box>\n      </CardContent>\n    </Box>\n  );\n}\n\nexport default QuoteTableCard;\n","import { useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Delete, Edit } from '@mui/icons-material';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport { Box, styled, TextField, Typography } from '@mui/material';\nimport ceil from 'lodash-es/ceil';\n\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport PaginationTable from '@/components/table/PaginationTable';\nimport { PRODUCT_DEFAULT_IMAGE } from '@/constants';\nimport {\n  deleteProductFromDraftQuoteList,\n  setDraftProduct,\n  useAppDispatch,\n  useAppSelector,\n} from '@/store';\nimport { Product } from '@/types';\nimport { QuoteItem } from '@/types/quotes';\nimport { currencyFormat, snackbar } from '@/utils';\nimport {\n  calculateProductListPrice,\n  getBCPrice,\n  getDisplayPrice,\n  getVariantInfoOOSAndPurchase,\n  setModifierQtyPrice,\n} from '@/utils/b3Product/b3Product';\nimport { getProductOptionsFields } from '@/utils/b3Product/shared/config';\n\nimport ChooseOptionsDialog from '../../ShoppingListDetails/components/ChooseOptionsDialog';\n\nimport QuoteTableCard from './QuoteTableCard';\n\ninterface ShoppingDetailTableProps {\n  total: number;\n  items: any[];\n  idEdit?: boolean;\n  isB2BUser: boolean;\n  updateSummary: () => void;\n}\n\nconst StyledQuoteTableContainer = styled('div')(() => ({\n  backgroundColor: '#FFFFFF',\n  padding: '0',\n  width: '100%',\n\n  '& tbody': {\n    '& tr': {\n      '& td': {\n        verticalAlign: 'top',\n      },\n      '& td: first-of-type': {\n        verticalAlign: 'inherit',\n      },\n    },\n    '& tr: hover': {\n      '& #shoppingList-actionList': {\n        opacity: 1,\n      },\n    },\n  },\n}));\n\nconst StyledImage = styled('img')(() => ({\n  maxWidth: '60px',\n  height: 'auto',\n  marginRight: '0.5rem',\n}));\n\nconst StyledTextField = styled(TextField)(() => ({\n  '& input': {\n    paddingTop: '12px',\n    paddingRight: '6px',\n  },\n}));\nconst QUOTE_PRODUCT_QTY_MAX = 1000000;\n\nfunction QuoteTable(props: ShoppingDetailTableProps) {\n  const { total, items, idEdit = true, isB2BUser, updateSummary } = props;\n  const b3Lang = useB3Lang();\n  const dispatch = useAppDispatch();\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n  const [chooseOptionsOpen, setSelectedOptionsOpen] = useState(false);\n  const [optionsProduct, setOptionsProduct] = useState<any>(null);\n  const [optionsProductId, setOptionsProductId] = useState<string>('');\n\n  const isEnableProduct = useAppSelector(\n    ({ global }) => global.blockPendingQuoteNonPurchasableOOS.isEnableProduct,\n  );\n\n  const handleUpdateProductQty = async (row: any, value: number | string) => {\n    const product = await setModifierQtyPrice(row, Number(value));\n\n    dispatch(\n      setDraftProduct({\n        id: product.id,\n        product: {\n          node: product,\n        },\n      }),\n    );\n    updateSummary();\n  };\n\n  const handleCheckProductQty = async (row: any, value: number | string) => {\n    let newQty = ceil(Number(value));\n    if (newQty === Number(value) && newQty >= 1 && newQty <= QUOTE_PRODUCT_QTY_MAX) return;\n\n    if (Number(value) < 1) {\n      newQty = 1;\n    }\n\n    if (Number(value) > QUOTE_PRODUCT_QTY_MAX) {\n      newQty = QUOTE_PRODUCT_QTY_MAX;\n    }\n\n    handleUpdateProductQty(row, newQty);\n  };\n\n  const handleDeleteClick = (id: string) => {\n    dispatch(deleteProductFromDraftQuoteList(id));\n    updateSummary();\n  };\n\n  const handleChooseOptionsDialogCancel = () => {\n    setSelectedOptionsOpen(false);\n  };\n\n  const handleOpenProductEdit = (product: Product, itemId: string) => {\n    setOptionsProduct(product);\n    setOptionsProductId(itemId);\n    setSelectedOptionsOpen(true);\n  };\n\n  const getNewQuoteProduct = (products: Product[]): QuoteItem[] =>\n    products.map((product) => {\n      const {\n        variantId,\n        newSelectOptionList,\n        id,\n        productId,\n        name: productName,\n        quantity,\n        variants = [],\n        basePrice,\n        taxPrice = 0,\n        calculatedNoTaxPrice = 0,\n        calculatedTaxPrice = 0,\n      } = product;\n\n      let [variantInfo] = variants;\n      if (variants.length > 1) {\n        variantInfo = variants.find((item) => item.variant_id === variantId) ?? variantInfo;\n      }\n\n      const { image_url: primaryImage = '', sku: variantSku } = variantInfo;\n\n      let selectOptions;\n      try {\n        selectOptions = JSON.stringify(newSelectOptionList);\n      } catch (error) {\n        selectOptions = '[]';\n      }\n\n      const taxExclusive = variantInfo!.bc_calculated_price?.tax_exclusive || 0;\n      const basePriceExclusiveTax = basePrice || taxExclusive;\n\n      return {\n        node: {\n          basePrice: basePriceExclusiveTax,\n          taxPrice,\n          optionList: selectOptions,\n          id: id.toString(),\n          primaryImage,\n          productId,\n          productName,\n          productsSearch: {\n            ...product,\n            selectOptions,\n          },\n          quantity: Number(quantity),\n          variantSku,\n          calculatedTaxPrice,\n          calculatedNoTaxPrice,\n          calculatedValue: {},\n        },\n      };\n    });\n\n  const handleChooseOptionsDialogConfirm = async (products: Product[]) => {\n    await calculateProductListPrice(products);\n    const newProducts = getNewQuoteProduct(products);\n\n    newProducts.forEach((product) => {\n      const { basePrice } = product.node;\n      const newProduct = product;\n      newProduct.node.id = optionsProductId;\n\n      newProduct.node.basePrice = basePrice;\n    });\n\n    setSelectedOptionsOpen(false);\n\n    dispatch(setDraftProduct({ id: optionsProductId, product: newProducts[0] }));\n    updateSummary();\n\n    snackbar.success(b3Lang('quoteDraft.quoteTable.productUpdated'));\n  };\n\n  const columnItems: TableColumnItem<QuoteItem['node']>[] = [\n    {\n      key: 'Product',\n      title: b3Lang('quoteDraft.quoteTable.product'),\n      render: (row: CustomFieldItems) => {\n        const product: any = {\n          ...row.productsSearch,\n          selectOptions: row.optionList,\n        };\n        const productFields = getProductOptionsFields(product, {});\n\n        const optionList = JSON.parse(row.optionList);\n        const optionsValue: CustomFieldItems[] = productFields.filter((item) => item.valueText);\n        const currentProduct = getVariantInfoOOSAndPurchase(row);\n        const inventoryTracking =\n          row?.productsSearch?.inventoryTracking || row?.inventoryTracking || 'none';\n\n        let inventoryLevel = row?.productsSearch?.inventoryLevel || row?.inventoryLevel || 0;\n        if (inventoryTracking === 'variant') {\n          const currentVariant = row?.productsSearch?.variants.find(\n            (variant: CustomFieldItems) => variant.sku === row.variantSku,\n          );\n\n          inventoryLevel = currentVariant?.inventory_level;\n        }\n\n        return (\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'flex-start',\n            }}\n          >\n            <StyledImage\n              src={row.primaryImage || PRODUCT_DEFAULT_IMAGE}\n              alt=\"Product-img\"\n              loading=\"lazy\"\n            />\n            <Box>\n              <Typography\n                variant=\"body1\"\n                color=\"#212121\"\n                onClick={() => {\n                  const {\n                    location: { origin },\n                  } = window;\n\n                  if (product?.productUrl) {\n                    window.location.href = `${origin}${product?.productUrl}`;\n                  }\n                }}\n                sx={{\n                  cursor: 'pointer',\n                }}\n              >\n                {row.productName}\n              </Typography>\n              <Typography variant=\"body1\" color=\"#616161\">\n                {row.variantSku}\n              </Typography>\n              {optionList.length > 0 && optionsValue.length > 0 && (\n                <Box>\n                  {optionsValue.map((option: any) => (\n                    <Typography\n                      sx={{\n                        fontSize: '0.75rem',\n                        lineHeight: '1.5',\n                        color: '#455A64',\n                      }}\n                      key={option.valueLabel}\n                    >\n                      {`${option.valueLabel}: ${option.valueText}`}\n                    </Typography>\n                  ))}\n                </Box>\n              )}\n\n              {!isEnableProduct && currentProduct?.name && (\n                <Box sx={{ color: 'red' }}>\n                  <Box\n                    sx={{\n                      mt: '1rem',\n                      display: 'flex',\n                      alignItems: 'center',\n                      '& svg': { mr: '0.5rem' },\n                    }}\n                  >\n                    <WarningIcon color=\"error\" fontSize=\"small\" />\n                    {currentProduct?.type === 'oos'\n                      ? b3Lang('quoteDraft.quoteTable.outOfStock.tip')\n                      : b3Lang('quoteDraft.quoteTable.unavailable.tip')}\n                  </Box>\n                  {currentProduct?.type === 'oos' && (\n                    <Box>\n                      {b3Lang('quoteDraft.quoteTable.oosNumber.tip', {\n                        qty: inventoryLevel,\n                      })}\n                    </Box>\n                  )}\n                </Box>\n              )}\n            </Box>\n          </Box>\n        );\n      },\n      width: '40%',\n    },\n    {\n      key: 'Price',\n      title: b3Lang('quoteDraft.quoteTable.price'),\n      render: (row: CustomFieldItems) => {\n        const { basePrice, taxPrice } = row;\n\n        const inTaxPrice = getBCPrice(Number(basePrice), Number(taxPrice));\n        return (\n          <Typography\n            sx={{\n              padding: '12px 0',\n            }}\n          >\n            {getDisplayPrice({\n              price: currencyFormat(inTaxPrice),\n              productInfo: row,\n              showText: b3Lang('quoteDraft.quoteSummary.tbd'),\n            })}\n          </Typography>\n        );\n      },\n      width: '15%',\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      key: 'Qty',\n      title: b3Lang('quoteDraft.quoteTable.qty'),\n      render: (row) => (\n        <StyledTextField\n          size=\"small\"\n          type=\"number\"\n          variant=\"filled\"\n          disabled={!idEdit}\n          value={row.quantity}\n          inputProps={{\n            inputMode: 'numeric',\n            pattern: '[0-9]*',\n          }}\n          onChange={(e) => {\n            handleUpdateProductQty(row, Number(e.target.value));\n          }}\n          onBlur={(e) => {\n            handleCheckProductQty(row, Number(e.target.value));\n          }}\n          sx={{\n            width: '75%',\n          }}\n        />\n      ),\n      width: '15%',\n      style: {\n        textAlign: 'right',\n      },\n    },\n    {\n      key: 'Total',\n      title: b3Lang('quoteDraft.quoteTable.total'),\n      render: (row) => {\n        const { basePrice, quantity, taxPrice } = row;\n\n        const inTaxPrice = getBCPrice(Number(basePrice), Number(taxPrice));\n        const total = inTaxPrice * Number(quantity);\n        const optionList = JSON.parse(row.optionList);\n\n        return (\n          <Box>\n            <Typography\n              sx={{\n                padding: '12px 0',\n              }}\n            >\n              {getDisplayPrice({\n                price: currencyFormat(total),\n                productInfo: row,\n                showText: b3Lang('quoteDraft.quoteSummary.tbd'),\n              })}\n            </Typography>\n            <Box\n              sx={{\n                marginTop: '1rem',\n                opacity: 0,\n                textAlign: 'end',\n              }}\n              id=\"shoppingList-actionList\"\n            >\n              {optionList.length > 0 && idEdit && (\n                <Edit\n                  sx={{\n                    marginRight: '0.5rem',\n                    cursor: 'pointer',\n                    color: 'rgba(0, 0, 0, 0.54)',\n                  }}\n                  onClick={() => {\n                    const { productsSearch, id, optionList, quantity } = row;\n\n                    handleOpenProductEdit(\n                      {\n                        ...productsSearch,\n                        quantity,\n                        selectOptions: optionList,\n                      },\n                      id,\n                    );\n                  }}\n                />\n              )}\n              {idEdit && (\n                <Delete\n                  sx={{\n                    cursor: 'pointer',\n                    color: 'rgba(0, 0, 0, 0.54)',\n                  }}\n                  onClick={() => {\n                    const { id } = row;\n                    handleDeleteClick(id);\n                  }}\n                />\n              )}\n            </Box>\n          </Box>\n        );\n      },\n      width: '15%',\n      style: {\n        textAlign: 'right',\n      },\n    },\n  ];\n\n  return (\n    <StyledQuoteTableContainer>\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          margin: '0.5rem 0 1rem',\n        }}\n      >\n        <Typography\n          sx={{\n            fontSize: '24px',\n          }}\n        >\n          {b3Lang('quoteDraft.quoteTable.totalProducts', { total: total || 0 })}\n        </Typography>\n      </Box>\n\n      <PaginationTable\n        columnItems={columnItems}\n        rowsPerPageOptions={[12, 24, 36]}\n        items={items}\n        isCustomRender={false}\n        hover\n        labelRowsPerPage={b3Lang('quoteDraft.quoteTable.perPage')}\n        showBorder={false}\n        itemIsMobileSpacing={0}\n        noDataText={b3Lang('quoteDraft.quoteTable.noProducts')}\n        renderItem={(row, index?) => (\n          <QuoteTableCard\n            len={total || 0}\n            item={row}\n            itemIndex={index}\n            onEdit={handleOpenProductEdit}\n            onDelete={handleDeleteClick}\n            handleUpdateProductQty={handleUpdateProductQty}\n            idEdit={idEdit}\n          />\n        )}\n      />\n\n      <ChooseOptionsDialog\n        isOpen={chooseOptionsOpen}\n        isLoading={isRequestLoading}\n        setIsLoading={setIsRequestLoading}\n        product={optionsProduct}\n        onCancel={handleChooseOptionsDialogCancel}\n        onConfirm={\n          handleChooseOptionsDialogConfirm as unknown as (products: CustomFieldItems[]) => void\n        }\n        isEdit\n        isB2BUser={isB2BUser}\n      />\n    </StyledQuoteTableContainer>\n  );\n}\n\nexport default QuoteTable;\n","import { LangFormatFunction } from '@b3/lang';\n\nconst getAccountFormFields = (isMobile: boolean, b3Lang: LangFormatFunction) => {\n  const accountFormFields = [\n    {\n      name: 'label',\n      label: b3Lang('quoteDraft.config.addressLabel'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'firstName',\n      label: b3Lang('quoteDraft.config.firstName'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'lastName',\n      label: b3Lang('quoteDraft.config.lastName'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'companyName',\n      label: b3Lang('quoteDraft.config.company'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'country',\n      label: b3Lang('quoteDraft.config.country'),\n      required: false,\n      default: '',\n      fieldType: 'dropdown',\n      options: [],\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n      replaceOptions: {\n        label: 'countryName',\n        value: 'countryCode',\n      },\n    },\n    {\n      name: 'address',\n      label: b3Lang('quoteDraft.config.addressLine1'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'apartment',\n      label: b3Lang('quoteDraft.config.addressLine2'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'city',\n      label: b3Lang('quoteDraft.config.city'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      options: [],\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'state',\n      label: b3Lang('quoteDraft.config.state'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      options: [],\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n      replaceOptions: {\n        label: 'stateName',\n        value: 'stateName',\n      },\n    },\n    {\n      name: 'zipCode',\n      label: b3Lang('quoteDraft.config.zipCode'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      options: [],\n      xs: isMobile ? 12 : 6,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'phoneNumber',\n      label: b3Lang('quoteDraft.config.phoneNumber'),\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n\n  return accountFormFields;\n};\n\nexport default getAccountFormFields;\n"],"names":["setOpenPage","state","countriesList","openAPPParams","useContext","GlobalContext","isB2BUser","useAppSelector","isB2BUserSelector","companyB2BId","company","companyInfo","id","companyName","customer","role","dispatch","useAppDispatch","enteredInclusiveTax","storeConfigs","currencies","draftQuoteList","quoteInfo","salesRepCompanyId","b2bFeatures","masqueradeCompany","salesRepCompanyName","quoteInfoOrigin","draftQuoteInfo","currency","activeCurrencyInfoSelector","quoteSubmissionResponseInfo","global","quoteSubmissionResponse","selectCompanyHierarchyId","companyHierarchyInfo","isEnableProduct","blockPendingQuoteNonPurchasableOOS","portalStyle","backgroundColor","CustomStyleContext","quotesActionsPermission","useMemo","verifyCreatePermission","b2bPermissionsMap","quotesCreateActionsPermission","Number","navigate","useNavigate","b3Lang","useB3Lang","isMobile","useMobile","loading","setLoading","useState","isEdit","setEdit","addressList","setAddressList","shippingSameAsBilling","setShippingSameAsBilling","billingChange","setBillingChange","quoteSubmissionResponseOpen","setQuoteSubmissionResponseOpen","quoteId","setQuoteId","currentCreatedAt","setCurrentCreatedAt","extraFields","setExtraFields","quoteSummaryRef","useRef","isAddressCompanyHierarchy","useValidatePermissionWithComparisonType","level","permissionLevels","COMPANY_SUBSIDIARIES","code","getAddressesPermission","containOrEqual","useSetCountry","contactInfoRef","billingRef","shippingRef","useEffect","async","cloneDeep","companyId","addressB2BList","fetchAddresses","addresses","edges","getB2BCustomerAddresses","shippingDefaultAddress","find","item","node","isDefaultShipping","billingDefaultAddress","isDefaultBilling","validateObject","addressItem","label","firstName","lastName","country","countryCode","address","addressLine1","apartment","addressLine2","city","zipCode","phoneNumber","addressId","shippingAddress","billingAddress","customerAddresses","addressBCList","getBCCustomerAddresses","list","map","convertBCToB2BAddress","extraFieldsInfo","getB2BQuoteExtraFields","length","preExtraFields","defaultValues","field","defaultValue","fieldName","name","value","default","contactInfo","setDraftQuoteInfo","newInfo","email","emailAddress","setCustomInfo","quoteUserId","b2bId","setQuoteUserId","init","quoteAndExtraFieldsInfo","info","quoteTitle","referenceNumber","recipients","getAddress","addressSaveInfo","current","getContactInfoValue","handleCollectingData","currentRecipients","saveInfo","ccEmail","trim","uniq","concat","accountFormFields","getAccountFormFields","updateSummary","refreshSummary","handleAfterSubmit","inpQuoteId","inpCurrentCreatedAt","currentQuoteId","createdAt","resetDraftQuoteInfo","resetDraftQuoteList","B3LStorage","delete","to","handleSubmit","isComplete","Object","keys","every","key","snackbar","error","some","getVariantInfoOOSAndPurchase","newNote","note","replace","perfectAddress","newAddress","countryItem","countryName","editShippingAddress","editBillingAddress","allPrice","allTaxPrice","calculationTime","includes","Date","getTime","productList","product","productsSearch","selectOptions","optionList","optionsList","getProductOptionsFields","optionId","optionValue","fieldType","optionLabel","valueText","optionName","valueLabel","type","fieldOriginType","filter","variants","variantsItem","Array","isArray","sku","variantSku","basePrice","quantity","taxPrice","productId","toFixed","decimal_places","discount","offeredPrice","variantId","variant_id","imageUrl","primaryImage","productName","options","fileList","files","fileInfo","file","fileUrl","fileName","fileType","fileSize","data","message","legalTerms","totalAmount","grandTotal","subtotal","storeHash","channelId","userEmail","taxTotal","currencyExchangeRate","currency_exchange_rate","token","location","token_location","decimalToken","decimal_token","decimalPlaces","thousandsToken","thousands_token","currencyCode","currency_code","fn","createBCQuote","createQuote","dispatchEvent","Error","quoteCreate","quote","cartId","get","deleteCartObject","deleteCartData","deleteCart","b2bLogger","setShippingInfoValue","jsxs","B3Spin","isSpinning","children","Box","sx","mb","width","jsx","marginBottom","displayPrint","color","cursor","display","alignItems","onClick","quoteBtn","isOpen","openUrl","ArrowBackIosNew","fontSize","marginRight","style","margin","backText","text","justifyContent","flexDirection","Typography","component","mr","getContrastColor","QuoteStatus","position","left","bottom","background","p","zIndex","CustomButton","variant","size","height","padding","alignSelf","QuoteInfo","status","handleEditInfoClick","Container","ContactInfo","quoteExtraFields","extraFieldsDefault","handleSaveCCEmail","setDraftQuoteRecipients","ref","mt","QuoteAddress","title","pr","pl","FormControlLabel","control","Checkbox","checked","onChange","e","target","xs","flexBasis","flexGrow","boxShadow","borderRadius","QuoteTable","total","items","Stack","spacing","QuoteSummary","AddToQuote","updateList","addToQuote","products","addQuoteDraftProducts","QuoteNote","quoteStatus","QuoteAttachment","QuoteSubmissionResponse","onClose","handleCloseQuoteSubmissionResponse","countries","getB2BCountries","payload","values","x","props","customerGroupId","companyStatus","isOpenBulkLoadCSV","setIsOpenBulkLoadCSV","isLoading","setIsLoading","blockPendingAccountViewPrice","useBlockPendingAccountViewPrice","getNewQuoteProduct","newSelectOptionList","calculatedValue","variantInfo","image_url","JSON","stringify","taxExclusive","bc_calculated_price","tax_exclusive","taxInclusive","tax_inclusive","uuid","Card","CardContent","B3CollapseContainer","SearchProduct","addToList","newProducts","noSkuProducts","isClose","success","searchDialogTitle","addButtonText","Divider","QuickAdd","quickAddToList","productIds","variantProducts","searchB2BProducts","variantProduct","calculateProductListPrice","buttonText","UploadFileIcon","B3Upload","setIsOpen","handleAddToList","validProduct","productsData","forEach","push","getProducts","searchBcProducts","newProductInfo","conversionProductsList","isSuccess","option","qty","option_id","currentProductSearch","variantItem","toUpperCase","quoteListitem","PRODUCT_DEFAULT_IMAGE","as_entered","validProductQty","withModifiers","emailValidate","validatorRules","forwardRef","getValues","setError","formState","errors","setValue","useForm","mode","isGuest","CustomerRole","GUEST","isValidUserType","isValidUserTypeSelector","isValid","emailValue","validateEmailValue","fieldValue","res","validateQuoteExtraFields","messageArr","errMsg","split","validateQuoteExtraFieldsInfo","useImperativeHandle","getContactInfo","required","disabled","validate","getQuoteInfo","handleSaveClick","currentExtraFields","isEmail","existValue","isEnterTrigger","handleSave","ccEmails","formData","infos","fontWeight","B3CustomForm","formFields","TagBox","styled","Flex","theme","marginTop","AddressItemCard","addressInfo","onSetAddress","useTheme","wordBreak","B3Tag","textColor","ChooseAddress","closeModal","handleChangeAddress","recordList","copyList","setList","allList","newList","isShipping","isBilling","B3Dialog","fullWidth","handleLeftClick","handleCancelClicked","showRightBtn","maxWidth","B3FilterSearch","searchBGColor","placeholder","handleChange","q","flag","handleSearchProduct","Grid","container","setOpen","quoteAddress","setQuoteAddress","useGetCountry","setAddress","useWatch","countriesFieldIndex","findIndex","addressField","addressFieldIndex","stateList","states","stateFieldIndex","stateVal","stateName","handleCloseAddressChoose","handleAddressChoose","textTransform","maxHeight","showLeftBtn","handRightClick","isShowBordered","rightSizeBtn","defaultSummary","shipping","tax","_","quoteSummary","setQuoteSummary","isHideQuoteDraftPrice","setHideQuoteDraftPrice","showInclusiveTaxPrice","priceCalc","price","parseFloat","String","getSummary","useCallback","isHidePrice","store","getState","getVariantInfoDisplayPrice","getQuoteDraftShowPriceTBD","newQuoteSummary","reduce","summary","productTax","getBCPrice","priceFormat","currencyFormat","showPrice","PaginationTable","columnItems","isCustomRender","tableKey","renderItem","noDataText","tableFixed","tableHeaderHide","rowsPerPageOptions","itemSpacing","itemXs","showCheckbox","showSelectAllCheckbox","selectedSymbol","isSelectOtherPageCheckbox","showBorder","getSelectCheckbox","hover","labelRowsPerPage","itemIsMobileSpacing","disableCheckbox","onClickRow","showPagination","showRowsPerPageOptions","CollapseComponent","applyAllDisableCheckbox","sortDirection","sortByFn","orderBy","pageType","initPagination","offset","first","pagination","setPagination","isAllSelect","setAllSelect","selectCheckbox","setSelectCheckbox","tablePagination","count","getCurrentAllItemsSelect","isNodeWrapper","B3Table","listItems","slice","onPaginationChange","isInfiniteScroll","handleSelectAllItems","otherPageCheckbox","newSelectCheckbox","index","splice","singlePageCheckbox","selects","disableCurrentCheckbox","handleSelectOneItem","indexOf","StyledImage","QuoteTableCard","quoteTableItem","onEdit","onDelete","handleUpdateProductQty","idEdit","len","itemIndex","productFields","parse","optionsValue","productUrl","singlePrice","getDisplayPrice","productInfo","showText","totalPrice","borderTop","borderBottom","src","alt","flex","origin","window","href","lineHeight","TextField","inputProps","inputMode","pattern","textAlign","Edit","Delete","StyledQuoteTableContainer","verticalAlign","opacity","StyledTextField","paddingTop","paddingRight","QUOTE_PRODUCT_QTY_MAX","isRequestLoading","setIsRequestLoading","chooseOptionsOpen","setSelectedOptionsOpen","optionsProduct","setOptionsProduct","optionsProductId","setOptionsProductId","row","setModifierQtyPrice","setDraftProduct","handleDeleteClick","deleteProductFromDraftQuoteList","handleOpenProductEdit","itemId","render","currentProduct","inventoryTracking","inventoryLevel","currentVariant","inventory_level","WarningIcon","inTaxPrice","onBlur","newQty","ceil","handleCheckProductQty","ChooseOptionsDialog","onCancel","handleChooseOptionsDialogCancel","onConfirm","calculatedNoTaxPrice","calculatedTaxPrice","toString","newProduct","replaceOptions"],"mappings":"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"}