{"version":3,"file":"index-legacy-Bi1ckb1Y.js","sources":["../../src/pages/CompanyHierarchy/components/CompanyTableRowCard.tsx","../../src/pages/CompanyHierarchy/components/TableTree.tsx","../../src/pages/CompanyHierarchy/index.tsx"],"sourcesContent":["import { useContext, useMemo, useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Business as BusinessIcon, MoreHoriz as MoreHorizIcon } from '@mui/icons-material';\nimport { Box, Card, Chip, IconButton, Menu, MenuItem } from '@mui/material';\n\nimport { CustomStyleContext } from '@/shared/customStyleButton';\n\nimport { RecursiveNode, TreeNodeProps } from './types';\n\ninterface CompanyTableRowCardProps<T extends TreeNodeProps> {\n  company: RecursiveNode<T>;\n  currentCompanyId?: string | number;\n  selectCompanyId?: string | number;\n  onSwitchCompany?: (node: T) => void;\n  getDisplayName?: (node: T) => string;\n  getNodeId?: (node: T) => string | number;\n}\n\nfunction CompanyTableRowCard<T extends TreeNodeProps>({\n  company,\n  currentCompanyId = '',\n  selectCompanyId = '',\n  onSwitchCompany,\n  getDisplayName = (node) => node.companyName,\n  getNodeId = (node) => node.companyId,\n}: CompanyTableRowCardProps<T>) {\n  const nodeId = getNodeId(company);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const b3Lang = useB3Lang();\n  const {\n    state: {\n      switchAccountButton: { color = '#ED6C02' },\n    },\n  } = useContext(CustomStyleContext);\n  const isCurrentCompanyId = Number(nodeId) === Number(currentCompanyId);\n  const isSelectCompanyId = Number(nodeId) === Number(selectCompanyId);\n\n  const open = Boolean(anchorEl);\n  const isDisabledAction = useMemo(() => {\n    if (selectCompanyId) {\n      return Number(selectCompanyId) !== Number(company.companyId);\n    }\n\n    return Number(currentCompanyId) !== Number(company.companyId);\n  }, [currentCompanyId, selectCompanyId, company]);\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSwitchClick = () => {\n    handleClose();\n    onSwitchCompany?.(company);\n  };\n\n  const openIcon = open\n    ? {\n        borderRadius: '10%',\n        backgroundColor: 'rgba(0, 0, 0, 0.14)',\n      }\n    : {};\n\n  return (\n    <Card\n      sx={{\n        padding: '16px',\n        marginBottom: '16px',\n      }}\n    >\n      <Box>\n        <Box sx={{ display: 'flex', alignItems: 'flex-start', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'flex-start' }}>\n            <BusinessIcon sx={{ color: 'rgba(0, 0, 0, 0.54)', mr: 1 }} />\n            {getDisplayName(company)}\n          </Box>\n          {company?.channelFlag && isDisabledAction && (\n            <IconButton\n              size=\"small\"\n              onClick={handleClick}\n              aria-controls={open ? 'company-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n              sx={{\n                pt: 0,\n\n                '& svg': {\n                  ...openIcon,\n                },\n              }}\n            >\n              <MoreHorizIcon />\n            </IconButton>\n          )}\n        </Box>\n        {isSelectCompanyId && (\n          <Chip\n            label={b3Lang('companyHierarchy.chip.selectCompany')}\n            size=\"small\"\n            sx={{\n              mt: 2,\n              backgroundColor: color,\n              color: 'white',\n              height: 24,\n              '& .MuiChip-label': {\n                px: 1,\n              },\n            }}\n          />\n        )}\n        {isCurrentCompanyId && (\n          <Chip\n            label={b3Lang('companyHierarchy.chip.currentCompany')}\n            size=\"small\"\n            sx={{\n              mt: 2,\n              backgroundColor: 'primary.main',\n              color: 'white',\n              height: 24,\n              '& .MuiChip-label': {\n                px: 1,\n              },\n            }}\n          />\n        )}\n      </Box>\n      <Menu\n        id=\"company-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'company-button',\n        }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <MenuItem\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={handleSwitchClick}\n        >\n          {b3Lang('companyHierarchy.dialog.title')}\n        </MenuItem>\n      </Menu>\n    </Card>\n  );\n}\n\nexport default CompanyTableRowCard;\n","import { useContext, useMemo, useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport {\n  Business as BusinessIcon,\n  KeyboardArrowDown as KeyboardArrowDownIcon,\n  MoreHoriz as MoreHorizIcon,\n} from '@mui/icons-material';\nimport {\n  Box,\n  Chip,\n  IconButton,\n  Menu,\n  MenuItem,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@mui/material';\n\nimport useMobile from '@/hooks/useMobile';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\n\nimport CompanyTableRowCard from './CompanyTableRowCard';\nimport { RecursiveNode, TreeNodeProps } from './types';\n\ninterface CompanyTableProps<T extends TreeNodeProps> {\n  data: RecursiveNode<T>[];\n  currentCompanyId?: string | number;\n  selectCompanyId?: string | number;\n  onSwitchCompany?: (node: T) => void;\n  getDisplayName?: (node: T) => string;\n  getNodeId?: (node: T) => string | number;\n}\n\ninterface CompanyTableRowProps<T extends TreeNodeProps> {\n  node: RecursiveNode<T>;\n  level?: number;\n  currentCompanyId?: string | number;\n  selectCompanyId?: string | number;\n  onSwitchCompany?: (node: T) => void;\n  getDisplayName?: (node: T) => string;\n  getNodeId?: (node: T) => string | number;\n}\n\nfunction CompanyTableRow<T extends TreeNodeProps>({\n  node,\n  level = 0,\n  currentCompanyId = '',\n  selectCompanyId = '',\n  onSwitchCompany,\n  getDisplayName = (node) => node.companyName,\n  getNodeId = (node) => node.companyId,\n}: CompanyTableRowProps<T>) {\n  const [expanded, setExpanded] = useState(true);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const b3Lang = useB3Lang();\n\n  const {\n    state: {\n      switchAccountButton: { color = '#ED6C02' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const hasChildren = node.children && node.children.length > 0;\n  const nodeId = getNodeId(node);\n  const isCurrentCompanyId = Number(nodeId) === Number(currentCompanyId);\n\n  const isSelectCompanyId = Number(nodeId) === Number(selectCompanyId);\n  const open = Boolean(anchorEl);\n\n  const isDisabledAction = useMemo(() => {\n    if (selectCompanyId) {\n      return Number(selectCompanyId) !== Number(node.companyId);\n    }\n\n    return Number(currentCompanyId) !== Number(node.companyId);\n  }, [currentCompanyId, selectCompanyId, node]);\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSwitchClick = () => {\n    handleClose();\n    onSwitchCompany?.(node);\n  };\n\n  return (\n    <>\n      <TableRow\n        sx={{\n          '&:last-child td, &:last-child th': { border: 0 },\n          '& > td': { bgcolor: 'background.paper' },\n          height: '3.25rem',\n        }}\n      >\n        <TableCell sx={{ width: '100%', py: 1 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Box sx={{ display: 'flex', ml: level * 4, alignItems: 'center' }}>\n              {hasChildren ? (\n                <IconButton size=\"small\" onClick={() => setExpanded(!expanded)} sx={{ mr: 1 }}>\n                  <KeyboardArrowDownIcon\n                    sx={{\n                      transform: expanded ? 'rotate(0deg)' : 'rotate(-90deg)',\n                      transition: 'transform 0.2s',\n                      color: 'rgba(0, 0, 0, 0.54)',\n                    }}\n                  />\n                </IconButton>\n              ) : (\n                <Box sx={{ width: 40 }} />\n              )}\n              <Box sx={{ mr: 1, display: 'flex', alignItems: 'center' }}>\n                <BusinessIcon sx={{ color: 'rgba(0, 0, 0, 0.54)' }} />\n              </Box>\n              <Box component=\"span\" sx={{ mr: 1 }}>\n                {getDisplayName(node)}\n              </Box>\n              {isSelectCompanyId && (\n                <Chip\n                  label={b3Lang('companyHierarchy.chip.selectCompany')}\n                  size=\"small\"\n                  sx={{\n                    backgroundColor: color,\n                    color: 'white',\n                    height: 24,\n                    '& .MuiChip-label': {\n                      px: 1,\n                    },\n                  }}\n                />\n              )}\n              {isCurrentCompanyId && (\n                <Chip\n                  label={b3Lang('companyHierarchy.chip.currentCompany')}\n                  size=\"small\"\n                  sx={{\n                    backgroundColor: 'primary.main',\n                    color: 'white',\n                    height: 24,\n                    '& .MuiChip-label': {\n                      px: 1,\n                    },\n                  }}\n                />\n              )}\n            </Box>\n          </Box>\n        </TableCell>\n        <TableCell align=\"right\" sx={{ width: 48, py: 1 }}>\n          {node?.channelFlag && isDisabledAction && (\n            <IconButton\n              size=\"small\"\n              onClick={handleClick}\n              aria-controls={open ? 'company-menu' : undefined}\n              aria-haspopup=\"true\"\n              aria-expanded={open ? 'true' : undefined}\n            >\n              <MoreHorizIcon />\n            </IconButton>\n          )}\n          <Menu\n            id=\"company-menu\"\n            anchorEl={anchorEl}\n            open={open}\n            onClose={handleClose}\n            MenuListProps={{\n              'aria-labelledby': 'company-button',\n            }}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'right',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}\n          >\n            <MenuItem\n              sx={{\n                color: 'primary.main',\n              }}\n              onClick={handleSwitchClick}\n            >\n              {b3Lang('companyHierarchy.dialog.title')}\n            </MenuItem>\n          </Menu>\n        </TableCell>\n      </TableRow>\n      {expanded &&\n        hasChildren &&\n        (node?.children || []).map((child) => (\n          <CompanyTableRow\n            key={getNodeId(child)}\n            node={child}\n            level={level + 1}\n            currentCompanyId={currentCompanyId}\n            selectCompanyId={selectCompanyId}\n            onSwitchCompany={onSwitchCompany}\n            getDisplayName={getDisplayName}\n            getNodeId={getNodeId}\n          />\n        ))}\n    </>\n  );\n}\n\nfunction CompanyHierarchyTableTree<T extends TreeNodeProps>({\n  data,\n  currentCompanyId,\n  selectCompanyId,\n  onSwitchCompany,\n  getDisplayName = (node) => node.companyName,\n  getNodeId = (node) => node.companyId,\n}: CompanyTableProps<T>) {\n  const [isMobile] = useMobile();\n  const b3Lang = useB3Lang();\n\n  const handleExpandCompanyData = (\n    companies: RecursiveNode<T>[] | [],\n    companyData: RecursiveNode<T>[],\n  ) => {\n    if (companies.length === 0) return companyData;\n    companies.forEach((company) => {\n      companyData.push({\n        ...company,\n        children: [],\n      });\n\n      const isHasChildren = company.children && company.children.length > 0;\n\n      if (isHasChildren) {\n        handleExpandCompanyData(company?.children || [], companyData);\n      }\n    });\n\n    return companyData;\n  };\n  const mobileCompanyData = handleExpandCompanyData(data, []);\n\n  return (\n    <>\n      {isMobile ? (\n        <>\n          {mobileCompanyData.map((company) => (\n            <CompanyTableRowCard\n              company={company}\n              currentCompanyId={currentCompanyId}\n              selectCompanyId={selectCompanyId}\n              onSwitchCompany={onSwitchCompany}\n              getDisplayName={getDisplayName}\n              getNodeId={getNodeId}\n            />\n          ))}\n        </>\n      ) : (\n        <Paper sx={{ width: '100%', minHeight: '100px', mx: 'auto', mt: 2 }}>\n          <TableContainer>\n            <Table size=\"small\" aria-label=\"company structure table\">\n              <TableHead>\n                <TableRow sx={{ height: '3.25rem' }}>\n                  <TableCell sx={{ fontWeight: 500, pl: 8 }}>\n                    {b3Lang('companyHierarchy.table.name')}\n                  </TableCell>\n                  <TableCell sx={{ width: 48 }} />\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data.map((company) => (\n                  <CompanyTableRow\n                    key={getNodeId(company)}\n                    node={company}\n                    currentCompanyId={currentCompanyId}\n                    selectCompanyId={selectCompanyId}\n                    onSwitchCompany={onSwitchCompany}\n                    getDisplayName={getDisplayName}\n                    getNodeId={getNodeId}\n                  />\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n      )}\n    </>\n  );\n}\n\nexport default CompanyHierarchyTableTree;\n","import { useEffect, useRef, useState } from 'react';\nimport { Box } from '@mui/material';\n\nimport B3Spin from '@/components/spin/B3Spin';\nimport { getCompanySubsidiaries } from '@/shared/service/b2b';\nimport { useAppSelector } from '@/store';\nimport { CompanyHierarchyListProps, CompanyHierarchyProps } from '@/types';\nimport { buildHierarchy } from '@/utils';\n\nimport HierarchyDialog from './components/HierarchyDialog';\nimport CompanyHierarchyTableTree from './components/TableTree';\n\nfunction CompanyHierarchy() {\n  const [data, setData] = useState<CompanyHierarchyProps[]>([]);\n\n  const [open, setOpen] = useState<boolean>(false);\n\n  const [currentRow, setCurrentRow] = useState<CompanyHierarchyProps | null>(null);\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const originDataRef = useRef<CompanyHierarchyListProps[]>([]);\n\n  const { id: currentCompanyId } = useAppSelector(({ company }) => company.companyInfo);\n\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  const init = async () => {\n    setLoading(true);\n\n    const { companySubsidiaries } = await getCompanySubsidiaries();\n\n    const list = buildHierarchy({\n      data: companySubsidiaries || [],\n    });\n\n    originDataRef.current = companySubsidiaries;\n\n    setData(list);\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (currentCompanyId) {\n      init();\n    }\n\n    // ignore init\n    // due they are funtions that do not depend on any reactive value\n  }, [currentCompanyId]);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleRowClick = (row: CompanyHierarchyProps) => {\n    setCurrentRow(row);\n    setOpen(true);\n  };\n\n  return (\n    <B3Spin isSpinning={loading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          width: '100%',\n        }}\n      >\n        <CompanyHierarchyTableTree<CompanyHierarchyProps>\n          data={data}\n          onSwitchCompany={handleRowClick}\n          currentCompanyId={currentCompanyId}\n          selectCompanyId={selectCompanyHierarchyId}\n        />\n\n        <HierarchyDialog\n          open={open}\n          handleClose={handleClose}\n          currentRow={currentRow}\n          companyHierarchyAllList={originDataRef?.current || []}\n        />\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default CompanyHierarchy;\n"],"names":["CompanyTableRowCard","company","currentCompanyId","selectCompanyId","onSwitchCompany","getDisplayName","node","companyName","getNodeId","companyId","nodeId","anchorEl","setAnchorEl","useState","b3Lang","useB3Lang","state","switchAccountButton","color","useContext","CustomStyleContext","isCurrentCompanyId","Number","isSelectCompanyId","open","Boolean","isDisabledAction","useMemo","handleClose","openIcon","borderRadius","backgroundColor","jsxs","Card","sx","padding","marginBottom","children","Box","display","alignItems","justifyContent","jsx","BusinessIcon","mr","channelFlag","IconButton","size","onClick","event","currentTarget","pt","MoreHorizIcon","Chip","label","mt","height","px","Menu","id","onClose","MenuListProps","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","handleSwitchClick","CompanyTableRow","level","expanded","setExpanded","hasChildren","length","Fragment","TableRow","border","bgcolor","TableCell","width","py","ml","KeyboardArrowDownIcon","transform","transition","component","align","map","child","CompanyHierarchyTableTree","data","isMobile","useMobile","handleExpandCompanyData","companies","companyData","forEach","push","mobileCompanyData","Paper","minHeight","mx","TableContainer","Table","TableHead","fontWeight","pl","TableBody","setData","setOpen","currentRow","setCurrentRow","loading","setLoading","originDataRef","useRef","useAppSelector","companyInfo","selectCompanyHierarchyId","companyHierarchyInfo","useEffect","async","companySubsidiaries","getCompanySubsidiaries","list","buildHierarchy","current","init","B3Spin","isSpinning","flexDirection","flex","row","HierarchyDialog","companyHierarchyAllList"],"mappings":"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"}