{"version":3,"file":"index-legacy-BySKb_SG.js","sources":["../../src/pages/Login/component/LoginWidget.tsx","../../src/pages/Login/index.tsx","../../src/pages/Login/CatalystLogin.tsx","../../src/pages/Login/LoginForm.tsx","../../src/pages/Login/LoginPanel.tsx","../../src/pages/Login/useLogout.tsx"],"sourcesContent":["import { Box, SxProps } from '@mui/material';\n\ninterface LoginWidgetProps {\n  sx: SxProps;\n  html: string;\n}\n\nfunction LoginWidget(props: LoginWidgetProps) {\n  const { html, sx } = props;\n\n  return (\n    <Box\n      sx={{\n        ...sx,\n      }}\n      dangerouslySetInnerHTML={{\n        __html: html,\n      }}\n    />\n  );\n}\n\nexport default LoginWidget;\n","import { useContext, useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { dispatchEvent } from '@b3/hooks';\nimport { useB3Lang } from '@b3/lang';\nimport { Alert, Box, ImageListItem } from '@mui/material';\n\nimport { B3Card } from '@/components';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { CHECKOUT_URL, PATH_ROUTES } from '@/constants';\nimport { useMobile } from '@/hooks';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport { defaultCreateAccountPanel } from '@/shared/customStyleButton/context/config';\nimport { GlobalContext } from '@/shared/global';\nimport { getBCForcePasswordReset } from '@/shared/service/b2b';\nimport { b2bLogin, bcLogin, customerLoginAPI } from '@/shared/service/bc';\nimport { isLoggedInSelector, useAppDispatch, useAppSelector } from '@/store';\nimport { setB2BToken } from '@/store/slices/company';\nimport { CustomerRole, UserTypes } from '@/types';\nimport { LoginFlagType } from '@/types/login';\nimport { b2bJumpPath, channelId, loginJump, platform, snackbar, storeHash } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport { getCurrentCustomerInfo } from '@/utils/loginInfo';\n\nimport { type PageProps } from '../PageProps';\n\nimport LoginWidget from './component/LoginWidget';\nimport { CatalystLogin } from './CatalystLogin';\nimport { isLoginFlagType, loginCheckout, LoginConfig, loginType } from './config';\nimport LoginForm from './LoginForm';\nimport LoginPanel from './LoginPanel';\nimport { LoginContainer, LoginImage } from './styled';\nimport { useLogout } from './useLogout';\n\nfunction Login(props: PageProps) {\n  const { setOpenPage } = props;\n  const storeDispatch = useAppDispatch();\n  const logout = useLogout();\n\n  const isLoggedIn = useAppSelector(isLoggedInSelector);\n\n  const quoteDetailToCheckoutUrl = useAppSelector(\n    ({ quoteInfo }) => quoteInfo.quoteDetailToCheckoutUrl,\n  );\n\n  const [isLoading, setLoading] = useState(true);\n  const [isMobile] = useMobile();\n\n  const [showTipInfo, setShowTipInfo] = useState<boolean>(true);\n  const [flag, setLoginFlag] = useState<LoginFlagType>();\n  const [loginAccount, setLoginAccount] = useState<LoginConfig>({\n    emailAddress: '',\n    password: '',\n  });\n  const navigate = useNavigate();\n  const b3Lang = useB3Lang();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const {\n    state: { isCheckout, logo, registerEnabled },\n  } = useContext(GlobalContext);\n\n  const {\n    state: {\n      loginPageButton,\n      loginPageDisplay,\n      loginPageHtml,\n      portalStyle: { backgroundColor = 'FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const { createAccountButtonText, primaryButtonColor, signInButtonText } = loginPageButton;\n  const { displayStoreLogo, pageTitle } = loginPageDisplay;\n\n  const {\n    bottomHtmlRegionEnabled,\n    bottomHtmlRegionHtml,\n    createAccountPanelHtml,\n    topHtmlRegionEnabled,\n    topHtmlRegionHtml,\n  } = loginPageHtml;\n\n  const loginInfo = {\n    loginTitle: pageTitle || b3Lang('login.button.signIn'),\n    loginBtn: signInButtonText || b3Lang('login.button.signInUppercase'),\n    createAccountButtonText: createAccountButtonText || b3Lang('login.button.createAccount'),\n    btnColor: primaryButtonColor || '',\n    widgetHeadText: topHtmlRegionEnabled ? topHtmlRegionHtml : undefined,\n    widgetBodyText: createAccountPanelHtml || defaultCreateAccountPanel,\n    widgetFooterText: bottomHtmlRegionEnabled ? bottomHtmlRegionHtml : undefined,\n    logo: displayStoreLogo ? logo : undefined,\n  };\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const loginFlag = searchParams.get('loginFlag');\n        const showTipInfo = searchParams.get('showTip') !== 'false';\n\n        setShowTipInfo(showTipInfo);\n\n        if (isLoginFlagType(loginFlag)) {\n          setLoginFlag(loginFlag);\n        }\n\n        if (loginFlag === 'invoiceErrorTip') {\n          const { tip } = loginType[loginFlag];\n          snackbar.error(b3Lang(tip));\n        }\n\n        if (loginFlag === 'loggedOutLogin' && isLoggedIn) {\n          await logout();\n        }\n\n        setLoading(false);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [b3Lang, isLoggedIn, logout, searchParams]);\n\n  const tipInfo = (loginFlag: LoginFlagType, email = '') => {\n    const { tip, alertType } = loginType[loginFlag];\n\n    return {\n      message: b3Lang(tip, { email }),\n      severity: alertType,\n    };\n  };\n\n  const getForcePasswordReset = async (email: string) => {\n    const forcePasswordReset = await getBCForcePasswordReset(email);\n\n    if (forcePasswordReset) {\n      setLoginFlag('resetPassword');\n    } else {\n      setLoginFlag('accountIncorrect');\n    }\n  };\n\n  const forcePasswordReset = async (email: string, password: string) => {\n    const { errors: bcErrors } = await bcLogin({\n      email,\n      pass: password,\n    });\n\n    if (bcErrors?.[0]) {\n      const { message } = bcErrors[0];\n\n      if (message === 'Reset password') {\n        getForcePasswordReset(email);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const handleLoginSubmit = async (data: LoginConfig) => {\n    setLoading(true);\n    setLoginAccount(data);\n    setSearchParams((prevURLSearchParams) => {\n      prevURLSearchParams.delete('loginFlag');\n      return prevURLSearchParams;\n    });\n\n    if (isCheckout) {\n      try {\n        const response = await loginCheckout(data);\n\n        if (response.status === 400 && response.type === 'reset_password_before_login') {\n          setLoginFlag('resetPassword');\n        } else if (response.type === 'invalid_login') {\n          setLoginFlag('accountIncorrect');\n        } else {\n          window.location.href = CHECKOUT_URL;\n        }\n      } catch (error) {\n        b2bLogger.error(error);\n        await getForcePasswordReset(data.emailAddress);\n      } finally {\n        setLoading(false);\n      }\n    } else {\n      try {\n        const loginData = {\n          email: data.emailAddress,\n          password: data.password,\n          storeHash,\n          channelId,\n        };\n\n        const isForcePasswordReset = await forcePasswordReset(data.emailAddress, data.password);\n        if (isForcePasswordReset) return;\n\n        const {\n          login: {\n            result: { token, storefrontLoginToken },\n            errors,\n          },\n        } = await b2bLogin({ loginData });\n\n        storeDispatch(setB2BToken(token));\n        customerLoginAPI(storefrontLoginToken);\n\n        dispatchEvent('on-login', { storefrontToken: storefrontLoginToken });\n\n        if (errors?.[0] || !token) {\n          if (errors?.[0]) {\n            const { message } = errors[0];\n            if (message === 'Operation cannot be performed as the storefront channel is not live') {\n              setLoginFlag('accountPrelaunch');\n              setLoading(false);\n              return;\n            }\n          }\n          getForcePasswordReset(data.emailAddress);\n        } else {\n          const info = await getCurrentCustomerInfo(token);\n\n          if (quoteDetailToCheckoutUrl) {\n            navigate(quoteDetailToCheckoutUrl);\n            return;\n          }\n\n          if (\n            info?.userType === UserTypes.MULTIPLE_B2C &&\n            info?.role === CustomerRole.SUPER_ADMIN\n          ) {\n            navigate('/dashboard');\n            return;\n          }\n          const isLoginLandLocation = loginJump(navigate);\n\n          if (!isLoginLandLocation) return;\n\n          if (info?.userType === UserTypes.B2C) {\n            navigate(PATH_ROUTES.ORDERS);\n          }\n\n          const path = b2bJumpPath(Number(info?.role));\n\n          navigate(path);\n        }\n      } catch (error) {\n        snackbar.error(b3Lang('login.loginTipInfo.accountIncorrect'));\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const loginAndRegisterContainerWidth = registerEnabled ? '100%' : '50%';\n  const loginContainerWidth = registerEnabled ? '50%' : 'auto';\n\n  const tip = flag && tipInfo(flag, loginAccount?.emailAddress);\n\n  return (\n    <B3Card setOpenPage={setOpenPage}>\n      <LoginContainer paddings={isMobile ? '0' : '20px 20px'}>\n        <B3Spin isSpinning={isLoading} tip={b3Lang('global.tips.loading')} background=\"transparent\">\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              width: '100%',\n              minHeight: '400px',\n              minWidth: '343px',\n            }}\n          >\n            {loginInfo && (\n              <>\n                {flag && showTipInfo && (\n                  <Box\n                    sx={{\n                      padding: isMobile ? 0 : '0 5%',\n                      margin: '30px 0 0 0',\n                    }}\n                  >\n                    {tip && (\n                      <Alert severity={tip.severity} variant=\"filled\">\n                        {tip.message}\n                      </Alert>\n                    )}\n                  </Box>\n                )}\n                {quoteDetailToCheckoutUrl && (\n                  <Alert severity=\"error\" variant=\"filled\">\n                    {b3Lang('login.loginText.quoteDetailToCheckoutUrl')}\n                  </Alert>\n                )}\n                {loginInfo.logo && (\n                  <Box sx={{ margin: '20px 0', minHeight: '150px' }}>\n                    <LoginImage>\n                      <ImageListItem\n                        sx={{\n                          maxWidth: isMobile ? '70%' : '250px',\n                        }}\n                        onClick={() => {\n                          window.location.href = '/';\n                        }}\n                      >\n                        <img\n                          src={loginInfo.logo}\n                          alt={b3Lang('login.registerLogo')}\n                          loading=\"lazy\"\n                        />\n                      </ImageListItem>\n                    </LoginImage>\n                  </Box>\n                )}\n                {loginInfo.widgetHeadText && (\n                  <LoginWidget\n                    sx={{\n                      minHeight: '48px',\n                      width: registerEnabled || isMobile ? '100%' : '50%',\n                    }}\n                    html={loginInfo.widgetHeadText}\n                  />\n                )}\n                <Box\n                  sx={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    flexDirection: 'column',\n                  }}\n                >\n                  <Box\n                    sx={{\n                      bgcolor: '#FFFFFF',\n                      borderRadius: '4px',\n                      margin: '20px 0',\n                      display: 'flex',\n                      flexDirection: 'column',\n                      justifyContent: 'center',\n                      width: isMobile ? 'auto' : loginAndRegisterContainerWidth,\n                    }}\n                  >\n                    <Box\n                      sx={{\n                        mb: '20px',\n                        display: 'flex',\n                        flexDirection: isMobile ? 'column' : 'row',\n                        justifyContent: 'center',\n                        width: isMobile ? 'auto' : '100%',\n                      }}\n                    >\n                      <Box\n                        sx={{\n                          width: isMobile ? 'auto' : loginContainerWidth,\n                          paddingRight: isMobile ? 0 : '2%',\n                          ml: '16px',\n                          mr: isMobile ? '16px' : '',\n                          pb: registerEnabled ? '' : '36px',\n                        }}\n                      >\n                        <LoginForm\n                          loginBtn={loginInfo.loginBtn}\n                          handleLoginSubmit={handleLoginSubmit}\n                          backgroundColor={backgroundColor}\n                        />\n                      </Box>\n\n                      {registerEnabled && (\n                        <Box\n                          sx={{\n                            flex: '1',\n                            paddingLeft: isMobile ? 0 : '2%',\n                          }}\n                        >\n                          <LoginPanel\n                            createAccountButtonText={loginInfo.createAccountButtonText}\n                            widgetBodyText={loginInfo.widgetBodyText}\n                          />\n                        </Box>\n                      )}\n                    </Box>\n                  </Box>\n                </Box>\n                {loginInfo.widgetFooterText && (\n                  <LoginWidget\n                    sx={{\n                      minHeight: '48px',\n                      width: registerEnabled || isMobile ? '100%' : '50%',\n                    }}\n                    html={loginInfo.widgetFooterText}\n                  />\n                )}\n              </>\n            )}\n          </Box>\n        </B3Spin>\n      </LoginContainer>\n    </B3Card>\n  );\n}\n\nexport default function LoginPage(props: PageProps) {\n  if (platform === 'catalyst') {\n    return <CatalystLogin />;\n  }\n\n  return <Login {...props} />;\n}\n","import { useCallback, useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nimport { Loading } from '@/components';\nimport { endUserMasqueradingCompany, superAdminEndMasquerade } from '@/shared/service/b2b';\nimport { bcLogoutLogin } from '@/shared/service/bc';\nimport { isLoggedInSelector, store, useAppSelector } from '@/store';\nimport { clearCompanySlice } from '@/store/slices/company';\n\nconst logout = () => {\n  return bcLogoutLogin().then((res) => {\n    if (res.data.logout.result !== 'success') {\n      throw new Error('Failed to logout');\n    }\n  });\n};\n\nconst useEndMasquerade = () => {\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n\n  return useCallback(async () => {\n    if (isAgenting) {\n      superAdminEndMasquerade(Number(salesRepCompanyId));\n    }\n  }, [isAgenting, salesRepCompanyId]);\n};\n\nconst useEndCompanyMasquerade = () => {\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  return useCallback(async () => {\n    if (selectCompanyHierarchyId) {\n      await endUserMasqueradingCompany();\n    }\n  }, [selectCompanyHierarchyId]);\n};\n\nexport function CatalystLogin() {\n  const navigate = useNavigate();\n  const endMasquerade = useEndMasquerade();\n  const endCompanyMasquerading = useEndCompanyMasquerade();\n  const isLoggedIn = useAppSelector(isLoggedInSelector);\n  const B2BToken = useAppSelector(({ company }) => company.tokens.B2BToken);\n  const [searchParams] = useSearchParams();\n\n  const loginFlag = searchParams.get('loginFlag');\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      window.location.href = '/login';\n    }, 3000);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [B2BToken]);\n\n  useEffect(() => {\n    if (loginFlag === 'loggedOutLogin' || !B2BToken) {\n      Promise.all([logout(), endMasquerade(), endCompanyMasquerading()])\n        .catch(() => {\n          navigate('/orders');\n        })\n        .then(() => {\n          window.sessionStorage.clear();\n          store.dispatch(clearCompanySlice());\n          window.b2b.callbacks.dispatchEvent('on-logout');\n        });\n    } else if (isLoggedIn) {\n      navigate('/orders');\n    }\n  }, [endCompanyMasquerading, endMasquerade, isLoggedIn, loginFlag, navigate, B2BToken]);\n\n  return <Loading />;\n}\n","import { SubmitHandler, useForm } from 'react-hook-form';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, Button, Link, Typography, useTheme } from '@mui/material';\n\nimport { B3CustomForm } from '@/components';\nimport { getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\n\nimport { getLoginFields, LoginConfig } from './config';\n\ninterface LoginFormProps {\n  loginBtn: string;\n  handleLoginSubmit: (data: LoginConfig) => void;\n  backgroundColor: string;\n}\n\nfunction LoginForm(props: LoginFormProps) {\n  const { loginBtn, handleLoginSubmit, backgroundColor } = props;\n\n  const b3Lang = useB3Lang();\n  const theme = useTheme();\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setValue,\n  } = useForm<LoginConfig>({\n    mode: 'onSubmit',\n  });\n\n  const handleLoginClick: SubmitHandler<LoginConfig> = (data) => {\n    handleLoginSubmit(data);\n  };\n\n  const loginFields = getLoginFields(b3Lang, handleSubmit(handleLoginClick));\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <Typography\n        variant=\"h5\"\n        sx={{\n          margin: '20px 0',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        {b3Lang('login.loginText.signInHeader')}\n      </Typography>\n      <Box\n        sx={{\n          width: '100%',\n          '& input': {\n            bgcolor: '#F5F5F5',\n            borderRadius: '4px',\n            borderBottomLeftRadius: '0',\n            borderBottomRightRadius: '0',\n          },\n        }}\n      >\n        <form onSubmit={handleSubmit(handleLoginClick)}>\n          <B3CustomForm\n            formFields={loginFields}\n            errors={errors}\n            control={control}\n            getValues={getValues}\n            setValue={setValue}\n          />\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'flex-start ',\n              alignItems: 'center',\n              mt: 2,\n              gap: 2,\n            }}\n          >\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              sx={{\n                backgroundColor: theme.palette.primary.main,\n              }}\n            >\n              {loginBtn}\n            </Button>\n            <Link\n              component={RouterLink}\n              color={getContrastColor(backgroundColor)}\n              to=\"/forgotPassword\"\n            >\n              {b3Lang('login.loginText.forgotPasswordText')}\n            </Link>\n          </Box>\n        </form>\n      </Box>\n    </Box>\n  );\n}\n\nexport default LoginForm;\n","import { Link } from 'react-router-dom';\nimport { Box, Button, useTheme } from '@mui/material';\n\nimport { useMobile } from '@/hooks';\n\nimport LoginWidget from './component/LoginWidget';\n\ninterface LoginPanelProps {\n  widgetBodyText: string;\n  createAccountButtonText: string;\n}\n\nfunction LoginPanel(props: LoginPanelProps) {\n  const { widgetBodyText, createAccountButtonText } = props;\n\n  const theme = useTheme();\n  const [isMobile] = useMobile();\n\n  return (\n    <Box\n      sx={{\n        padding: isMobile ? '16px' : '20px',\n        borderRadius: '4px',\n        mt: isMobile ? '0' : '-25px',\n      }}\n    >\n      <LoginWidget\n        sx={{\n          minHeight: '250px',\n          '& .panel': {\n            '.panel-title': {\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n              fontWeight: 400,\n              fontSize: '24px',\n            },\n          },\n        }}\n        html={widgetBodyText}\n      />\n      <Box\n        sx={{\n          marginTop: '5px',\n        }}\n      >\n        <Button\n          component={Link}\n          to=\"/register\"\n          variant=\"contained\"\n          sx={{\n            ml: isMobile ? 0 : 1,\n            backgroundColor: theme.palette.primary.main,\n          }}\n        >\n          {createAccountButtonText}\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n\nexport default LoginPanel;\n","import { useCallback } from 'react';\nimport { dispatchEvent } from '@b3/hooks';\n\nimport { endUserMasqueradingCompany, superAdminEndMasquerade } from '@/shared/service/b2b';\nimport { bcLogoutLogin } from '@/shared/service/bc';\nimport { clearMasqueradeCompany, useAppDispatch, useAppSelector } from '@/store';\nimport b2bLogger from '@/utils/b3Logger';\nimport { logoutSession } from '@/utils/b3logout';\n\nconst useEndMasquerade = () => {\n  const isMasquerading = useAppSelector(\n    ({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting,\n  );\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const storeDispatch = useAppDispatch();\n\n  return useCallback(async () => {\n    if (isMasquerading) {\n      await superAdminEndMasquerade(Number(salesRepCompanyId));\n      storeDispatch(clearMasqueradeCompany());\n    }\n  }, [salesRepCompanyId, storeDispatch, isMasquerading]);\n};\n\nconst useEndCompanyMasquerading = () => {\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  return useCallback(async () => {\n    if (selectCompanyHierarchyId) {\n      await endUserMasqueradingCompany();\n    }\n  }, [selectCompanyHierarchyId]);\n};\n\nexport const useLogout = () => {\n  const endMasquerade = useEndMasquerade();\n  const endCompanyMasquerading = useEndCompanyMasquerading();\n\n  return async () => {\n    try {\n      const { result } = (await bcLogoutLogin()).data.logout;\n\n      if (result !== 'success') {\n        return;\n      }\n\n      await Promise.all([endCompanyMasquerading(), endMasquerade()]);\n    } catch (e) {\n      b2bLogger.error(e);\n    } finally {\n      // SUP-1282 Clear sessionStorage to allow visitors to display the checkout page\n      window.sessionStorage.clear();\n      logoutSession();\n      dispatchEvent('on-logout');\n    }\n  };\n};\n"],"names":["LoginWidget","props","html","sx","jsx","Box","dangerouslySetInnerHTML","__html","platform","CatalystLogin","Login","logout","bcLogoutLogin","then","res","data","result","Error","useEndMasquerade","useEndMasquerade$1","isAgenting","useAppSelector","b2bFeatures","masqueradeCompany","salesRepCompanyId","id","useCallback","async","superAdminEndMasquerade","Number","useEndCompanyMasquerade","selectCompanyHierarchyId","company","companyHierarchyInfo","endUserMasqueradingCompany","navigate","useNavigate","endMasquerade","endCompanyMasquerading","isLoggedIn","isLoggedInSelector","B2BToken","tokens","searchParams","useSearchParams","loginFlag","get","useEffect","timeout","setTimeout","window","location","href","clearTimeout","Promise","all","catch","sessionStorage","clear","store","dispatch","clearCompanySlice","b2b","callbacks","dispatchEvent","Loading","LoginForm","loginBtn","handleLoginSubmit","backgroundColor","b3Lang","useB3Lang","theme","useTheme","control","handleSubmit","getValues","formState","errors","setValue","useForm","mode","handleLoginClick","loginFields","getLoginFields","jsxs","display","flexDirection","children","Typography","variant","margin","justifyContent","alignItems","width","bgcolor","borderRadius","borderBottomLeftRadius","borderBottomRightRadius","onSubmit","B3CustomForm","formFields","mt","gap","Button","type","palette","primary","main","Link","component","RouterLink","color","getContrastColor","to","LoginPanel","widgetBodyText","createAccountButtonText","isMobile","useMobile","padding","minHeight","fontWeight","fontSize","marginTop","ml","useLogout","isMasquerading","storeDispatch","useAppDispatch","clearMasqueradeCompany","useEndCompanyMasquerading","e","b2bLogger","error","logoutSession","setOpenPage","quoteDetailToCheckoutUrl","quoteInfo","isLoading","setLoading","useState","showTipInfo","setShowTipInfo","flag","setLoginFlag","loginAccount","setLoginAccount","emailAddress","password","setSearchParams","state","isCheckout","logo","registerEnabled","useContext","GlobalContext","loginPageButton","loginPageDisplay","loginPageHtml","portalStyle","CustomStyleContext","primaryButtonColor","signInButtonText","displayStoreLogo","pageTitle","bottomHtmlRegionEnabled","bottomHtmlRegionHtml","createAccountPanelHtml","topHtmlRegionEnabled","topHtmlRegionHtml","loginInfo","loginTitle","btnColor","widgetHeadText","defaultCreateAccountPanel","widgetFooterText","isLoginFlagType","tip","loginType","snackbar","getForcePasswordReset","forcePasswordReset","getBCForcePasswordReset","email","loginAndRegisterContainerWidth","loginContainerWidth","tipInfo","alertType","message","severity","B3Card","LoginContainer","paddings","B3Spin","isSpinning","background","minWidth","Fragment","Alert","LoginImage","ImageListItem","maxWidth","onClick","src","alt","loading","mb","paddingRight","mr","pb","prevURLSearchParams","delete","response","loginCheckout","status","CHECKOUT_URL","loginData","storeHash","channelId","bcErrors","bcLogin","pass","login","token","storefrontLoginToken","b2bLogin","setB2BToken","customerLoginAPI","storefrontToken","info","getCurrentCustomerInfo","userType","UserTypes","MULTIPLE_B2C","role","CustomerRole","SUPER_ADMIN","loginJump","B2C","PATH_ROUTES","ORDERS","path","b2bJumpPath","flex","paddingLeft"],"mappings":"2+CAOA,SAASA,EAAYC,GACb,MAAAC,KAAEA,EAAMC,GAAAA,GAAOF,EAGnB,OAAAG,EAAAA,IAACC,EAAA,CACCF,GAAI,IACCA,GAELG,wBAAyB,CACvBC,OAAQL,IAIhB,cCyXA,SAAkCD,GAChC,MAAiB,aAAbO,QACMC,GAAc,IAGjBL,MAACM,GAAO,IAAGT,GACpB,IC1YA,MAAMU,GAASA,IACNC,IAAgBC,MAAMC,IAC3B,GAA+B,YAA3BA,EAAIC,KAAKJ,OAAOK,OACZ,MAAI,IAAAC,MAAM,mBAAkB,IAKlCC,GAAmBC,KACjB,MAAAC,EAAaC,GAAe,EAAGC,iBAAkBA,EAAYC,kBAAkBH,aAC/EI,EAAoBH,GAAe,EAAGC,iBAAkBA,EAAYC,kBAAkBE,KAE5F,OAAOC,eAAYC,UACbP,GACsBQ,EAAAC,OAAOL,GAAkB,GAElD,CAACJ,EAAYI,GAAkB,EAG9BM,GAA0BA,KACxB,MAAAC,yBAAEA,GAA6BV,GACnC,EAAGW,aAAcA,EAAQC,uBAG3B,OAAOP,eAAYC,UACbI,SACIG,GAA2B,GAElC,CAACH,GAAyB,EAGxB,SAAStB,KACd,MAAM0B,EAAWC,IACXC,EAAgBnB,KAChBoB,EAAyBR,KACzBS,EAAalB,EAAemB,GAC5BC,EAAWpB,GAAe,EAAGW,aAAcA,EAAQU,OAAOD,YACzDE,GAAgBC,IAEjBC,EAAYF,EAAaG,IAAI,aA4BnC,OA1BAC,EAAAA,WAAU,KACF,MAAAC,EAAUC,YAAW,KACzBC,OAAOC,SAASC,KAAO,QAAA,GACtB,KAEH,MAAO,KACLC,aAAaL,EAAO,CACtB,GACC,CAACP,IAEJM,EAAAA,WAAU,KACU,mBAAdF,GAAmCJ,EAU5BF,GACTJ,EAAS,WAVDmB,QAAAC,IAAI,CAAC5C,KAAU0B,IAAiBC,MACrCkB,OAAM,KACLrB,EAAS,UAAS,IAEnBtB,MAAK,KACJqC,OAAOO,eAAeC,QAChBC,EAAAC,SAASC,KACRX,OAAAY,IAAIC,UAAUC,cAAc,YAAW,GAGhC,GAEnB,CAAC1B,EAAwBD,EAAeE,EAAYM,EAAWV,EAAUM,UAEpEwB,EAAQ,GAClB,CC7DA,SAASC,GAAUjE,GACjB,MAAMkE,SAAEA,EAAAC,kBAAUA,EAAmBC,gBAAAA,GAAoBpE,EAEnDqE,EAASC,IACTC,EAAQC,KAERC,QACJA,EAAAC,aACAA,EAAAC,UACAA,EACAC,WAAWC,OAAEA,GAAOC,SACpBA,GACEC,GAAqB,CACvBC,KAAM,aAGFC,EAAgDnE,IACpDqD,EAAkBrD,EAAI,EAGlBoE,EAAcC,EAAed,EAAQK,EAAaO,IAGtD,OAAAG,EAAAA,KAAChF,EAAA,CACCF,GAAI,CACFmF,QAAS,OACTC,cAAe,UAGjBC,SAAA,CAAApF,EAAAA,IAACqF,EAAA,CACCC,QAAQ,KACRvF,GAAI,CACFwF,OAAQ,SACRL,QAAS,OACTM,eAAgB,SAChBC,WAAY,UAGbL,WAAO,kCAEVpF,EAAAA,IAACC,EAAA,CACCF,GAAI,CACF2F,MAAO,OACP,UAAW,CACTC,QAAS,UACTC,aAAc,MACdC,uBAAwB,IACxBC,wBAAyB,MAI7BV,SAACH,EAAAA,KAAA,OAAA,CAAKc,SAAUxB,EAAaO,GAC3BM,SAAA,CAAApF,EAAAA,IAACgG,GAAA,CACCC,WAAYlB,EACZL,SACAJ,UACAE,YACAG,aAEFM,EAAAA,KAAChF,EAAA,CACCF,GAAI,CACFmF,QAAS,OACTM,eAAgB,cAChBC,WAAY,SACZS,GAAI,EACJC,IAAK,GAGPf,SAAA,CAAApF,EAAAA,IAACoG,EAAA,CACCC,KAAK,SACLf,QAAQ,YACRvF,GAAI,CACFkE,gBAAiBG,EAAMkC,QAAQC,QAAQC,MAGxCpB,SAAArB,IAEH/D,EAAAA,IAACyG,EAAA,CACCC,UAAWC,EACXC,MAAOC,EAAiB5C,GACxB6C,GAAG,kBAEF1B,WAAO,kDAOtB,CC7FA,SAAS2B,GAAWlH,GACZ,MAAAmH,eAAEA,EAAgBC,wBAAAA,GAA4BpH,EAE9CuE,EAAQC,KACP6C,GAAYC,IAGjB,OAAAlC,EAAAA,KAAChF,EAAA,CACCF,GAAI,CACFqH,QAASF,EAAW,OAAS,OAC7BtB,aAAc,MACdM,GAAIgB,EAAW,IAAM,SAGvB9B,SAAA,CAAApF,EAAAA,IAACJ,EAAA,CACCG,GAAI,CACFsH,UAAW,QACX,WAAY,CACV,eAAgB,CACdnC,QAAS,OACTC,cAAe,SACfK,eAAgB,SAChBC,WAAY,SACZ6B,WAAY,IACZC,SAAU,UAIhBzH,KAAMkH,IAERhH,EAAAA,IAACC,EAAA,CACCF,GAAI,CACFyH,UAAW,OAGbpC,SAAApF,EAAAA,IAACoG,EAAA,CACCM,UAAWD,EACXK,GAAG,YACHxB,QAAQ,YACRvF,GAAI,CACF0H,GAAIP,EAAW,EAAI,EACnBjD,gBAAiBG,EAAMkC,QAAQC,QAAQC,MAGxCpB,SAAA6B,QAKX,CCpDA,MA2BaS,GAAYA,KACvB,MAAMzF,EA5BiBnB,MACvB,MAAM6G,EAAiB1G,GACrB,EAAGC,iBAAkBA,EAAYC,kBAAkBH,aAE/CI,EAAoBH,GAAe,EAAGC,iBAAkBA,EAAYC,kBAAkBE,KACtFuG,EAAgBC,IAEtB,OAAOvG,eAAYC,UACboG,UACInG,EAAwBC,OAAOL,IACrCwG,EAAcE,KAAwB,GAEvC,CAAC1G,EAAmBwG,EAAeD,GAAe,EAgB/B7G,GAChBoB,EAd0B6F,MAC1B,MAAApG,yBAAEA,GAA6BV,GACnC,EAAGW,aAAcA,EAAQC,uBAG3B,OAAOP,eAAYC,UACbI,SACIG,GAA2B,GAElC,CAACH,GAAyB,EAKEoG,GAE/B,OAAOxG,UACD,IACF,MAAMX,OAAEA,UAAkBJ,KAAiBG,KAAKJ,OAEhD,GAAe,YAAXK,EACF,aAGIsC,QAAQC,IAAI,CAACjB,IAA0BD,YACtC+F,GACPC,EAAUC,MAAMF,EAAC,CACjB,QAEAlF,OAAOO,eAAeC,QACR6E,IACdvE,EAAc,YAAW,EAE7B,EJxBF,SAAStD,GAAMT,GACP,MAAAuI,YAAEA,GAAgBvI,EAClB+H,EAAgBC,IAChBtH,EAASmH,KAETvF,EAAalB,EAAemB,GAE5BiG,EAA2BpH,GAC/B,EAAGqH,eAAgBA,EAAUD,4BAGxBE,EAAWC,GAAcC,EAAAA,UAAS,IAClCvB,GAAYC,KAEZuB,EAAaC,GAAkBF,EAAAA,UAAkB,IACjDG,EAAMC,GAAgBJ,cACtBK,EAAcC,GAAmBN,WAAsB,CAC5DO,aAAc,GACdC,SAAU,KAENlH,EAAWC,IACXkC,EAASC,KACR5B,GAAc2G,IAAmB1G,KAGtC2G,OAAOC,WAAEA,GAAYC,KAAAA,GAAAC,gBAAMA,KACzBC,EAAAA,WAAWC,IAGbL,OAAOM,gBACLA,GAAAC,iBACAA,GAAAC,cACAA,GACAC,aAAa3F,gBAAEA,GAAkB,YAEjCsF,EAAAA,WAAWM,IAET5C,wBAAEA,GAAA6C,mBAAyBA,GAAoBC,iBAAAA,IAAqBN,IACpEO,iBAAEA,GAAkBC,UAAAA,IAAcP,IAElCQ,wBACJA,GAAAC,qBACAA,GAAAC,uBACAA,GAAAC,qBACAA,GAAAC,kBACAA,IACEX,GAEEY,GAAY,CAChBC,WAAYP,IAAa/F,EAAO,uBAChCH,SAAUgG,IAAoB7F,EAAO,gCACrC+C,wBAAyBA,IAA2B/C,EAAO,8BAC3DuG,SAAUX,IAAsB,GAChCY,eAAgBL,GAAuBC,QAAoB,EAC3DtD,eAAgBoD,IAA0BO,EAC1CC,iBAAkBV,GAA0BC,QAAuB,EACnEd,KAAMW,GAAmBX,QAAO,GAGlC1G,EAAAA,WAAU,KACR,WACM,IACI,MAAAF,EAAYF,GAAaG,IAAI,aAC7BgG,EAA8C,UAAhCnG,GAAaG,IAAI,WAQrC,GANAiG,EAAeD,GAEXmC,EAAgBpI,IAClBoG,EAAapG,GAGG,oBAAdA,EAAiC,CACnC,MAAQqI,IAAAA,GAAQC,EAAUtI,GACjBuI,EAAA9C,MAAMhE,EAAO4G,GAAI,CAGV,mBAAdrI,GAAkCN,SAC9B5B,IAGRiI,GAAW,EAAK,CAChB,QACAA,GAAW,EAAK,CAEjB,EAxBH,EAwBG,GACF,CAACtE,EAAQ/B,EAAY5B,EAAQgC,KAEhC,MASM0I,GAAwB1J,UACtB2J,MAAAA,QAA2BC,EAAwBC,GAGvDvC,EADEqC,EACW,gBAEA,mBAAkB,EAoH7BG,GAAiC/B,GAAkB,OAAS,MAC5DgC,GAAsBhC,GAAkB,MAAQ,OAEhDwB,GAAMlC,GAtII2C,EAAC9I,EAA0B2I,EAAQ,MACjD,MAAQN,IAAAA,EAAAA,UAAKU,GAAcT,EAAUtI,GAE9B,MAAA,CACLgJ,QAASvH,EAAO4G,EAAK,CAAEM,UACvBM,SAAUF,EACZ,EAgIkBD,CAAQ3C,EAAME,GAAcE,cAEhD,aACG2C,EAAO,CAAAvD,cACNhD,eAACwG,GAAe,CAAAC,SAAU3E,EAAW,IAAM,YACzC9B,SAACpF,EAAAA,IAAA8L,EAAA,CAAOC,WAAYxD,EAAWuC,IAAK5G,EAAO,uBAAwB8H,WAAW,cAC5E5G,SAAApF,EAAAA,IAACC,EAAA,CACCF,GAAI,CACFmF,QAAS,OACTC,cAAe,SACfO,MAAO,OACP2B,UAAW,QACX4E,SAAU,SAGX7G,aAEIH,EAAAA,KAAAiH,EAAAA,SAAA,CAAA9G,SAAA,CAAAwD,GAAQF,GACP1I,EAAAA,IAACC,EAAA,CACCF,GAAI,CACFqH,QAASF,EAAW,EAAI,OACxB3B,OAAQ,cAGTH,SAAA0F,UACEqB,EAAM,CAAAT,SAAUZ,GAAIY,SAAUpG,QAAQ,SACpCF,SAAA0F,GAAIW,YAKZpD,SACE8D,EAAM,CAAAT,SAAS,QAAQpG,QAAQ,SAC7BF,SAAOlB,EAAA,8CAGXqG,GAAUlB,MACRrJ,EAAAA,IAAAC,EAAA,CAAIF,GAAI,CAAEwF,OAAQ,SAAU8B,UAAW,SACtCjC,SAAApF,EAAAA,IAACoM,GACC,CAAAhH,SAAApF,EAAAA,IAACqM,EAAA,CACCtM,GAAI,CACFuM,SAAUpF,EAAW,MAAQ,SAE/BqF,QAASA,KACPzJ,OAAOC,SAASC,KAAO,GAAA,EAGzBoC,SAAApF,EAAAA,IAAC,MAAA,CACCwM,IAAKjC,GAAUlB,KACfoD,IAAKvI,EAAO,sBACZwI,QAAQ,eAMjBnC,GAAUG,gBACT1K,EAAAA,IAACJ,EAAA,CACCG,GAAI,CACFsH,UAAW,OACX3B,MAAO4D,IAAmBpC,EAAW,OAAS,OAEhDpH,KAAMyK,GAAUG,iBAGpB1K,EAAAA,IAACC,EAAA,CACCF,GAAI,CACFmF,QAAS,OACTM,eAAgB,SAChBC,WAAY,SACZN,cAAe,UAGjBC,SAAApF,EAAAA,IAACC,EAAA,CACCF,GAAI,CACF4F,QAAS,UACTC,aAAc,MACdL,OAAQ,SACRL,QAAS,OACTC,cAAe,SACfK,eAAgB,SAChBE,MAAOwB,EAAW,OAASmE,IAG7BjG,SAAAH,EAAAA,KAAChF,EAAA,CACCF,GAAI,CACF4M,GAAI,OACJzH,QAAS,OACTC,cAAe+B,EAAW,SAAW,MACrC1B,eAAgB,SAChBE,MAAOwB,EAAW,OAAS,QAG7B9B,SAAA,CAAApF,EAAAA,IAACC,EAAA,CACCF,GAAI,CACF2F,MAAOwB,EAAW,OAASoE,GAC3BsB,aAAc1F,EAAW,EAAI,KAC7BO,GAAI,OACJoF,GAAI3F,EAAW,OAAS,GACxB4F,GAAIxD,GAAkB,GAAK,QAG7BlE,SAAApF,EAAAA,IAAC8D,GAAA,CACCC,SAAUwG,GAAUxG,SACpBC,kBAzMEzC,UAQxB,GAPAiH,GAAW,GACXO,EAAgBpI,GAChBuI,IAAiB6D,IACfA,EAAoBC,OAAO,aACpBD,KAGL3D,GACE,IACI,MAAA6D,QAAiBC,GAAcvM,GAEb,MAApBsM,EAASE,QAAoC,gCAAlBF,EAAS5G,KACtCwC,EAAa,iBACc,kBAAlBoE,EAAS5G,KAClBwC,EAAa,oBAEb/F,OAAOC,SAASC,KAAOoK,QAElBlF,GACPD,EAAUC,MAAMA,SACV+C,GAAsBtK,EAAKqI,aAAY,CAC7C,QACAR,GAAW,EAAK,MAGd,IACF,MAAM6E,EAAY,CAChBjC,MAAOzK,EAAKqI,aACZC,SAAUtI,EAAKsI,SACfqE,YACAC,aAIF,QArDqBhM,OAAO6J,EAAenC,KAC/C,MAAQvE,OAAQ8I,SAAmBC,EAAQ,CACzCrC,QACAsC,KAAMzE,IAGJ,GAAAuE,IAAW,GAAI,CACjB,MAAM/B,QAAEA,GAAY+B,EAAS,GAE7B,GAAgB,mBAAZ/B,EAEK,OADPR,GAAsBG,IACf,CACT,CAGK,OAAA,CAAA,EAqCgCF,CAAmBvK,EAAKqI,aAAcrI,EAAKsI,UACpD,OAEpB,MACJ0E,OACE/M,QAAQgN,MAAEA,EAAAC,qBAAOA,GAAqBnJ,OACtCA,UAEMoJ,EAAS,CAAET,cAOrB,GALczF,EAAAmG,EAAYH,IAC1BI,EAAiBH,GAEjBjK,EAAc,WAAY,CAAEqK,gBAAiBJ,IAEzCnJ,IAAS,KAAOkJ,EAAO,CACrB,GAAAlJ,IAAS,GAAI,CACf,MAAM+G,QAAEA,GAAY/G,EAAO,GAC3B,GAAgB,wEAAZ+G,EAGF,OAFA5C,EAAa,yBACbL,GAAW,EAEb,CAEFyC,GAAsBtK,EAAKqI,aAAY,KAClC,CACC,MAAAkF,QAAaC,EAAuBP,GAE1C,GAAIvF,EAEF,YADAtG,EAASsG,GAIX,GACE6F,GAAME,WAAaC,EAAUC,cAC7BJ,GAAMK,OAASC,EAAaC,YAG5B,YADA1M,EAAS,cAKX,IAF4B2M,EAAU3M,GAEZ,OAEtBmM,GAAME,WAAaC,EAAUM,KAC/B5M,EAAS6M,EAAYC,QAGvB,MAAMC,EAAOC,EAAYtN,OAAOyM,GAAMK,OAEtCxM,EAAS+M,EAAI,QAER5G,GACE8C,EAAA9C,MAAMhE,EAAO,uCAAsC,CAC5D,QACAsE,GAAW,EAAK,CAClB,EAgHoBvE,uBAIHqF,IACCtJ,EAAAA,IAACC,EAAA,CACCF,GAAI,CACFiP,KAAM,IACNC,YAAa/H,EAAW,EAAI,MAG9B9B,SAAApF,EAAAA,IAAC+G,GAAA,CACCE,wBAAyBsD,GAAUtD,wBACnCD,eAAgBuD,GAAUvD,0BAOrCuD,GAAUK,kBACT5K,EAAAA,IAACJ,EAAA,CACCG,GAAI,CACFsH,UAAW,OACX3B,MAAO4D,IAAmBpC,EAAW,OAAS,OAEhDpH,KAAMyK,GAAUK,6BAUpC"}