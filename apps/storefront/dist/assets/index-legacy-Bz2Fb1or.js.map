{"version":3,"file":"index-legacy-Bz2Fb1or.js","sources":["../../src/pages/QuotesList/index.tsx","../../src/pages/quote/shared/config.ts","../../src/pages/QuotesList/QuoteItemCard.tsx"],"sourcesContent":["import { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\n\nimport B3Filter from '@/components/filter/B3Filter';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { B3PaginationTable, GetRequestList } from '@/components/table/B3PaginationTable';\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport { useMobile, useSort } from '@/hooks';\nimport { GlobalContext } from '@/shared/global';\nimport {\n  getB2BQuotesList,\n  getBCQuotesList,\n  getShoppingListsCreatedByUser,\n} from '@/shared/service/b2b';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { channelId, currencyFormatConvert, displayFormat } from '@/utils';\n\nimport QuoteStatus from '../quote/components/QuoteStatus';\nimport { addPrice } from '../quote/shared/config';\n\nimport { QuoteItemCard } from './QuoteItemCard';\n\ninterface ListItem {\n  [key: string]: string | Object;\n  status: string;\n  quoteNumber: string;\n}\n\ninterface FilterSearchProps {\n  first: number;\n  offset: number;\n  q: string;\n  orderBy: string;\n  createdBy: string;\n  status: string | number;\n  salesRep: string;\n  dateCreatedBeginAt: string;\n  dateCreatedEndAt: string;\n  startValue: string;\n  endValue: string;\n}\n\nconst quotesStatuses = [\n  {\n    idLangCustomLabel: 'quotes.open',\n    statusCode: 1,\n  },\n  {\n    idLangCustomLabel: 'quotes.ordered',\n    statusCode: 4,\n  },\n  {\n    idLangCustomLabel: 'quotes.expired',\n    statusCode: 5,\n  },\n];\n\nconst defaultSortKey = 'quoteNumber';\n\nconst sortKeys = {\n  quoteNumber: 'quoteNumber',\n  quoteTitle: 'quoteTitle',\n  salesRep: 'salesRep',\n  createdBy: 'createdBy',\n  createdAt: 'createdAt',\n  updatedAt: 'updatedAt',\n  expiredAt: 'expiredAt',\n  status: 'status',\n};\n\nfunction useData() {\n  const companyB2BId = useAppSelector(({ company }) => company.companyInfo.id);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const draftQuoteListLength = useAppSelector(({ quoteInfo }) => quoteInfo.draftQuoteList.length);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const b3Lang = useB3Lang();\n\n  const companyId = companyB2BId || salesRepCompanyId;\n\n  const getQuotesList = (\n    params: Partial<FilterSearchProps>,\n  ): ReturnType<typeof getB2BQuotesList | typeof getBCQuotesList> => {\n    return isB2BUser\n      ? getB2BQuotesList({ ...params, channelId })\n      : getBCQuotesList({ ...params, channelId });\n  };\n\n  const getFilters = () => [\n    {\n      name: 'status',\n      label: b3Lang('quotes.quoteStatus'),\n      required: false,\n      default: '',\n      fieldType: 'dropdown',\n      options: quotesStatuses.map(({ idLangCustomLabel, ...restQuoteStatuses }) => ({\n        customLabel: b3Lang(idLangCustomLabel),\n        ...restQuoteStatuses,\n      })),\n      replaceOptions: {\n        label: 'customLabel',\n        value: 'statusCode',\n      },\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n\n  const getB2BFilters = async () => {\n    const createdByUsers = await getShoppingListsCreatedByUser(Number(companyId), 2);\n\n    const newCreatedByUsers =\n      createdByUsers?.createdByUser?.results?.createdBy.map((item: any) => ({\n        createdBy: item.email ? `${item.name} (${item.email})` : `${item.name}`,\n      })) || [];\n\n    const newCreatedBySalesReps =\n      createdByUsers?.createdByUser?.results?.salesRep.map((item: any) => ({\n        salesRep: `${item.salesRep || item.salesRepEmail}`,\n      })) || [];\n\n    return [\n      ...getFilters(),\n      {\n        name: 'createdBy',\n        label: b3Lang('quotes.createdBy'),\n        required: false,\n        default: '',\n        fieldType: 'dropdown',\n        options: newCreatedByUsers,\n        replaceOptions: {\n          label: 'createdBy',\n          value: 'createdBy',\n        },\n        xs: 12,\n        variant: 'filled',\n        size: 'small',\n      },\n      {\n        name: 'salesRep',\n        label: b3Lang('quotes.salesRep'),\n        required: false,\n        default: '',\n        fieldType: 'dropdown',\n        options: newCreatedBySalesReps,\n        replaceOptions: {\n          label: 'salesRep',\n          value: 'salesRep',\n        },\n        xs: 12,\n        variant: 'filled',\n        size: 'small',\n      },\n    ];\n  };\n\n  const getAvailableFilters = async () => {\n    if (isB2BUser) {\n      return getB2BFilters();\n    }\n\n    return getFilters();\n  };\n\n  return {\n    companyId,\n    isB2BUser,\n    draftQuoteListLength,\n    customer,\n    getQuotesList,\n    getAvailableFilters,\n  };\n}\n\nconst useColumnList = (): Array<TableColumnItem<ListItem>> => {\n  const b3Lang = useB3Lang();\n\n  return useMemo(\n    () => [\n      {\n        key: 'quoteNumber',\n        title: b3Lang('quotes.quoteNumber'),\n        isSortable: true,\n      },\n      {\n        key: 'quoteTitle',\n        title: b3Lang('quotes.title'),\n        isSortable: true,\n      },\n      {\n        key: 'salesRep',\n        title: b3Lang('quotes.salesRep'),\n        render: (item: ListItem) => `${item.salesRep || item.salesRepEmail}`,\n        isSortable: true,\n      },\n      {\n        key: 'createdBy',\n        title: b3Lang('quotes.createdBy'),\n        isSortable: true,\n      },\n      {\n        key: 'createdAt',\n        title: b3Lang('quotes.dateCreated'),\n        render: (item: ListItem) =>\n          `${Number(item.status) !== 0 ? displayFormat(Number(item.createdAt)) : item.createdAt}`,\n        isSortable: true,\n      },\n      {\n        key: 'updatedAt',\n        title: b3Lang('quotes.lastUpdate'),\n        render: (item: ListItem) =>\n          `${Number(item.status) !== 0 ? displayFormat(Number(item.updatedAt)) : item.updatedAt}`,\n        isSortable: true,\n      },\n      {\n        key: 'expiredAt',\n        title: b3Lang('quotes.expirationDate'),\n        render: (item: ListItem) =>\n          `${Number(item.status) !== 0 ? displayFormat(Number(item.expiredAt)) : item.expiredAt}`,\n        isSortable: true,\n      },\n      {\n        key: 'totalAmount',\n        title: b3Lang('quotes.subtotal'),\n        render: (item: ListItem) => {\n          const { totalAmount, currency } = item;\n          const newCurrency = currency as CurrencyProps;\n          return currencyFormatConvert(Number(totalAmount), {\n            currency: newCurrency,\n            isConversionRate: false,\n            useCurrentCurrency: !!currency,\n          });\n        },\n        style: {\n          textAlign: 'right',\n        },\n      },\n      {\n        key: 'status',\n        title: b3Lang('quotes.status'),\n        render: (item: ListItem) => <QuoteStatus code={item.status} />,\n        isSortable: true,\n      },\n    ],\n    [b3Lang],\n  );\n};\n\nfunction QuotesList() {\n  const { getAvailableFilters, draftQuoteListLength, customer, getQuotesList } = useData();\n  const columns = useColumnList();\n\n  const initSearch = {\n    q: '',\n    orderBy: `-${sortKeys[defaultSortKey]}`,\n    createdBy: '',\n    salesRep: '',\n    status: '',\n    dateCreatedBeginAt: '',\n    dateCreatedEndAt: '',\n  };\n\n  const [filterData, setFilterData] = useState<Partial<FilterSearchProps>>(initSearch);\n\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n\n  const [filterMoreInfo, setFilterMoreInfo] = useState<Array<any>>([]);\n\n  const [handleSetOrderBy, order, orderBy] = useSort(\n    sortKeys,\n    defaultSortKey,\n    filterData,\n    setFilterData,\n  );\n\n  const navigate = useNavigate();\n\n  const b3Lang = useB3Lang();\n\n  const [isMobile] = useMobile();\n\n  const {\n    state: { openAPPParams },\n    dispatch,\n  } = useContext(GlobalContext);\n\n  useEffect(() => {\n    getAvailableFilters().then((filters) => setFilterMoreInfo(filters));\n\n    if (openAPPParams.quoteBtn) {\n      dispatch({\n        type: 'common',\n        payload: {\n          openAPPParams: {\n            quoteBtn: '',\n            shoppingListBtn: '',\n          },\n        },\n      });\n    }\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const goToDetail = (item: ListItem, status: number) => {\n    if (Number(status) === 0) {\n      navigate('/quoteDraft');\n    } else {\n      navigate(`/quoteDetail/${item.id}?date=${item.createdAt}`);\n    }\n  };\n\n  const fetchList: GetRequestList<Partial<FilterSearchProps>, ListItem> = useCallback(\n    async (params) => {\n      const { edges = [], totalCount } = await getQuotesList(params);\n\n      if (params.offset === 0 && draftQuoteListLength) {\n        const summaryPrice = addPrice();\n\n        const quoteDraft = {\n          node: {\n            quoteNumber: '—',\n            quoteTitle: '—',\n            createdAt: '—',\n            salesRepEmail: '—',\n            createdBy: `${customer.firstName} ${customer.lastName}`,\n            updatedAt: '—',\n            expiredAt: '—',\n            totalAmount: summaryPrice?.grandTotal,\n            status: 0,\n            taxTotal: summaryPrice?.tax,\n          },\n        };\n\n        const { status, createdBy, salesRep, dateCreatedBeginAt, dateCreatedEndAt } = filterData;\n\n        const showDraft = !status && !salesRep && !dateCreatedBeginAt && !dateCreatedEndAt;\n\n        if (createdBy && showDraft) {\n          const getCreatedByReg = /^[^(]+/;\n          const createdByUserRegArr = getCreatedByReg.exec(createdBy);\n          const createdByUser = createdByUserRegArr?.length ? createdByUserRegArr[0].trim() : '';\n          if (createdByUser === quoteDraft.node.createdBy) edges.unshift(quoteDraft);\n        } else if (showDraft) {\n          edges.unshift(quoteDraft);\n        }\n      }\n\n      return {\n        edges,\n        totalCount,\n      };\n    },\n    [getQuotesList, draftQuoteListLength, customer.firstName, customer.lastName, filterData],\n  );\n\n  const handleChange = (key: string, value: string) => {\n    if (key === 'search') {\n      setFilterData({\n        ...filterData,\n        q: value,\n      });\n    }\n  };\n\n  const handleFilterChange = (value: Partial<FilterSearchProps>) => {\n    const search: Partial<FilterSearchProps> = {\n      createdBy: value?.createdBy || '',\n      status: value?.status || '',\n      salesRep: value?.salesRep || '',\n      dateCreatedBeginAt: value?.startValue || '',\n      dateCreatedEndAt: value?.endValue || '',\n    };\n\n    setFilterData({\n      ...filterData,\n      ...search,\n    });\n  };\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n        }}\n      >\n        <B3Filter\n          filterMoreInfo={filterMoreInfo}\n          startPicker={{\n            isEnabled: true,\n            label: b3Lang('quotes.from'),\n            defaultValue: filterData?.dateCreatedBeginAt || '',\n            pickerKey: 'start',\n          }}\n          endPicker={{\n            isEnabled: true,\n            label: b3Lang('quotes.to'),\n            defaultValue: filterData?.dateCreatedEndAt || '',\n            pickerKey: 'end',\n          }}\n          handleChange={handleChange}\n          handleFilterChange={handleFilterChange}\n        />\n        <B3PaginationTable\n          columnItems={columns}\n          rowsPerPageOptions={[10, 20, 30]}\n          getRequestList={fetchList}\n          searchParams={filterData}\n          isCustomRender={false}\n          requestLoading={setIsRequestLoading}\n          tableKey=\"quoteNumber\"\n          sortDirection={order}\n          orderBy={orderBy}\n          sortByFn={handleSetOrderBy}\n          labelRowsPerPage={\n            isMobile ? b3Lang('quotes.cardsPerPage') : b3Lang('quotes.quotesPerPage')\n          }\n          renderItem={(row) => <QuoteItemCard item={row} goToDetail={goToDetail} />}\n          onClickRow={(row) => {\n            goToDetail(row, Number(row.status));\n          }}\n          hover\n        />\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default QuotesList;\n","import { store } from '@/store';\nimport { getActiveCurrencyInfo } from '@/utils';\nimport { getBCPrice } from '@/utils/b3Product/b3Product';\n\nexport interface ProductInfoProps {\n  basePrice: number | string;\n  baseSku: string;\n  createdAt: number;\n  discount: number | string;\n  offeredPrice: number | string;\n  enteredInclusive: boolean;\n  id: number | string;\n  itemId: number;\n  optionList: string;\n  primaryImage: string;\n  productId: number;\n  productName: string;\n  productUrl: string;\n  quantity: number | string;\n  tax: number | string;\n  updatedAt: number;\n  variantId: number;\n  variantSku: string;\n  productsSearch: CustomFieldItems;\n}\n\ninterface Summary {\n  subtotal: number;\n  shipping: number;\n  tax: number;\n  grandTotal: number;\n}\n\nexport const compareOption = (langList: CustomFieldItems[], shortList: CustomFieldItems[]) => {\n  let flag = true;\n  langList.forEach((item: CustomFieldItems) => {\n    const option = shortList.find((list: CustomFieldItems) => list.optionId === item.optionId);\n    if (!option) {\n      if (item?.optionValue) flag = false;\n    } else if (item.optionValue !== option.optionValue) flag = false;\n  });\n  return flag;\n};\n\nconst defaultSummary: Summary = {\n  subtotal: 0,\n  shipping: 0,\n  tax: 0,\n  grandTotal: 0,\n};\n\nconst { decimal_places: decimalPlaces = 2 } = getActiveCurrencyInfo();\n\nconst priceCalc = (price: number) => parseFloat(price.toFixed(decimalPlaces));\n\nexport const addPrice = () => {\n  const { draftQuoteList } = store.getState().quoteInfo;\n  const { showInclusiveTaxPrice } = store.getState().global;\n\n  const newQuoteSummary = draftQuoteList.reduce(\n    (summary: Summary, product: CustomFieldItems) => {\n      const {\n        basePrice,\n        taxPrice: productTax = 0,\n        quantity,\n        additionalCalculatedPrices = [],\n      } = product.node;\n\n      let { subtotal, grandTotal, tax } = summary;\n\n      const { shipping } = summary;\n\n      let additionalCalculatedPriceTax = 0;\n\n      let additionalCalculatedPrice = 0;\n\n      additionalCalculatedPrices.forEach((item: CustomFieldItems) => {\n        additionalCalculatedPriceTax += item.additionalCalculatedPriceTax;\n        additionalCalculatedPrice += item.additionalCalculatedPrice;\n      });\n\n      subtotal += priceCalc(\n        getBCPrice(Number(basePrice) + additionalCalculatedPrice, Number(productTax)) * quantity,\n      );\n      tax += priceCalc((Number(productTax) + additionalCalculatedPriceTax) * quantity);\n\n      grandTotal = showInclusiveTaxPrice ? subtotal + shipping : subtotal + shipping + tax;\n\n      return {\n        grandTotal,\n        shipping,\n        tax,\n        subtotal,\n      };\n    },\n    {\n      ...defaultSummary,\n    },\n  );\n\n  return newQuoteSummary;\n};\n","import { useB3Lang } from '@b3/lang';\nimport styled from '@emotion/styled';\nimport { useTheme } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\n\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport { currencyFormat, displayFormat } from '@/utils';\n\nimport QuoteStatus from '../quote/components/QuoteStatus';\n\ninterface ListItem {\n  [key: string]: string | Object;\n  status: string;\n  quoteNumber: string;\n}\n\nexport interface QuoteItemCardProps {\n  goToDetail: (val: ListItem, status: number) => void;\n  item: ListItem;\n}\n\nconst Flex = styled('div')({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'start',\n  marginBottom: '1rem',\n});\n\nexport function QuoteItemCard(props: QuoteItemCardProps) {\n  const { item, goToDetail } = props;\n  const theme = useTheme();\n  const b3Lang = useB3Lang();\n\n  const primaryColor = theme.palette.primary.main;\n\n  const columnAllItems: TableColumnItem<ListItem>[] = [\n    {\n      key: 'quoteTitle',\n      title: b3Lang('quotes.quoteItemCard.title'),\n    },\n    {\n      key: 'salesRepEmail',\n      title: b3Lang('quotes.quoteItemCard.salesRep'),\n    },\n    {\n      key: 'createdBy',\n      title: b3Lang('quotes.quoteItemCard.createdBy'),\n    },\n    {\n      key: 'createdAt',\n      title: b3Lang('quotes.quoteItemCard.dateCreated'),\n      render: () =>\n        `${Number(item.status) !== 0 ? displayFormat(Number(item.createdAt)) : item.createdAt}`,\n    },\n    {\n      key: 'updatedAt',\n      title: b3Lang('quotes.quoteItemCard.lastUpdate'),\n      render: () =>\n        `${Number(item.status) !== 0 ? displayFormat(Number(item.updatedAt)) : item.updatedAt}`,\n    },\n    {\n      key: 'expiredAt',\n      title: b3Lang('quotes.quoteItemCard.expirationDate'),\n      render: () =>\n        `${Number(item.status) !== 0 ? displayFormat(Number(item.expiredAt)) : item.expiredAt}`,\n    },\n    {\n      key: 'totalAmount',\n      title: b3Lang('quotes.quoteItemCard.subtotal'),\n      render: () => {\n        const { totalAmount } = item;\n\n        return currencyFormat(Number(totalAmount));\n      },\n    },\n  ];\n\n  return (\n    <Card>\n      <CardContent\n        sx={{\n          color: 'rgba(0, 0, 0, 0.6)',\n        }}\n      >\n        <Flex>\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              mb: '1rem',\n            }}\n          >\n            <Typography\n              variant=\"h6\"\n              sx={{\n                color: 'rgba(0, 0, 0, 0.87)',\n              }}\n            >\n              {item.quoteNumber}\n            </Typography>\n          </Box>\n          <Box>\n            <QuoteStatus code={item.status} />\n          </Box>\n        </Flex>\n\n        {columnAllItems.map((list: any) => (\n          <Box\n            key={list.key}\n            sx={{\n              display: 'flex',\n            }}\n          >\n            <Typography\n              sx={{\n                fontWeight: 'bold',\n                color: 'rgba(0, 0, 0, 0.87)',\n                mr: '5px',\n                whiteSpace: 'nowrap',\n              }}\n            >\n              {`${list.title}:`}\n            </Typography>\n            <Typography\n              sx={{\n                color: 'black',\n                wordBreak: 'break-all',\n              }}\n            >\n              {list?.render ? list.render() : item[list.key]}\n            </Typography>\n          </Box>\n        ))}\n\n        <Box\n          onClick={() => goToDetail(item, Number(item.status))}\n          sx={{\n            mt: '1rem',\n            pl: 0,\n            color: primaryColor || '#1976D2',\n            cursor: 'pointer',\n            fontWeight: 'bold',\n            display: 'inline-block',\n          }}\n        >\n          {b3Lang('quotes.quoteItemCard.view')}\n        </Box>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":["getAvailableFilters","draftQuoteListLength","customer","getQuotesList","companyB2BId","useAppSelector","company","companyInfo","id","isB2BUser","isB2BUserSelector","quoteInfo","draftQuoteList","length","salesRepCompanyId","b2bFeatures","masqueradeCompany","b3Lang","useB3Lang","companyId","params","getB2BQuotesList","channelId","getBCQuotesList","getFilters","name","label","required","default","fieldType","options","quotesStatuses","map","idLangCustomLabel","restQuoteStatuses","customLabel","replaceOptions","value","xs","variant","size","getB2BFilters","async","createdByUsers","getShoppingListsCreatedByUser","Number","newCreatedByUsers","createdByUser","results","createdBy","item","email","newCreatedBySalesReps","salesRep","salesRepEmail","useData","columns","useColumnList","initSearch","q","orderBy","sortKeys","defaultSortKey","status","dateCreatedBeginAt","dateCreatedEndAt","filterData","setFilterData","useState","isRequestLoading","setIsRequestLoading","filterMoreInfo","setFilterMoreInfo","handleSetOrderBy","order","useSort","navigate","useNavigate","isMobile","useMobile","state","openAPPParams","dispatch","useContext","GlobalContext","useEffect","then","filters","quoteBtn","type","payload","shoppingListBtn","goToDetail","createdAt","fetchList","useCallback","edges","totalCount","offset","summaryPrice","addPrice","quoteDraft","node","quoteNumber","quoteTitle","firstName","lastName","updatedAt","expiredAt","totalAmount","grandTotal","taxTotal","tax","showDraft","createdByUserRegArr","exec","trim","unshift","jsx","B3Spin","isSpinning","children","jsxs","Box","sx","display","flexDirection","flex","B3Filter","startPicker","isEnabled","defaultValue","pickerKey","endPicker","handleChange","key","handleFilterChange","search","startValue","endValue","B3PaginationTable","columnItems","rowsPerPageOptions","getRequestList","searchParams","isCustomRender","requestLoading","tableKey","sortDirection","sortByFn","labelRowsPerPage","renderItem","row","QuoteItemCard","onClickRow","hover","defaultSummary","subtotal","shipping","decimal_places","decimalPlaces","getActiveCurrencyInfo","priceCalc","price","parseFloat","toFixed","store","getState","showInclusiveTaxPrice","global","reduce","summary","product","basePrice","taxPrice","productTax","quantity","additionalCalculatedPrices","additionalCalculatedPriceTax","additionalCalculatedPrice","forEach","getBCPrice","Flex","styled","alignItems","marginBottom","props","theme","useTheme","primaryColor","palette","primary","main","columnAllItems","title","render","displayFormat","currencyFormat","Card","CardContent","color","mb","Typography","QuoteStatus","code","list","fontWeight","mr","whiteSpace","wordBreak","onClick","mt","pl","cursor","statusCode","useMemo","isSortable","currency","newCurrency","currencyFormatConvert","isConversionRate","useCurrentCurrency","style","textAlign"],"mappings":"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"}