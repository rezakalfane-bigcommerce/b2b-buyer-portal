{"version":3,"file":"index-legacy-CnSd8LU6.js","sources":["../../src/pages/AccountSetting/index.tsx","../../src/pages/AccountSetting/config.ts","../../src/pages/AccountSetting/utils.ts"],"sourcesContent":["import { useContext, useEffect, useMemo, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\nimport trim from 'lodash-es/trim';\n\nimport { B3CustomForm } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\nimport { b3HexToRgb, getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { useMobile } from '@/hooks';\nimport useStorageState from '@/hooks/useStorageState';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport {\n  checkUserBCEmail,\n  checkUserEmail,\n  getB2BAccountFormFields,\n  getB2BAccountSettings,\n  getBCAccountSettings,\n  updateB2BAccountSettings,\n  updateBCAccountSettings,\n} from '@/shared/service/b2b';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { Fields, ParamProps } from '@/types/accountSetting';\nimport { B3SStorage, channelId, snackbar } from '@/utils';\n\nimport { deCodeField, getAccountFormFields } from '../Registered/config';\n\nimport { getAccountSettingsFields, getPasswordModifiedFields } from './config';\nimport { b2bSubmitDataProcessing, bcSubmitDataProcessing, initB2BInfo, initBcInfo } from './utils';\n\nfunction useData() {\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyInfoId = useAppSelector(({ company }) => company.companyInfo.id);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const companyId = role === 3 && isAgenting ? Number(salesRepCompanyId) : Number(companyInfoId);\n  const isBCUser = !isB2BUser || (role === 3 && !isAgenting);\n\n  const validateEmailValue = async (emailValue: string) => {\n    if (customer.emailAddress === trim(emailValue)) return true;\n    const payload = {\n      email: emailValue,\n      channelId,\n    };\n\n    const { isValid }: { isValid: boolean } = isBCUser\n      ? await checkUserBCEmail(payload)\n      : await checkUserEmail(payload);\n\n    return isValid;\n  };\n\n  const emailValidation = (data: Partial<ParamProps>) => {\n    if (data.email !== customer.emailAddress && !data.currentPassword) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const passwordValidation = (data: Partial<ParamProps>) => {\n    if (data.password !== data.confirmPassword) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return { isBCUser, companyId, customer, validateEmailValue, emailValidation, passwordValidation };\n}\n\nfunction AccountSetting() {\n  const { isBCUser, companyId, customer, validateEmailValue, emailValidation, passwordValidation } =\n    useData();\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setValue,\n    setError,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const [isFinishUpdate, setIsFinishUpdate] = useStorageState<boolean>(\n    'sf-isFinishUpdate',\n    false,\n    sessionStorage,\n  );\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const b3Lang = useB3Lang();\n\n  const [isMobile] = useMobile();\n\n  const navigate = useNavigate();\n\n  const [accountInfoFormFields, setAccountInfoFormFields] = useState<Partial<Fields>[]>([]);\n  const [decryptionFields, setDecryptionFields] = useState<Partial<Fields>[]>([]);\n  const [extraFields, setExtraFields] = useState<Partial<Fields>[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [accountSettings, setAccountSettings] = useState<any>({});\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        setLoading(true);\n\n        const fn = isBCUser ? getBCAccountSettings : getB2BAccountSettings;\n\n        const params = isBCUser\n          ? {}\n          : {\n              companyId,\n            };\n\n        const key = isBCUser ? 'customerAccountSettings' : 'accountSettings';\n\n        const accountFormAllFields = await getB2BAccountFormFields(isBCUser ? 1 : 2);\n        const accountFormFields = getAccountFormFields(\n          accountFormAllFields.accountFormFields || [],\n        );\n\n        const contactInformation = (accountFormFields?.contactInformation || []).filter(\n          (item: Partial<Fields>) => item.fieldId !== 'field_email_marketing_newsletter',\n        );\n\n        const { additionalInformation = [] } = accountFormFields;\n\n        const { [key]: accountSettings } = await fn(params);\n\n        const fields = isBCUser\n          ? initBcInfo(accountSettings, contactInformation, additionalInformation)\n          : initB2BInfo(\n              accountSettings,\n              contactInformation,\n              getAccountSettingsFields(),\n              additionalInformation,\n            );\n\n        const passwordModifiedFields = getPasswordModifiedFields();\n\n        const all = [...fields, ...passwordModifiedFields];\n\n        const roleItem = all.find((item) => item.name === 'role');\n\n        if (roleItem?.fieldType) roleItem.fieldType = 'text';\n\n        setAccountInfoFormFields(all);\n\n        setAccountSettings(accountSettings);\n\n        setDecryptionFields(contactInformation);\n\n        setExtraFields(additionalInformation);\n      } finally {\n        if (isFinishUpdate) {\n          snackbar.success(b3Lang('accountSettings.notification.detailsUpdated'));\n          setIsFinishUpdate(false);\n        }\n        setLoading(false);\n        setIsVisible(true);\n      }\n    };\n\n    init();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleGetUserExtraFields = (\n    data: CustomFieldItems,\n    accountInfoFormFields: Partial<Fields>[],\n  ) => {\n    const userExtraFields = accountInfoFormFields.filter(\n      (item: CustomFieldItems) => item.custom && item.groupId === 1,\n    );\n    return userExtraFields.map((item: CustomFieldItems) => ({\n      fieldName: deCodeField(item?.name || ''),\n      fieldValue: data[item.name],\n    }));\n  };\n\n  const handleAddUserClick = () => {\n    handleSubmit(async (data: CustomFieldItems) => {\n      setLoading(true);\n\n      try {\n        const isValid = await validateEmailValue(data.email);\n\n        if (!isValid) {\n          setError('email', {\n            type: 'custom',\n            message: b3Lang('accountSettings.notification.emailExists'),\n          });\n        }\n\n        const emailFlag = emailValidation(data);\n\n        if (!emailFlag) {\n          snackbar.error(b3Lang('accountSettings.notification.updateEmailPassword'));\n        }\n\n        const passwordFlag = passwordValidation(data);\n\n        if (!passwordFlag) {\n          setError('confirmPassword', {\n            type: 'manual',\n            message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n          });\n          setError('password', {\n            type: 'manual',\n            message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n          });\n        }\n\n        if (isValid && emailFlag && passwordFlag) {\n          const dataProcessingFn = isBCUser ? bcSubmitDataProcessing : b2bSubmitDataProcessing;\n          const payload = dataProcessingFn(data, accountSettings, decryptionFields, extraFields);\n\n          if (payload) {\n            if (!isBCUser) {\n              payload.companyId = companyId;\n              payload.extraFields = handleGetUserExtraFields(data, accountInfoFormFields);\n            }\n\n            if (payload.newPassword === '' && payload.confirmPassword === '') {\n              delete payload.newPassword;\n              delete payload.confirmPassword;\n            }\n          }\n\n          if (!payload) {\n            snackbar.success(b3Lang('accountSettings.notification.noEdits'));\n            return;\n          }\n\n          const requestFn = isBCUser ? updateBCAccountSettings : updateB2BAccountSettings;\n          await requestFn(payload);\n\n          if (\n            (data.password && data.currentPassword) ||\n            customer.emailAddress !== trim(data.email)\n          ) {\n            navigate('/login?loginFlag=loggedOutLogin');\n          } else {\n            B3SStorage.clear();\n            setIsFinishUpdate(true);\n            window.location.reload();\n          }\n        }\n      } finally {\n        setLoading(false);\n      }\n    })();\n  };\n\n  const translatedFields = useMemo(() => {\n    const fieldTranslations: Record<string, string> = {\n      field_first_name: b3Lang('accountSettings.form.firstName'),\n      field_last_name: b3Lang('accountSettings.form.lastName'),\n      field_email: b3Lang('accountSettings.form.email'),\n      field_phone_number: b3Lang('accountSettings.form.phoneNumber'),\n      field_company: b3Lang('accountSettings.form.company'),\n      field_role: b3Lang('accountSettings.form.role'),\n      field_current_password: b3Lang('accountSettings.form.currentPassword'),\n      field_password: b3Lang('accountSettings.form.password'),\n      field_confirm_password: b3Lang('accountSettings.form.confirmPassword'),\n    };\n\n    return accountInfoFormFields.map((item) => ({\n      ...item,\n      label: fieldTranslations[item.fieldId ?? ''] ?? item.label,\n    }));\n  }, [accountInfoFormFields, b3Lang]);\n\n  return (\n    <B3Spin isSpinning={isLoading} background={backgroundColor}>\n      <Box\n        sx={{\n          width: isMobile ? '100%' : '35%',\n          minHeight: isMobile ? '800px' : '300px',\n          '& input, & .MuiFormControl-root .MuiTextField-root, & .MuiSelect-select.MuiSelect-filled, & .MuiTextField-root .MuiInputBase-multiline':\n            {\n              bgcolor: b3HexToRgb('#FFFFFF', 0.87),\n              borderRadius: '4px',\n              borderBottomLeftRadius: '0',\n              borderBottomRightRadius: '0',\n            },\n          '& .MuiButtonBase-root.MuiCheckbox-root:not(.Mui-checked), & .MuiRadio-root:not(.Mui-checked)':\n            {\n              color: b3HexToRgb(getContrastColor(backgroundColor), 0.6),\n            },\n          '& .MuiTypography-root.MuiTypography-body1.MuiFormControlLabel-label, & .MuiFormControl-root .MuiFormLabel-root:not(.Mui-focused)':\n            {\n              color: b3HexToRgb(getContrastColor(backgroundColor), 0.87),\n            },\n          '& .MuiInputLabel-root.MuiInputLabel-formControl:not(.Mui-focused)': {\n            color: b3HexToRgb(getContrastColor('#FFFFFF'), 0.6),\n          },\n        }}\n      >\n        <B3CustomForm\n          formFields={translatedFields}\n          errors={errors}\n          control={control}\n          getValues={getValues}\n          setValue={setValue}\n        />\n\n        <CustomButton\n          sx={{\n            mt: '28px',\n            mb: isMobile ? '20px' : '0',\n            width: '100%',\n            visibility: isVisible ? 'visible' : 'hidden',\n          }}\n          onClick={handleAddUserClick}\n          variant=\"contained\"\n        >\n          {b3Lang('accountSettings.button.saveUpdates')}\n        </CustomButton>\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default AccountSetting;\n","export interface GetFilterMoreListProps {\n  fieldId: string;\n  rows?: string | number;\n  name: string;\n  label: string;\n  required: boolean;\n  default: string;\n  fieldType: string;\n  xs: number;\n  variant: string;\n  size: string;\n}\n\nexport const getAccountSettingsFields = (): GetFilterMoreListProps[] => {\n  return [\n    {\n      name: 'company',\n      fieldId: 'field_company',\n      label: 'Company',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'role',\n      fieldId: 'field_role',\n      label: 'Role',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n};\n\nexport const getPasswordModifiedFields = (): GetFilterMoreListProps[] => {\n  return [\n    {\n      name: 'currentPassword',\n      fieldId: 'field_current_password',\n      label: 'Current Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'password',\n      fieldId: 'field_password',\n      label: 'Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'confirmPassword',\n      fieldId: 'field_confirm_password',\n      label: 'Confirm Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n};\n","import Cookies from 'js-cookie';\n\nimport { Fields, ParamProps } from '@/types/accountSetting';\nimport { validatorRules } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport { BigCommerceStorefrontAPIBaseURL } from '@/utils/basicConfig';\n\nimport { deCodeField } from '../Registered/config';\n\nfunction sendUpdateAccountRequest(data: string): Promise<string> {\n  const requestOptions: RequestInit = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: data,\n    mode: 'cors',\n    credentials: 'include',\n  };\n\n  return fetch(\n    `${BigCommerceStorefrontAPIBaseURL}/account.php?action=update_account`,\n    requestOptions,\n  )\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.text();\n    })\n    .then((responseData) => responseData);\n}\n\nconst getXsrfToken = (): string | undefined => {\n  const token = Cookies.get('XSRF-TOKEN');\n\n  if (!token) {\n    return undefined;\n  }\n\n  return decodeURIComponent(token);\n};\n\n// Password and email Change Send emails\nfunction sendEmail(data: any, extraFields: any) {\n  return new Promise<boolean>((resolve, reject) => {\n    const { email, confirmPassword, newPassword, currentPassword } = data;\n\n    const requiredCustomFields =\n      extraFields.filter((item: CustomFieldItems) => item.required && item.custom) || [];\n    const formData = new URLSearchParams();\n    const token = getXsrfToken() || '';\n    formData.append('FormField[1][1]', email);\n    formData.append('FormField[1][24]', currentPassword);\n    formData.append('FormField[1][2]', newPassword);\n    formData.append('FormField[1][3]', confirmPassword);\n    formData.append('authenticity_token', token);\n\n    // extra\n    if (requiredCustomFields.length) {\n      requiredCustomFields.forEach((item: Partial<Fields>) => {\n        if (item.name?.includes('_')) {\n          const key = item.name?.split('_')[1];\n          const { formFields } = data;\n          const val = formFields.find(\n            (field: Partial<Fields>) => field.name === item.bcLabel,\n          ).value;\n          if (item.type === 'date') {\n            const time = val.split('-');\n            if (!val && time.length !== 3) return;\n            const [year, month, day] = time;\n            formData.append(`FormFieldYear[1][${key}]`, year);\n            formData.append(`FormFieldMonth[1][${key}]`, month);\n            formData.append(`FormFieldDay[1][${key}]`, day);\n          } else {\n            formData.append(`FormField[1][${key}]`, val);\n          }\n        }\n      });\n    }\n\n    const requestBody: string = formData.toString();\n\n    sendUpdateAccountRequest(requestBody)\n      .then((response) => {\n        const isFlag = response.includes('alertBox--error');\n        resolve(!isFlag);\n      })\n      .catch((error) => {\n        b2bLogger.error('Error:', error);\n        reject();\n      });\n  });\n}\n\nconst emailValidate = validatorRules(['email']);\n\nexport const initB2BInfo = (\n  accountSettings: any,\n  contactInformation: Partial<Fields>[],\n  accountB2BFormFields: Partial<Fields>[],\n  additionalInformation: Partial<Fields>[],\n) => {\n  const extraFields = accountSettings?.extraFields || [];\n  contactInformation.forEach((item: Partial<Fields>) => {\n    const contactItem = item;\n    if (deCodeField(item?.name || '') === 'first_name') {\n      contactItem.default = accountSettings.firstName;\n    }\n    if (deCodeField(item?.name || '') === 'last_name') {\n      contactItem.default = accountSettings.lastName;\n    }\n    if (deCodeField(item?.name || '') === 'phone') {\n      contactItem.default = accountSettings.phoneNumber;\n    }\n    if (deCodeField(item?.name || '') === 'email') {\n      contactItem.default = accountSettings.email;\n      contactItem.validate = emailValidate;\n    }\n  });\n\n  if (extraFields.length > 0) {\n    extraFields.forEach((field: CustomFieldItems) => {\n      const extraField = field;\n\n      const currentField = contactInformation.find(\n        (item) => deCodeField(item?.name || '') === extraField.fieldName,\n      );\n\n      if (currentField) {\n        currentField.default = extraField.fieldValue;\n      }\n    });\n  }\n\n  accountB2BFormFields.forEach((item: Partial<Fields>) => {\n    const formField = item;\n    if (item.name === 'role') {\n      formField.default = accountSettings.companyRoleName;\n      formField.disabled = true;\n    } else if (item.name === 'company') {\n      formField.default = accountSettings.company;\n      formField.disabled = true;\n    }\n  });\n\n  additionalInformation.forEach((item: Partial<Fields>) => {\n    const formFields = (accountSettings?.formFields || []).find(\n      (field: Partial<Fields>) => field.name === item.bcLabel,\n    );\n    const infoItem = item;\n    if (formFields) infoItem.default = formFields.value;\n  });\n\n  return [...contactInformation, ...accountB2BFormFields, ...additionalInformation];\n};\n\nexport const initBcInfo = (\n  accountSettings: any,\n  contactInformation: Partial<Fields>[],\n  additionalInformation: Partial<Fields>[],\n) => {\n  contactInformation.forEach((item: Partial<Fields>) => {\n    const contactInfoItem = item;\n    if (deCodeField(item?.name || '') === 'first_name') {\n      contactInfoItem.default = accountSettings.firstName;\n    }\n    if (deCodeField(item?.name || '') === 'last_name') {\n      contactInfoItem.default = accountSettings.lastName;\n    }\n    if (deCodeField(item?.name || '') === 'phone') {\n      contactInfoItem.default = accountSettings.phoneNumber;\n    }\n    if (deCodeField(item?.name || '') === 'email') {\n      contactInfoItem.default = accountSettings.email;\n      contactInfoItem.validate = emailValidate;\n    }\n    if (deCodeField(item?.name || '') === 'company') {\n      contactInfoItem.default = accountSettings.company;\n    }\n  });\n\n  additionalInformation.forEach((item: Partial<Fields>) => {\n    const formFields = (accountSettings?.formFields || []).find(\n      (field: Partial<Fields>) => field.name === item.bcLabel,\n    );\n    const infoItem = item;\n    if (formFields) infoItem.default = formFields.value;\n  });\n\n  return [...contactInformation, ...additionalInformation];\n};\n\nexport const b2bSubmitDataProcessing = (\n  data: CustomFieldItems,\n  accountSettings: any,\n  decryptionFields: Partial<Fields>[],\n  extraFields: Partial<Fields>[],\n) => {\n  const userExtraFields = accountSettings?.extraFields || [];\n\n  const param: Partial<ParamProps> = {};\n  param.formFields = [];\n  let pristine = true;\n  let flag = true;\n  let useExtraFieldsFlag = false;\n\n  Object.keys(data).forEach((key: string) => {\n    decryptionFields.forEach((item: Partial<Fields>) => {\n      if (key === item.name) {\n        flag = false;\n        if (deCodeField(item.name) === 'first_name') {\n          if (accountSettings.firstName !== data[item.name]) pristine = false;\n          param.firstName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'last_name') {\n          if (accountSettings.lastName !== data[item.name]) pristine = false;\n          param.lastName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'phone') {\n          if (accountSettings.phoneNumber !== data[item.name]) pristine = false;\n          param.phoneNumber = data[item.name];\n        }\n        if (deCodeField(item.name) === 'email') {\n          if (accountSettings.email !== data[item.name]) pristine = false;\n          param.email = data[item.name];\n        }\n        if (item.custom) {\n          const currentField = userExtraFields.find(\n            (field: CustomFieldItems) => field.fieldName === deCodeField(item?.name || ''),\n          );\n          if (currentField?.fieldValue !== data[item.name]) useExtraFieldsFlag = true;\n        }\n      }\n    });\n    if (useExtraFieldsFlag) {\n      pristine = false;\n    }\n\n    if (flag) {\n      extraFields.forEach((field: Partial<Fields>) => {\n        if (field.fieldId === key && param?.formFields) {\n          const { name } = field;\n          param.formFields.push({\n            name: field?.bcLabel || '',\n            value: data[key],\n          });\n          flag = false;\n          const account = (accountSettings?.formFields || []).find(\n            (formField: Partial<Fields>) => formField.name === field.bcLabel,\n          );\n          if (account && JSON.stringify(account.value) !== JSON.stringify(data[key])) {\n            pristine = false;\n          }\n\n          if (!accountSettings?.formFields?.length && name && !!data[name]) {\n            pristine = false;\n          }\n        }\n      });\n    }\n    if (flag) {\n      if (key === 'password') {\n        param.newPassword = data[key];\n        if (data[key]) pristine = false;\n      } else {\n        param[key] = data[key];\n      }\n    }\n    flag = true;\n  });\n\n  delete param.company;\n\n  delete param.role;\n\n  if (pristine) {\n    return undefined;\n  }\n\n  return param;\n};\n\nexport const bcSubmitDataProcessing = (\n  data: CustomFieldItems,\n  accountSettings: any,\n  decryptionFields: Partial<Fields>[],\n  extraFields: Partial<Fields>[],\n) => {\n  const param: Partial<ParamProps> = {};\n  param.formFields = [];\n  let pristine = true;\n  let flag = true;\n  Object.keys(data).forEach((key: string) => {\n    decryptionFields.forEach((item: Partial<Fields>) => {\n      if (key === item.name) {\n        flag = false;\n        if (deCodeField(item.name) === 'first_name') {\n          if (accountSettings.firstName !== data[item.name]) pristine = false;\n          param.firstName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'last_name') {\n          if (accountSettings.lastName !== data[item.name]) pristine = false;\n          param.lastName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'phone') {\n          if (accountSettings.phoneNumber !== data[item.name]) pristine = false;\n          param.phoneNumber = data[item.name];\n        }\n        if (deCodeField(item.name) === 'email') {\n          if (accountSettings.email !== data[item.name]) pristine = false;\n          param.email = data[item.name];\n        }\n        if (deCodeField(item.name) === 'company') {\n          if (accountSettings.company !== data[item.name]) pristine = false;\n          param.company = data[item.name];\n        }\n      }\n    });\n\n    if (flag) {\n      extraFields.forEach((field: Partial<Fields>) => {\n        if (field.fieldId === key && param?.formFields) {\n          param.formFields.push({\n            name: field?.bcLabel || '',\n            value: data[key],\n          });\n          flag = false;\n          const account = (accountSettings?.formFields || []).find(\n            (formField: Partial<Fields>) => formField.name === field.bcLabel,\n          );\n          if (account && JSON.stringify(account.value) !== JSON.stringify(data[key]))\n            pristine = false;\n        }\n      });\n    }\n\n    if (flag) {\n      if (key === 'password') {\n        param.newPassword = data[key];\n        if (data[key]) pristine = false;\n      } else {\n        param[key] = data[key];\n      }\n    }\n    flag = true;\n  });\n\n  if (pristine) {\n    return undefined;\n  }\n\n  return param;\n};\n\nexport default sendEmail;\n"],"names":["isBCUser","companyId","customer","validateEmailValue","emailValidation","passwordValidation","isB2BUser","useAppSelector","isB2BUserSelector","companyInfoId","company","companyInfo","id","role","salesRepCompanyId","b2bFeatures","masqueradeCompany","isAgenting","Number","async","emailAddress","trim","emailValue","payload","email","channelId","isValid","checkUserBCEmail","checkUserEmail","data","currentPassword","password","confirmPassword","useData","control","handleSubmit","getValues","formState","errors","setValue","setError","useForm","mode","isFinishUpdate","setIsFinishUpdate","useStorageState","sessionStorage","state","portalStyle","backgroundColor","useContext","CustomStyleContext","b3Lang","useB3Lang","isMobile","useMobile","navigate","useNavigate","accountInfoFormFields","setAccountInfoFormFields","useState","decryptionFields","setDecryptionFields","extraFields","setExtraFields","isLoading","setLoading","accountSettings","setAccountSettings","isVisible","setIsVisible","useEffect","fn","getBCAccountSettings","getB2BAccountSettings","params","key","accountFormAllFields","getB2BAccountFormFields","accountFormFields","getAccountFormFields","contactInformation","filter","item","fieldId","additionalInformation","fields","initBcInfo","initB2BInfo","getAccountSettingsFields","passwordModifiedFields","getPasswordModifiedFields","all","roleItem","find","name","fieldType","snackbar","success","init","translatedFields","useMemo","fieldTranslations","field_first_name","field_last_name","field_email","field_phone_number","field_company","field_role","field_current_password","field_password","field_confirm_password","map","label","jsx","B3Spin","isSpinning","background","children","jsxs","Box","sx","width","minHeight","bgcolor","b3HexToRgb","borderRadius","borderBottomLeftRadius","borderBottomRightRadius","color","getContrastColor","B3CustomForm","formFields","CustomButton","mt","mb","visibility","onClick","handleAddUserClick","type","message","emailFlag","error","passwordFlag","bcSubmitDataProcessing","b2bSubmitDataProcessing","handleGetUserExtraFields","custom","groupId","fieldName","deCodeField","fieldValue","newPassword","requestFn","updateBCAccountSettings","updateB2BAccountSettings","B3SStorage","clear","window","location","reload","variant","required","default","xs","size","emailValidate","validatorRules","accountB2BFormFields","forEach","contactItem","firstName","lastName","phoneNumber","validate","length","field","extraField","currentField","formField","companyRoleName","disabled","bcLabel","value","contactInfoItem","userExtraFields","param","pristine","flag","useExtraFieldsFlag","Object","keys","push","account","JSON","stringify"],"mappings":"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"}