{"version":3,"file":"index-legacy-CqgI6zeo.js","sources":["../../src/pages/Address/index.tsx","../../src/pages/Address/components/AddressForm.tsx","../../src/pages/Address/components/AddressItemCard.tsx","../../src/pages/Address/components/DeleteAddressDialog.tsx","../../src/pages/Address/components/SetDefaultDialog.tsx","../../src/pages/Address/shared/getAddressFields.ts"],"sourcesContent":["import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\n\nimport B3Filter from '@/components/filter/B3Filter';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { B3PaginationTable, GetRequestList } from '@/components/table/B3PaginationTable';\nimport { useCardListColumn, useTableRef, useVerifyCreatePermission } from '@/hooks';\nimport { GlobalContext } from '@/shared/global';\nimport {\n  getB2BAddress,\n  getB2BAddressConfig,\n  getB2BCountries,\n  getBCCustomerAddress,\n} from '@/shared/service/b2b';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { CustomerRole } from '@/types';\nimport { b2bPermissionsMap, snackbar } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport { AddressConfigItem, AddressItemType, BCAddressItemType } from '../../types/address';\n\nimport B3AddressForm from './components/AddressForm';\nimport { AddressItemCard } from './components/AddressItemCard';\nimport DeleteAddressDialog from './components/DeleteAddressDialog';\nimport SetDefaultDialog from './components/SetDefaultDialog';\nimport { convertBCToB2BAddress, filterFormConfig } from './shared/config';\nimport { CountryProps, getAddressFields } from './shared/getAddressFields';\n\nconst permissionKeys = [\n  b2bPermissionsMap.addressesCreateActionsPermission,\n  b2bPermissionsMap.addressesUpdateActionsPermission,\n  b2bPermissionsMap.addressesDeleteActionsPermission,\n];\ninterface RefCurrentProps extends HTMLInputElement {\n  handleOpenAddEditAddressClick: (type: string, data?: AddressItemType) => void;\n}\n\ntype BCAddress = {\n  node: BCAddressItemType;\n};\n\ninterface FilterSearchProps {\n  country?: string;\n  state?: string;\n  city?: string;\n  search?: string;\n}\n\nfunction Address() {\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyInfoId = useAppSelector(({ company }) => company.companyInfo.id);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const {\n    state: { addressConfig },\n    dispatch,\n  } = useContext(GlobalContext);\n\n  const { selectCompanyHierarchyId } = useAppSelector(\n    ({ company }) => company.companyHierarchyInfo,\n  );\n\n  const b3Lang = useB3Lang();\n  const isExtraLarge = useCardListColumn();\n  const [paginationTableRef] = useTableRef();\n\n  const addEditAddressRef = useRef<RefCurrentProps | null>(null);\n\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n  const [addressFields, setAddressFields] = useState<CustomFieldItems[]>([]);\n  const [countries, setCountries] = useState<CountryProps[]>([]);\n  const [filterData, setFilterData] = useState<Partial<FilterSearchProps>>({\n    search: '',\n  });\n\n  const companyId =\n    role === CustomerRole.SUPER_ADMIN && isAgenting ? salesRepCompanyId : companyInfoId;\n\n  let isBCPermission = false;\n\n  if (!isB2BUser || (role === CustomerRole.SUPER_ADMIN && !isAgenting)) {\n    isBCPermission = true;\n  }\n\n  useEffect(() => {\n    const handleGetAddressFields = async () => {\n      const { countries } = await getB2BCountries();\n\n      setCountries(countries);\n      setIsRequestLoading(true);\n      try {\n        const addressFields = await getAddressFields(!isBCPermission, countries);\n        setAddressFields(addressFields || []);\n      } catch (err) {\n        b2bLogger.error(err);\n      } finally {\n        setIsRequestLoading(false);\n      }\n    };\n\n    handleGetAddressFields();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const defaultParams: FilterSearchProps = {};\n  const getAddressList: GetRequestList<FilterSearchProps, AddressItemType> = async (\n    params = defaultParams,\n  ) => {\n    let list = [];\n    let count = 0;\n\n    if (!isBCPermission) {\n      const {\n        addresses: { edges: addressList = [], totalCount },\n      } = await getB2BAddress({\n        companyId,\n        ...params,\n      });\n\n      list = addressList;\n      count = totalCount;\n    } else {\n      const {\n        customerAddresses: { edges: addressList = [], totalCount },\n      } = await getBCCustomerAddress({\n        ...params,\n      });\n\n      list = addressList.map((address: BCAddress) => ({\n        node: convertBCToB2BAddress(address.node),\n      }));\n      count = totalCount;\n    }\n\n    return {\n      edges: list,\n      totalCount: count,\n    };\n  };\n\n  const handleChange = (key: string, value: string) => {\n    if (key === 'search') {\n      setFilterData({\n        ...filterData,\n        search: value,\n      });\n    }\n  };\n  const handleFilterChange = (values: FilterSearchProps) => {\n    setFilterData({\n      ...filterData,\n      country: values.country || '',\n      state: values.state || '',\n      city: values.city || '',\n    });\n  };\n\n  const updateAddressList = () => {\n    paginationTableRef.current?.refresh();\n  };\n\n  const [editPermission, setEditPermission] = useState(false);\n  const [isOpenSetDefault, setIsOpenSetDefault] = useState(false);\n  const [isOpenDelete, setIsOpenDelete] = useState(false);\n  const [currentAddress, setCurrentAddress] = useState<AddressItemType>();\n\n  const [isCreatePermission, updateActionsPermission, deleteActionsPermission] =\n    useVerifyCreatePermission(permissionKeys);\n\n  useEffect(() => {\n    const getEditPermission = async () => {\n      if (isBCPermission) {\n        setEditPermission(true);\n        return;\n      }\n\n      if (updateActionsPermission) {\n        try {\n          let configList = addressConfig;\n          if (!configList) {\n            const { addressConfig: newConfig } = await getB2BAddressConfig();\n            configList = newConfig;\n\n            dispatch({\n              type: 'common',\n              payload: {\n                addressConfig: configList,\n              },\n            });\n          }\n\n          const key = role === 3 ? 'address_sales_rep' : 'address_admin';\n\n          const editPermission =\n            (configList || []).find((config: AddressConfigItem) => config.key === 'address_book')\n              ?.isEnabled === '1' &&\n            (configList || []).find((config: AddressConfigItem) => config.key === key)\n              ?.isEnabled === '1';\n\n          setEditPermission(editPermission);\n        } catch (error) {\n          b2bLogger.error(error);\n        }\n      }\n    };\n    getEditPermission();\n    // Disabling the next line as dispatch is not required to be in the dependency array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addressConfig, updateActionsPermission, isBCPermission, role, selectCompanyHierarchyId]);\n\n  const handleCreate = () => {\n    if (!editPermission) {\n      snackbar.error(b3Lang('addresses.noPermissionToAdd'));\n      return;\n    }\n    addEditAddressRef.current?.handleOpenAddEditAddressClick('add');\n  };\n\n  const handleEdit = (row: AddressItemType) => {\n    if (!editPermission) {\n      snackbar.error(b3Lang('addresses.noPermissionToEdit'));\n      return;\n    }\n    addEditAddressRef.current?.handleOpenAddEditAddressClick('edit', row);\n  };\n\n  const handleDelete = (address: AddressItemType) => {\n    if (!editPermission) {\n      snackbar.error(b3Lang('addresses.noPermissionToEdit'));\n      return;\n    }\n    setCurrentAddress({\n      ...address,\n    });\n    setIsOpenDelete(true);\n  };\n\n  const handleSetDefault = (address: AddressItemType) => {\n    setCurrentAddress({\n      ...address,\n    });\n    setIsOpenSetDefault(true);\n  };\n\n  const AddButtonConfig = useMemo(() => {\n    return {\n      isEnabled: isBCPermission || (editPermission && isCreatePermission),\n      customLabel: b3Lang('addresses.addNewAddress'),\n    };\n\n    // ignore b3Lang due it's function that doesn't not depend on any reactive value\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editPermission, selectCompanyHierarchyId, isCreatePermission]);\n\n  const translatedFilterFormConfig = JSON.parse(JSON.stringify(filterFormConfig));\n\n  translatedFilterFormConfig.map((element: { label: string; idLang: any }) => {\n    const item = element;\n    item.label = b3Lang(element.idLang);\n\n    return element;\n  });\n\n  const currentUseCompanyHierarchyId = Number(selectCompanyHierarchyId) || Number(companyId);\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n        }}\n      >\n        <B3Filter\n          filterMoreInfo={translatedFilterFormConfig}\n          handleChange={handleChange}\n          handleFilterChange={handleFilterChange}\n          customButtonConfig={AddButtonConfig}\n          handleFilterCustomButtonClick={handleCreate}\n        />\n        <B3PaginationTable\n          ref={paginationTableRef}\n          columnItems={[]}\n          rowsPerPageOptions={[12, 24, 36]}\n          getRequestList={getAddressList}\n          searchParams={filterData}\n          isCustomRender\n          itemXs={isExtraLarge ? 3 : 4}\n          requestLoading={setIsRequestLoading}\n          tableKey=\"id\"\n          renderItem={(row) => (\n            <AddressItemCard\n              key={row.id}\n              item={row}\n              onEdit={() => handleEdit(row)}\n              onDelete={handleDelete}\n              onSetDefault={handleSetDefault}\n              editPermission={editPermission}\n              updateActionsPermission={updateActionsPermission}\n              deleteActionsPermission={deleteActionsPermission}\n              isBCPermission={isBCPermission}\n            />\n          )}\n        />\n        <B3AddressForm\n          updateAddressList={updateAddressList}\n          addressFields={addressFields}\n          ref={addEditAddressRef}\n          companyId={currentUseCompanyHierarchyId}\n          isBCPermission={isBCPermission}\n          countries={countries}\n        />\n\n        {editPermission && !isBCPermission && (\n          <SetDefaultDialog\n            isOpen={isOpenSetDefault}\n            setIsOpen={setIsOpenSetDefault}\n            setIsLoading={setIsRequestLoading}\n            addressData={currentAddress}\n            updateAddressList={updateAddressList}\n            companyId={currentUseCompanyHierarchyId}\n          />\n        )}\n        {editPermission && (\n          <DeleteAddressDialog\n            isOpen={isOpenDelete}\n            setIsOpen={setIsOpenDelete}\n            setIsLoading={setIsRequestLoading}\n            addressData={currentAddress}\n            updateAddressList={updateAddressList}\n            companyId={currentUseCompanyHierarchyId}\n            isBCPermission={isBCPermission}\n          />\n        )}\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default Address;\n","import { forwardRef, Ref, useCallback, useEffect, useImperativeHandle, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useB3Lang } from '@b3/lang';\nimport { Checkbox, FormControlLabel, styled } from '@mui/material';\nimport cloneDeep from 'lodash-es/cloneDeep';\n\nimport { B3CustomForm } from '@/components';\nimport B3Dialog from '@/components/B3Dialog';\nimport {\n  createB2BAddress,\n  createBcAddress,\n  updateB2BAddress,\n  updateBcAddress,\n  validateAddressExtraFields,\n} from '@/shared/service/b2b';\nimport { snackbar } from '@/utils';\n\nimport { AddressItemType } from '../../../types/address';\nimport { deCodeField } from '../../Registered/config';\nimport { b2bShippingBilling, B2bShippingBillingProps } from '../shared/config';\nimport { CountryProps, StateProps } from '../shared/getAddressFields';\n\ninterface AddressFormProps {\n  addressFields: CustomFieldItems[];\n  updateAddressList: (isFirst?: boolean) => void;\n  companyId: string | number;\n  isBCPermission: boolean;\n  countries: CountryProps[];\n}\n\ninterface ShippingBillingProps {\n  isShipping: boolean;\n  isBilling: boolean;\n  isDefaultShipping: boolean;\n  isDefaultBilling: boolean;\n  [key: string]: boolean;\n}\n\nconst StyledCheckbox = styled('div')(() => ({\n  display: 'flex',\n\n  '& div::first-of-type': {\n    marginRight: '2rem',\n  },\n\n  '& div': {\n    minWidth: '45%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n}));\n\nfunction AddressForm(\n  { addressFields, updateAddressList, companyId, isBCPermission, countries }: AddressFormProps,\n  ref: Ref<unknown> | undefined,\n) {\n  const b3Lang = useB3Lang();\n  const [open, setOpen] = useState<boolean>(false);\n  const [type, setType] = useState<string>('');\n  const [isInitialized, setIsInitialized] = useState<boolean>(false);\n  const [addUpdateLoading, setAddUpdateLoading] = useState<boolean>(false);\n  const [allAddressFields, setAllAddressFields] = useState<CustomFieldItems[]>(addressFields);\n  const [addressExtraFields, setAddressExtraFields] = useState<CustomFieldItems>([]);\n  const [originAddressFields, setOriginAddressFields] = useState<CustomFieldItems>([]);\n  const [addressData, setAddressData] = useState<AddressItemType | null>(null);\n  const [shippingBilling, setShippingBilling] = useState<ShippingBillingProps>({\n    isShipping: false,\n    isBilling: false,\n    isDefaultShipping: false,\n    isDefaultBilling: false,\n  });\n\n  const isB2BUser = !isBCPermission;\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    watch,\n    setError,\n    setValue,\n    reset,\n  } = useForm({\n    mode: 'all',\n  });\n\n  const validateCompanyExtraFieldsUnique = async (data: CustomFieldItems) => {\n    try {\n      const extraFields = addressExtraFields.map((field: CustomFieldItems) => ({\n        fieldName: deCodeField(field.name),\n        fieldValue: data[field.name] || field.default,\n      }));\n\n      const res = await validateAddressExtraFields({\n        extraFields,\n      });\n\n      if (res.code !== 200) {\n        const message = res.data?.errMsg || res.message || '';\n\n        const messageArr = message.split(':');\n\n        if (messageArr.length >= 2) {\n          const field = addressExtraFields.find(\n            (field: CustomFieldItems) => deCodeField(field.name) === messageArr[0],\n          );\n          if (field) {\n            setError(field.name, {\n              type: 'manual',\n              message: messageArr[1],\n            });\n            setAddUpdateLoading(false);\n            return false;\n          }\n        }\n        throw message;\n      }\n\n      return true;\n    } catch (error: any) {\n      snackbar.error(error);\n      throw error;\n    }\n  };\n\n  const handleCancelClick = () => {\n    reset();\n    setShippingBilling({\n      isShipping: false,\n      isBilling: false,\n      isDefaultShipping: false,\n      isDefaultBilling: false,\n    });\n    setOpen(false);\n    setType('');\n  };\n\n  const handleSaveB2BAddress = () => {\n    handleSubmit(async (data) => {\n      setAddUpdateLoading(true);\n\n      try {\n        const isValidate = await validateCompanyExtraFieldsUnique(data);\n        if (!isValidate) {\n          return;\n        }\n\n        const extraFields = addressExtraFields.map((field: CustomFieldItems) => ({\n          fieldName: deCodeField(field.name),\n          fieldValue: data[field.name] || field.default,\n        }));\n        const { country: currentCountryCode, state: stateCode } = data;\n\n        let currentCountryName = '';\n        let currentStateName = '';\n        let currentStateCode = stateCode;\n\n        countries.forEach((country: CountryProps) => {\n          const { countryName, countryCode, states } = country;\n          if (countryCode === currentCountryCode) {\n            currentCountryName = countryName;\n\n            if (states.length > 0) {\n              const state = states.find(\n                (item: StateProps) =>\n                  item.stateCode === currentStateCode || item.stateName === currentStateCode,\n              );\n\n              currentStateName = state?.stateName || currentStateName;\n              currentStateCode = state?.stateCode || currentStateCode;\n            } else {\n              currentStateCode = '';\n              currentStateName = stateCode;\n            }\n          }\n        });\n\n        const params = {\n          ...data,\n          companyId: Number(companyId),\n          extraFields,\n          isShipping: shippingBilling.isShipping ? 1 : 0,\n          isBilling: shippingBilling.isBilling ? 1 : 0,\n          isDefaultShipping: shippingBilling.isDefaultShipping ? 1 : 0,\n          isDefaultBilling: shippingBilling.isDefaultBilling ? 1 : 0,\n          country: currentCountryName,\n          countryCode: currentCountryCode,\n          state: currentStateName,\n          stateCode: currentStateCode,\n        };\n\n        if (type === 'add') {\n          await createB2BAddress(params);\n          snackbar.success(b3Lang('addresses.addressForm.newAddressAdded'));\n        } else if (type === 'edit' && addressData) {\n          const { id } = addressData;\n\n          await updateB2BAddress({\n            ...params,\n            id: Number(id),\n          });\n\n          snackbar.success(b3Lang('addresses.addressForm.addressUpdated'));\n        }\n        setShippingBilling({\n          isShipping: false,\n          isBilling: false,\n          isDefaultShipping: false,\n          isDefaultBilling: false,\n        });\n        setOpen(false);\n\n        await updateAddressList(true);\n      } catch (err: any) {\n        snackbar.error(err);\n      } finally {\n        setAddUpdateLoading(false);\n      }\n    })();\n  };\n\n  const handleSaveBcAddress = () => {\n    handleSubmit(async (data) => {\n      setAddUpdateLoading(true);\n\n      try {\n        const extraFields = addressExtraFields.map((field: CustomFieldItems) => ({\n          name: field.bcLabel,\n          value: data[field.name] || field.default,\n        }));\n\n        const { country: currentCountryCode, state: stateCode } = data;\n\n        let currentCountryName = '';\n        let currentStateName = '';\n        let currentStateCode = stateCode;\n\n        countries.forEach((country: CountryProps) => {\n          const { countryName, countryCode, states } = country;\n          if (countryCode === currentCountryCode) {\n            currentCountryName = countryName;\n\n            if (states.length > 0) {\n              const state = states.find(\n                (item: StateProps) =>\n                  item.stateCode === currentStateCode || item.stateName === currentStateCode,\n              );\n\n              currentStateName = state?.stateName || currentStateName;\n              currentStateCode = state?.stateCode || currentStateCode;\n            } else {\n              currentStateCode = '';\n              currentStateName = stateCode;\n            }\n          }\n        });\n\n        const params = {\n          ...data,\n          formFields: extraFields,\n          country: currentCountryName,\n          countryCode: currentCountryCode,\n          state: currentStateName,\n          stateCode: currentStateCode,\n          addressType: '',\n        };\n\n        if (type === 'add') {\n          await createBcAddress(params);\n          snackbar.success(b3Lang('addresses.addressForm.newAddressAdded'));\n        } else if (type === 'edit' && addressData) {\n          const { bcAddressId } = addressData;\n\n          if (bcAddressId) {\n            await updateBcAddress({\n              ...params,\n              id: Number(bcAddressId),\n            });\n          }\n          snackbar.success(b3Lang('addresses.addressForm.addressUpdated'));\n        }\n        setOpen(false);\n\n        await updateAddressList(true);\n      } catch (err: any) {\n        snackbar.error(err);\n      } finally {\n        setAddUpdateLoading(false);\n      }\n    })();\n  };\n\n  const handleSaveAddress = () => {\n    if (isB2BUser) {\n      handleSaveB2BAddress();\n    } else {\n      handleSaveBcAddress();\n    }\n  };\n\n  const handleOpenAddEditAddressClick = (type: string, data: AddressItemType) => {\n    if (type === 'add' && originAddressFields.length > 0) {\n      allAddressFields.forEach((field: CustomFieldItems) => {\n        const addressField = field;\n        if (field.custom) {\n          if (isB2BUser) {\n            const originFields = originAddressFields.filter(\n              (item: CustomFieldItems) => item.name === field.name,\n            )[0];\n            addressField.default = originFields.default || '';\n          } else {\n            const originFields = originAddressFields.filter(\n              (item: CustomFieldItems) =>\n                item.name === field.name || item.bcLabel === field.bcLabel,\n            )[0];\n            addressField.default = originFields.default || '';\n          }\n        }\n      });\n    }\n\n    reset();\n    setAddressData(data);\n    setType(type);\n    setOpen(true);\n    setIsInitialized(false);\n  };\n\n  useImperativeHandle(ref, () => ({\n    handleOpenAddEditAddressClick,\n  }));\n\n  const handleChangeAddressType = (check: boolean, name: string) => {\n    if (name === 'isShipping') {\n      setShippingBilling({\n        ...shippingBilling,\n        [name]: check,\n        isDefaultShipping: false,\n      });\n    } else {\n      setShippingBilling({\n        ...shippingBilling,\n        [name]: check,\n        isDefaultBilling: false,\n      });\n    }\n  };\n\n  useEffect(() => {\n    const translatedAddressFields = JSON.parse(JSON.stringify(addressFields));\n\n    translatedAddressFields.forEach(\n      (element: { label: string; idLang: string; fieldId: string; default: string }) => {\n        const translatedFieldElement = element;\n        translatedFieldElement.label = b3Lang(element.idLang) || element.label;\n\n        if (!isB2BUser && element.fieldId === 'field_21') {\n          translatedFieldElement.default = '';\n        }\n\n        return element;\n      },\n    );\n\n    setAllAddressFields(translatedAddressFields);\n    const extraFields = addressFields.filter((field: CustomFieldItems) => field.custom);\n\n    setAddressExtraFields(extraFields);\n\n    if (originAddressFields.length === 0) {\n      const fields = cloneDeep(addressFields);\n      setOriginAddressFields(fields);\n    }\n    // disabling due to errors withing b3Lang\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addressFields, originAddressFields.length, isB2BUser]);\n\n  const handleBackFillData = useCallback(() => {\n    if (addressData) {\n      const {\n        isShipping,\n        isBilling,\n        isDefaultShipping,\n        isDefaultBilling,\n        state,\n        stateCode,\n        countryCode,\n        extraFields,\n      } = addressData;\n\n      const currentCountry = countries.filter(\n        (country: CountryProps) => country.countryCode === countryCode,\n      );\n\n      setShippingBilling({\n        isShipping: isShipping === 1,\n        isBilling: isBilling === 1,\n        isDefaultShipping: isDefaultShipping === 1,\n        isDefaultBilling: isDefaultBilling === 1,\n      });\n\n      allAddressFields.forEach((currentField: CustomFieldItems) => {\n        const field = currentField;\n        if (field.custom && extraFields.length > 0) {\n          if (isB2BUser) {\n            const name = deCodeField(field.name);\n            const currentExtraField = extraFields.find(\n              (item: CustomFieldItems) => item.fieldName === name,\n            );\n\n            const originFields = originAddressFields.find(\n              (item: CustomFieldItems) => item.name === name,\n            );\n\n            if (currentExtraField) {\n              setValue(field.name, currentExtraField.fieldValue || '');\n\n              field.default = currentExtraField.fieldValue || '';\n            } else {\n              setValue(field.name, '');\n              field.default = originFields.default;\n            }\n          } else {\n            const currentExtraField = extraFields.find(\n              (item: CustomFieldItems) =>\n                item.fieldName === field.name || item.fieldName === field.bcLabel,\n            );\n\n            const originFields = originAddressFields.filter(\n              (item: CustomFieldItems) =>\n                item.name === field.name || item.bcLabel === field.bcLabel,\n            )[0];\n\n            if (currentExtraField) {\n              setValue(field.name, currentExtraField.fieldValue || '');\n\n              field.default = currentExtraField.fieldValue || originFields.default;\n            } else {\n              setValue(field.name, '');\n              field.default = originFields.default;\n            }\n          }\n        } else if (field.name === 'country') {\n          setValue(field.name, countryCode);\n        } else if (field.name === 'state') {\n          setValue(field.name, stateCode || state);\n          if (currentCountry[0]) {\n            const { states } = currentCountry[0];\n\n            if (states.length > 0) {\n              field.options = states;\n              field.fieldType = 'dropdown';\n              field.required = true;\n            } else {\n              field.options = [];\n              field.fieldType = 'text';\n              field.required = false;\n            }\n          }\n        } else {\n          setValue(\n            field.name,\n            addressData[field.name] === 'undefined' ? '' : addressData[field.name],\n          );\n        }\n      });\n    }\n  }, [addressData, countries, isB2BUser, originAddressFields, setValue, allAddressFields]);\n\n  useEffect(() => {\n    if (open && type === 'edit' && addressData && !isInitialized) {\n      handleBackFillData();\n      setIsInitialized(true);\n    }\n  }, [open, type, addressData, isInitialized, handleBackFillData]);\n\n  useEffect(() => {\n    const handleCountryChange = (countryCode: string) => {\n      const stateList =\n        countries.find((country: CountryProps) => country.countryCode === countryCode)?.states ||\n        [];\n      const stateFields = allAddressFields.find(\n        (formFields: CustomFieldItems) => formFields.name === 'state',\n      );\n\n      if (stateFields) {\n        if (stateList.length > 0) {\n          stateFields.fieldType = 'dropdown';\n          stateFields.options = stateList;\n          stateFields.required = true;\n        } else {\n          stateFields.fieldType = 'text';\n          stateFields.options = [];\n          stateFields.required = false;\n        }\n      }\n\n      setValue('state', '');\n\n      setAllAddressFields([...allAddressFields]);\n    };\n\n    const subscription = watch((value, { name, type }) => {\n      const { country } = value;\n\n      if (name === 'country' && type === 'change') {\n        handleCountryChange(country);\n      }\n    });\n    return () => subscription.unsubscribe();\n    // disabling the next eslint rule\n    // setValue -> not needed as is a dispatcher\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allAddressFields, countries, watch]);\n\n  return (\n    <B3Dialog\n      isOpen={open}\n      title={\n        type === 'add'\n          ? b3Lang('addresses.addressForm.addNewAddress')\n          : b3Lang('addresses.addressForm.editAddress')\n      }\n      leftSizeBtn={b3Lang('addresses.addressForm.cancel')}\n      rightSizeBtn={b3Lang('addresses.addressForm.saveAddress')}\n      handleLeftClick={handleCancelClick}\n      handRightClick={handleSaveAddress}\n      loading={addUpdateLoading}\n      isShowBordered\n    >\n      {isB2BUser && (\n        <>\n          <p>{b3Lang('addresses.addressForm.selectAddressType')}</p>\n\n          <StyledCheckbox>\n            {b2bShippingBilling.map((item: B2bShippingBillingProps) => {\n              const { child, name, idLang } = item;\n\n              return (\n                <div key={name}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={shippingBilling[name]}\n                        onChange={(e) => {\n                          handleChangeAddressType(e.target.checked, name);\n                        }}\n                      />\n                    }\n                    label={b3Lang(idLang)}\n                  />\n                  {child && (\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={shippingBilling[child.name]}\n                          onChange={() => {\n                            setShippingBilling({\n                              ...shippingBilling,\n                              [child.name]: !shippingBilling[child.name],\n                            });\n                          }}\n                        />\n                      }\n                      label={b3Lang(child.idLang)}\n                      sx={{\n                        display: shippingBilling[name] ? '' : 'none',\n                      }}\n                    />\n                  )}\n                </div>\n              );\n            })}\n          </StyledCheckbox>\n        </>\n      )}\n      <B3CustomForm\n        formFields={allAddressFields}\n        errors={errors}\n        control={control}\n        getValues={getValues}\n        setValue={setValue}\n      />\n    </B3Dialog>\n  );\n}\n\nconst B3AddressForm = forwardRef(AddressForm);\n\nexport default B3AddressForm;\n","import { useB3Lang } from '@b3/lang';\nimport styled from '@emotion/styled';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { Theme, useTheme } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\n\nimport { B3Tag } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\n\nimport { AddressItemType } from '../../../types/address';\n\nexport interface OrderItemCardProps {\n  item: AddressItemType;\n  onEdit: (data: AddressItemType) => void;\n  onDelete: (data: AddressItemType) => void;\n  onSetDefault: (data: AddressItemType) => void;\n  editPermission: boolean;\n  isBCPermission: boolean;\n  updateActionsPermission: boolean;\n  deleteActionsPermission: boolean;\n}\n\ninterface TagBoxProps {\n  marginBottom: number | string;\n}\n\nconst TagBox = styled('div')(({ marginBottom }: TagBoxProps) => ({\n  marginBottom,\n  '& > span:not(:last-child)': {\n    marginRight: '4px',\n  },\n}));\n\ninterface FlexProps {\n  theme?: Theme;\n}\n\nconst Flex = styled('div')(({ theme }: FlexProps) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  marginTop: theme!.spacing(3),\n}));\n\nexport function AddressItemCard(props: OrderItemCardProps) {\n  const {\n    item: addressInfo,\n    onEdit,\n    onDelete,\n    onSetDefault,\n    editPermission: hasPermission,\n    updateActionsPermission = false,\n    deleteActionsPermission = false,\n    isBCPermission,\n  } = props;\n\n  const theme = useTheme();\n  const b3Lang = useB3Lang();\n\n  return (\n    <Card key={addressInfo.id}>\n      <CardContent\n        sx={{\n          color: '#313440',\n          wordBreak: 'break-word',\n        }}\n      >\n        {addressInfo.label && (\n          <Typography\n            variant=\"h5\"\n            sx={{\n              marginBottom:\n                addressInfo.isDefaultShipping === 1 || addressInfo.isDefaultBilling === 1\n                  ? theme.spacing(1)\n                  : theme.spacing(3),\n              color: 'rgba(0, 0, 0, 0.87)',\n            }}\n          >\n            {addressInfo.label}\n          </Typography>\n        )}\n\n        <TagBox\n          marginBottom={\n            addressInfo.isDefaultShipping === 1 || addressInfo.isDefaultBilling === 1\n              ? theme.spacing(3)\n              : 0\n          }\n        >\n          {addressInfo.isDefaultShipping === 1 && (\n            <B3Tag color=\"#C4DD6C\" textColor=\"rgba(0, 0, 0, 0.87)\">\n              {b3Lang('addresses.addressItemCard.defaultShipping')}\n            </B3Tag>\n          )}\n          {addressInfo.isDefaultBilling === 1 && (\n            <B3Tag color=\"#C4DD6C\" textColor=\"rgba(0, 0, 0, 0.87)\">\n              {b3Lang('addresses.addressItemCard.defaultBilling')}\n            </B3Tag>\n          )}\n        </TagBox>\n\n        <Typography variant=\"body1\">{`${addressInfo.firstName} ${addressInfo.lastName}`}</Typography>\n        <Typography variant=\"body1\">{addressInfo.company || ''}</Typography>\n        <Typography variant=\"body1\">{addressInfo.addressLine1}</Typography>\n        <Typography variant=\"body1\">\n          {addressInfo.addressLine2 === 'undefined' ? '' : addressInfo.addressLine2}\n        </Typography>\n        <Typography variant=\"body1\">{`${addressInfo.city}, ${addressInfo.state} ${addressInfo.zipCode}, ${addressInfo.country}`}</Typography>\n        <Typography variant=\"body1\">{addressInfo.phoneNumber}</Typography>\n\n        {hasPermission && (\n          <Flex>\n            {!isBCPermission && updateActionsPermission && (\n              <CustomButton\n                variant=\"text\"\n                sx={{\n                  ml: '-8px',\n                }}\n                onClick={() => {\n                  onSetDefault(addressInfo);\n                }}\n              >\n                {b3Lang('addresses.addressItemCard.setAsDefault')}\n              </CustomButton>\n            )}\n            <Box\n              sx={{\n                flex: 1,\n                display: 'flex',\n                justifyContent: 'flex-end',\n              }}\n            >\n              {(updateActionsPermission || isBCPermission) && (\n                <IconButton\n                  aria-label=\"edit\"\n                  size=\"small\"\n                  sx={{\n                    marginRight: '8px',\n                  }}\n                  onClick={() => {\n                    onEdit(addressInfo);\n                  }}\n                >\n                  <EditIcon fontSize=\"inherit\" />\n                </IconButton>\n              )}\n\n              {(deleteActionsPermission || isBCPermission) && (\n                <IconButton\n                  aria-label=\"delete\"\n                  size=\"small\"\n                  onClick={() => {\n                    onDelete(addressInfo);\n                  }}\n                >\n                  <DeleteIcon fontSize=\"inherit\" />\n                </IconButton>\n              )}\n            </Box>\n          </Flex>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","import { Dispatch, SetStateAction } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\nimport { useMobile } from '@/hooks';\nimport { deleteB2BAddress, deleteBCCustomerAddress } from '@/shared/service/b2b';\nimport { snackbar } from '@/utils';\n\nimport { AddressItemType } from '../../../types/address';\n\ninterface DeleteAddressDialogProps {\n  isOpen: boolean;\n  setIsOpen: Dispatch<SetStateAction<boolean>>;\n  setIsLoading: Dispatch<SetStateAction<boolean>>;\n  addressData?: AddressItemType;\n  updateAddressList: (isFirst?: boolean) => void;\n  companyId: string | number;\n  isBCPermission: boolean;\n}\n\nexport default function DeleteAddressDialog(props: DeleteAddressDialogProps) {\n  const {\n    isOpen,\n    setIsOpen,\n    addressData,\n    updateAddressList,\n    setIsLoading,\n    companyId,\n    isBCPermission,\n  } = props;\n\n  const [isMobile] = useMobile();\n  const b3Lang = useB3Lang();\n\n  const handleDelete = async () => {\n    if (!addressData) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setIsOpen(false);\n\n      const { id = '', bcAddressId = '' } = addressData;\n\n      if (!isBCPermission) {\n        await deleteB2BAddress({\n          addressId: id,\n          companyId,\n        });\n      } else {\n        await deleteBCCustomerAddress({\n          bcAddressId,\n        });\n      }\n\n      snackbar.success(b3Lang('addresses.deleteAddressDialog.successfullyDeleted'));\n\n      updateAddressList();\n    } catch (e) {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <B3Dialog\n      isOpen={isOpen}\n      title={b3Lang('addresses.deleteAddressDialog.deleteAddress')}\n      leftSizeBtn={b3Lang('addresses.deleteAddressDialog.cancel')}\n      rightSizeBtn={b3Lang('addresses.deleteAddressDialog.delete')}\n      handleLeftClick={() => {\n        setIsOpen(false);\n      }}\n      handRightClick={handleDelete}\n      rightStyleBtn={{\n        color: '#D32F2F',\n      }}\n      isShowBordered={false}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: isMobile ? 'start' : 'center',\n          justifyContent: isMobile ? 'center' : 'start',\n          width: isMobile ? '100%' : '450px',\n          height: '100%',\n        }}\n      >\n        {b3Lang('addresses.deleteAddressDialog.confirmDelete')}\n      </Box>\n    </B3Dialog>\n  );\n}\n","import { ChangeEvent, Dispatch, SetStateAction, useEffect, useState } from 'react';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, Checkbox, FormControlLabel, FormGroup } from '@mui/material';\n\nimport B3Dialog from '@/components/B3Dialog';\nimport { useMobile } from '@/hooks';\nimport { updateB2BAddress } from '@/shared/service/b2b';\nimport { snackbar } from '@/utils';\n\nimport { AddressItemType } from '../../../types/address';\n\ninterface SetDefaultDialogProps {\n  isOpen: boolean;\n  setIsOpen: Dispatch<SetStateAction<boolean>>;\n  setIsLoading: Dispatch<SetStateAction<boolean>>;\n  addressData?: AddressItemType;\n  updateAddressList: (isFirst?: boolean) => void;\n  companyId: string | number;\n}\n\nexport default function SetDefaultDialog(props: SetDefaultDialogProps) {\n  const { isOpen, setIsOpen, setIsLoading, addressData, updateAddressList, companyId } = props;\n\n  const [isMobile] = useMobile();\n\n  const b3Lang = useB3Lang();\n\n  const [address, setAddress] = useState<AddressItemType>();\n\n  useEffect(() => {\n    setAddress(addressData);\n  }, [addressData]);\n\n  const handleChange =\n    (key: 'isDefaultShipping' | 'isDefaultBilling') => (e: ChangeEvent<HTMLInputElement>) => {\n      const { checked } = e.target;\n\n      if (address) {\n        const newAddress = {\n          ...address,\n        };\n        if (key === 'isDefaultShipping') {\n          newAddress.isDefaultShipping = checked ? 1 : 0;\n          newAddress.isShipping = checked ? 1 : newAddress.isShipping;\n        }\n        if (key === 'isDefaultBilling') {\n          newAddress.isDefaultBilling = checked ? 1 : 0;\n          newAddress.isBilling = checked ? 1 : newAddress.isShipping;\n        }\n        setAddress(newAddress);\n      }\n    };\n\n  const handleSetDefault = async () => {\n    try {\n      setIsLoading(true);\n      setIsOpen(false);\n\n      await updateB2BAddress({\n        ...address,\n        companyId,\n      });\n\n      snackbar.success(b3Lang('addresses.setDefaultDialog.successfullySet'));\n\n      updateAddressList();\n    } catch (e) {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <B3Dialog\n      isOpen={isOpen}\n      title={b3Lang('addresses.setDefaultDialog.setDefaultAddress')}\n      leftSizeBtn={b3Lang('addresses.setDefaultDialog.cancel')}\n      rightSizeBtn=\"set\"\n      handleLeftClick={() => {\n        setIsOpen(false);\n      }}\n      handRightClick={handleSetDefault}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: isMobile ? 'start' : 'center',\n          justifyContent: isMobile ? 'center%' : 'start',\n          width: isMobile ? '100%' : '450px',\n          height: '100%',\n        }}\n      >\n        {address && (\n          <Box\n            sx={{\n              padding: !isMobile ? '10px 0' : '0',\n            }}\n          >\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={address.isDefaultShipping === 1}\n                    onChange={handleChange('isDefaultShipping')}\n                  />\n                }\n                label={b3Lang('addresses.setDefaultDialog.setDefaultShippingAddress')}\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={address.isDefaultBilling === 1}\n                    onChange={handleChange('isDefaultBilling')}\n                  />\n                }\n                label={b3Lang('addresses.setDefaultDialog.setDefaultBillingAddress')}\n              />\n            </FormGroup>\n          </Box>\n        )}\n      </Box>\n    </B3Dialog>\n  );\n}\n","import { getB2BAccountFormFields, getB2BAddressExtraFields } from '@/shared/service/b2b';\nimport b2bLogger from '@/utils/b3Logger';\n\nimport {\n  AccountFormFieldsItems,\n  getAccountFormFields,\n  RegisterFieldsItems,\n} from '../../Registered/config';\n\nimport { b2bAddressFields } from './config';\n\nexport interface StateProps {\n  stateCode: string;\n  stateName: string;\n}\n\nexport interface CountryProps {\n  countryCode: string;\n  countryName: string;\n  id: string | number;\n  states: StateProps[];\n}\ninterface B2bExtraFieldsProps {\n  defaultValue: string;\n  fieldName: string;\n  fieldType: string | number;\n  isRequired: boolean;\n  labelName: string;\n  listOfValue: null | Array<string>;\n  maximumLength: string | number | null;\n  maximumValue: string | number | null;\n  numberOfRows: string | number | null;\n  visibleToEnduser: boolean;\n}\n\ninterface ExtraFieldsProp extends RegisterFieldsItems {\n  type: string;\n  variant: string;\n  visible: boolean;\n  xs: number;\n}\n\nconst convertExtraFields = (extraFields: B2bExtraFieldsProps[]): [] | ExtraFieldsProp[] => {\n  if (extraFields.length === 0) return [];\n  const visibleFields =\n    extraFields.filter((field: B2bExtraFieldsProps) => field.visibleToEnduser) || [];\n\n  if (visibleFields?.length === 0) return [];\n\n  const b2bExtraFields = visibleFields.map((field: B2bExtraFieldsProps) => {\n    const fields = {\n      ...field,\n      groupId: 4,\n      visible: field.visibleToEnduser,\n    };\n\n    return fields;\n  });\n\n  const convertB2BExtraFields = getAccountFormFields(b2bExtraFields).address;\n\n  convertB2BExtraFields.map((extraField: ExtraFieldsProp) => {\n    const field = extraField;\n    field.custom = true;\n\n    return extraField;\n  });\n\n  return convertB2BExtraFields;\n};\n\nconst getBcAddressFields = async () => {\n  try {\n    const { accountFormFields } = await getB2BAccountFormFields(1);\n\n    const addressFields = accountFormFields.filter(\n      (field: AccountFormFieldsItems) => field.groupId === 4,\n    );\n\n    const bcAddressFields = getAccountFormFields(addressFields).address;\n\n    return bcAddressFields;\n  } catch (e) {\n    b2bLogger.error(e);\n  }\n  return undefined;\n};\n\nconst getB2BAddressFields = async () => {\n  try {\n    const res = await getB2BAddressExtraFields();\n    const b2bExtraFields = convertExtraFields(res.addressExtraFields);\n    const addressFields = [...b2bAddressFields, ...b2bExtraFields];\n    return addressFields;\n  } catch (e) {\n    b2bLogger.error(e);\n  }\n  return [];\n};\n\nexport const getAddressFields = async (isB2BUser: boolean, countries: CountryProps) => {\n  let allAddressFields: CustomFieldItems[] = [];\n\n  try {\n    if (isB2BUser) {\n      const addressFields = await getB2BAddressFields();\n\n      if (addressFields) allAddressFields = addressFields;\n    } else {\n      const bcAddressFields = await getBcAddressFields();\n      allAddressFields = bcAddressFields;\n    }\n\n    allAddressFields.map((addressField: CustomFieldItems) => {\n      const field = addressField;\n      if (addressField.name === 'country') {\n        field.options = countries;\n        field.required = true;\n      }\n\n      if (addressField.name === 'state') {\n        field.fieldType = 'text';\n        field.required = false;\n      }\n\n      return addressField;\n    });\n\n    return allAddressFields;\n  } catch (e) {\n    b2bLogger.error(e);\n  }\n  return [];\n};\n"],"names":["isB2BUser","useAppSelector","isB2BUserSelector","companyInfoId","company","companyInfo","id","role","customer","salesRepCompanyId","b2bFeatures","masqueradeCompany","isAgenting","state","addressConfig","dispatch","useContext","GlobalContext","selectCompanyHierarchyId","companyHierarchyInfo","b3Lang","useB3Lang","isExtraLarge","useCardListColumn","paginationTableRef","useTableRef","addEditAddressRef","useRef","isRequestLoading","setIsRequestLoading","useState","addressFields","setAddressFields","countries","setCountries","filterData","setFilterData","search","companyId","CustomerRole","SUPER_ADMIN","isBCPermission","useEffect","async","getB2BCountries","getAddressFields","err","b2bLogger","error","handleGetAddressFields","defaultParams","updateAddressList","current","refresh","editPermission","setEditPermission","isOpenSetDefault","setIsOpenSetDefault","isOpenDelete","setIsOpenDelete","currentAddress","setCurrentAddress","isCreatePermission","updateActionsPermission","deleteActionsPermission","useVerifyCreatePermission","permissionKeys","configList","newConfig","getB2BAddressConfig","type","payload","key","find","config","isEnabled","getEditPermission","handleDelete","address","snackbar","handleSetDefault","AddButtonConfig","useMemo","customLabel","translatedFilterFormConfig","JSON","parse","stringify","filterFormConfig","map","element","label","idLang","currentUseCompanyHierarchyId","Number","jsx","B3Spin","isSpinning","children","jsxs","Box","sx","display","flexDirection","flex","B3Filter","filterMoreInfo","handleChange","value","handleFilterChange","values","country","city","customButtonConfig","handleFilterCustomButtonClick","handleCreate","handleOpenAddEditAddressClick","B3PaginationTable","ref","columnItems","rowsPerPageOptions","getRequestList","params","list","count","customerAddresses","edges","addressList","totalCount","getBCCustomerAddress","node","convertBCToB2BAddress","addresses","getB2BAddress","searchParams","isCustomRender","itemXs","requestLoading","tableKey","renderItem","row","AddressItemCard","item","onEdit","handleEdit","onDelete","onSetDefault","B3AddressForm","SetDefaultDialog","isOpen","setIsOpen","setIsLoading","addressData","DeleteAddressDialog","StyledCheckbox","styled","marginRight","minWidth","forwardRef","open","setOpen","setType","isInitialized","setIsInitialized","addUpdateLoading","setAddUpdateLoading","allAddressFields","setAllAddressFields","addressExtraFields","setAddressExtraFields","originAddressFields","setOriginAddressFields","setAddressData","shippingBilling","setShippingBilling","isShipping","isBilling","isDefaultShipping","isDefaultBilling","control","handleSubmit","getValues","formState","errors","watch","setError","setValue","reset","useForm","mode","handleSaveB2BAddress","isValidate","extraFields","field","fieldName","deCodeField","name","fieldValue","data","default","res","validateAddressExtraFields","code","message","errMsg","messageArr","split","length","validateCompanyExtraFieldsUnique","currentCountryCode","stateCode","currentCountryName","currentStateName","currentStateCode","forEach","countryName","countryCode","states","stateName","createB2BAddress","success","updateB2BAddress","addressField","custom","originFields","filter","bcLabel","useImperativeHandle","translatedAddressFields","translatedFieldElement","fieldId","fields","cloneDeep","handleBackFillData","useCallback","currentCountry","currentField","currentExtraField","options","fieldType","required","subscription","stateList","stateFields","formFields","handleCountryChange","unsubscribe","B3Dialog","title","leftSizeBtn","rightSizeBtn","handleLeftClick","handleCancelClick","handRightClick","handleSaveAddress","addressType","createBcAddress","bcAddressId","updateBcAddress","loading","isShowBordered","Fragment","b2bShippingBilling","child","FormControlLabel","Checkbox","checked","onChange","e","handleChangeAddressType","check","target","B3CustomForm","TagBox","marginBottom","Flex","theme","alignItems","justifyContent","marginTop","spacing","props","addressInfo","hasPermission","useTheme","Card","CardContent","color","wordBreak","Typography","variant","B3Tag","textColor","firstName","lastName","addressLine1","addressLine2","zipCode","phoneNumber","CustomButton","ml","onClick","IconButton","size","EditIcon","fontSize","DeleteIcon","isMobile","useMobile","deleteBCCustomerAddress","deleteB2BAddress","addressId","rightStyleBtn","width","height","setAddress","newAddress","padding","FormGroup","getB2BAddressFields","b2bExtraFields","visibleFields","visibleToEnduser","groupId","visible","convertB2BExtraFields","getAccountFormFields","extraField","convertExtraFields","getB2BAddressExtraFields","b2bAddressFields","accountFormFields","getB2BAccountFormFields","getBcAddressFields","b2bPermissionsMap","addressesCreateActionsPermission","addressesUpdateActionsPermission","addressesDeleteActionsPermission"],"mappings":"ygDAiDA,WACQ,MAAAA,EAAYC,EAAeC,GAC3BC,EAAgBF,GAAe,EAAGG,aAAcA,EAAQC,YAAYC,KACpEC,EAAON,GAAe,EAAGG,aAAcA,EAAQI,SAASD,OACxDE,EAAoBR,GAAe,EAAGS,iBAAkBA,EAAYC,kBAAkBL,KACtFM,EAAaX,GAAe,EAAGS,iBAAkBA,EAAYC,kBAAkBC,cAEnFC,OAAOC,cAAEA,GAAcC,SACvBA,GACEC,EAAAA,WAAWC,IAETC,yBAAEA,GAA6BjB,GACnC,EAAGG,aAAcA,EAAQe,uBAGrBC,EAASC,IACTC,EAAeC,KACdC,GAAsBC,IAEvBC,EAAoBC,SAA+B,OAElDC,EAAkBC,GAAuBC,EAAAA,UAAS,IAClDC,EAAeC,GAAoBF,EAAAA,SAA6B,KAChEG,EAAWC,GAAgBJ,EAAAA,SAAyB,KACpDK,EAAYC,GAAiBN,WAAqC,CACvEO,OAAQ,KAGJC,EACJ/B,IAASgC,EAAaC,aAAe5B,EAAaH,EAAoBN,EAExE,IAAIsC,GAAiB,EAEhBzC,IAAcO,IAASgC,EAAaC,aAAgB5B,KACtC6B,GAAA,GAGnBC,EAAAA,WAAU,KACuBC,WAC7B,MAAQV,UAAAA,SAAoBW,IAE5BV,EAAaD,GACbJ,GAAoB,GAChB,IACF,MAAME,QAAsBc,IAAkBJ,EAAgBR,GAC7CF,EAAAA,GAAiB,UAC3Be,GACPC,EAAUC,MAAMF,EAAG,CACnB,QACAjB,GAAoB,EAAK,GAINoB,EAAA,GAGtB,IAEH,MAAMC,EAAmC,CAAC,EAqDpCC,EAAoBA,KACxB3B,EAAmB4B,SAASC,SAAQ,GAG/BC,EAAgBC,GAAqBzB,EAAAA,UAAS,IAC9C0B,EAAkBC,GAAuB3B,EAAAA,UAAS,IAClD4B,EAAcC,GAAmB7B,EAAAA,UAAS,IAC1C8B,EAAgBC,GAAqB/B,cAErCgC,GAAoBC,GAAyBC,IAClDC,EAA0BC,IAE5BxB,EAAAA,WAAU,KACkBC,WACxB,GAAIF,EACFc,GAAkB,QAIpB,GAAIQ,GACE,IACF,IAAII,EAAarD,EACjB,IAAKqD,EAAY,CACf,MAAQrD,cAAesD,SAAoBC,IAC9BF,EAAAC,EAEJrD,EAAA,CACPuD,KAAM,SACNC,QAAS,CACPzD,cAAeqD,IAElB,CAGG,MAAAK,EAAe,IAATjE,EAAa,oBAAsB,gBAEzC+C,EAEc,OADjBa,GAAc,IAAIM,MAAMC,GAA6C,iBAAfA,EAAOF,OAC1DG,WAEc,OADjBR,GAAc,IAAIM,MAAMC,GAA8BA,EAAOF,MAAQA,KAClEG,UAENpB,EAAkBD,SACXN,GACPD,EAAUC,MAAMA,EAAK,CACvB,EAGc4B,EAAA,GAGjB,CAAC9D,EAAeiD,GAAyBtB,EAAgBlC,EAAMW,IAElE,MAgBM2D,GAAgBC,IACfxB,GAIaO,EAAA,IACbiB,IAELnB,GAAgB,IANLoB,EAAA/B,MAAM5B,EAAO,gCAMJ,EAGhB4D,GAAoBF,IACNjB,EAAA,IACbiB,IAELrB,GAAoB,EAAI,EAGpBwB,GAAkBC,EAAAA,SAAQ,KACvB,CACLP,UAAWlC,GAAmBa,GAAkBQ,GAChDqB,YAAa/D,EAAO,8BAKrB,CAACkC,EAAgBpC,EAA0B4C,KAExCsB,GAA6BC,KAAKC,MAAMD,KAAKE,UAAUC,IAElCJ,GAAAK,KAAKC,IACjBA,EACRC,MAAQvE,EAAOsE,EAAQE,QAErBF,KAGT,MAAMG,GAA+BC,OAAO5E,IAA6B4E,OAAOxD,GAG9E,OAAAyD,EAAAA,IAACC,EAAO,CAAAC,WAAYrE,EAClBsE,SAAAC,EAAAA,KAACC,EAAA,CACCC,GAAI,CACFC,QAAS,OACTC,cAAe,SACfC,KAAM,GAGRN,SAAA,CAAAH,EAAAA,IAACU,EAAA,CACCC,eAAgBtB,GAChBuB,aAxIaA,CAACnC,EAAaoC,KACrB,WAARpC,GACYpC,EAAA,IACTD,EACHE,OAAQuE,GACT,EAoIGC,mBAjIoBC,IACZ1E,EAAA,IACTD,EACH4E,QAASD,EAAOC,SAAW,GAC3BlG,MAAOiG,EAAOjG,OAAS,GACvBmG,KAAMF,EAAOE,MAAQ,IACtB,EA4HKC,mBAAoBhC,GACpBiC,8BArEaC,KACd7D,EAIa5B,EAAA0B,SAASgE,8BAA8B,OAH9CrC,EAAA/B,MAAM5B,EAAO,+BAGsC,IAkE1D2E,EAAAA,IAACsB,EAAA,CACCC,IAAK9F,EACL+F,YAAa,GACbC,mBAAoB,CAAC,GAAI,GAAI,IAC7BC,eApLmE9E,MACzE+E,EAASxE,KAET,IAAIyE,EAAO,GACPC,EAAQ,EAEZ,GAAKnF,EAUE,CACC,MACJoF,mBAAqBC,MAAOC,EAAc,cAAIC,UACtCC,EAAqB,IAC1BP,IAGEC,EAAAI,EAAYtC,KAAKX,KACtBoD,KAAMC,EAAsBrD,EAAQoD,UAE9BN,EAAAI,CAAA,KApBW,CACb,MACJI,WAAaN,MAAOC,EAAc,cAAIC,UAC9BK,EAAc,CACtB/F,eACGoF,IAGEC,EAAAI,EACCH,EAAAI,CAAA,CAcH,MAAA,CACLF,MAAOH,EACPK,WAAYJ,EACd,EAqJMU,aAAcnG,EACdoG,gBAAc,EACdC,OAAQlH,EAAe,EAAI,EAC3BmH,eAAgB5G,EAChB6G,SAAS,KACTC,WAAaC,GACX7C,EAAAA,IAAC8C,GAAA,CAECC,KAAMF,EACNG,OAAQA,IA7EAH,KACbtF,EAIa5B,EAAA0B,SAASgE,8BAA8B,OAAQwB,GAHtD7D,EAAA/B,MAAM5B,EAAO,gCAG4C,EAwE5C4H,CAAWJ,GACzBK,SAAUpE,GACVqE,aAAclE,GACd1B,iBACAS,2BACAC,2BACAvB,kBARKmG,EAAItI,MAYfyF,EAAAA,IAACoD,GAAA,CACChG,oBACApB,gBACAuF,IAAK5F,EACLY,UAAWuD,GACXpD,iBACAR,cAGDqB,IAAmBb,GAClBsD,EAAAA,IAACqD,GAAA,CACCC,OAAQ7F,EACR8F,UAAW7F,EACX8F,aAAc1H,EACd2H,YAAa5F,EACbT,oBACAb,UAAWuD,KAGdvC,GACCyC,EAAAA,IAAC0D,GAAA,CACCJ,OAAQ3F,EACR4F,UAAW3F,EACX4F,aAAc1H,EACd2H,YAAa5F,EACbT,oBACAb,UAAWuD,GACXpD,uBAMZ,IC/SA,MAAMiH,EAAiBC,EAAO,MAAPA,EAAc,KAAA,CACnCrD,QAAS,OAET,uBAAwB,CACtBsD,YAAa,QAGf,QAAS,CACPC,SAAU,MACVvD,QAAS,OACTC,cAAe,cA4hBb4C,GAAgBW,cAxhBtB,UACE/H,cAAEA,EAAeoB,kBAAAA,EAAAb,UAAmBA,iBAAWG,EAAgBR,UAAAA,GAC/DqF,GAEA,MAAMlG,EAASC,KACR0I,EAAMC,GAAWlI,EAAAA,UAAkB,IACnCwC,EAAM2F,GAAWnI,EAAAA,SAAiB,KAClCoI,EAAeC,GAAoBrI,EAAAA,UAAkB,IACrDsI,EAAkBC,GAAuBvI,EAAAA,UAAkB,IAC3DwI,EAAkBC,GAAuBzI,EAAAA,SAA6BC,IACtEyI,EAAoBC,GAAyB3I,EAAAA,SAA2B,KACxE4I,EAAqBC,GAA0B7I,EAAAA,SAA2B,KAC1E0H,EAAaoB,GAAkB9I,EAAAA,SAAiC,OAChE+I,EAAiBC,GAAsBhJ,WAA+B,CAC3EiJ,YAAY,EACZC,WAAW,EACXC,mBAAmB,EACnBC,kBAAkB,IAGdlL,GAAayC,GAEb0I,QACJA,EAAAC,aACAA,EAAAC,UACAA,EACAC,WAAWC,OAAEA,GAAOC,MACpBA,EAAAC,SACAA,EAAAC,SACAA,EAAAC,MACAA,GACEC,EAAQ,CACVC,KAAM,QAsDFC,EAAuBA,KAC3BV,GAAazI,UACX0H,GAAoB,GAEhB,IACI,MAAA0B,OAxD6BpJ,WACnC,IACF,MAAMqJ,EAAcxB,EAAmB/E,KAAKwG,IAA6B,CACvEC,UAAWC,GAAYF,EAAMG,MAC7BC,WAAYC,EAAKL,EAAMG,OAASH,EAAMM,YAGlCC,QAAYC,GAA2B,CAC3CT,gBAGE,GAAa,MAAbQ,EAAIE,KAAc,CACpB,MAAMC,EAAUH,EAAIF,MAAMM,QAAUJ,EAAIG,SAAW,GAE7CE,EAAaF,EAAQG,MAAM,KAE7B,GAAAD,EAAWE,QAAU,EAAG,CAC1B,MAAMd,EAAQzB,EAAmB/F,MAC9BwH,GAA4BE,GAAYF,EAAMG,QAAUS,EAAW,KAEtE,GAAIZ,EAMK,OALPR,EAASQ,EAAMG,KAAM,CACnB9H,KAAM,SACNqI,QAASE,EAAW,KAEtBxC,GAAoB,IACb,CACT,CAEI,MAAAsC,CAAA,CAGD,OAAA,QACA3J,GAED,MADN+B,EAAS/B,MAAMA,GACTA,CAAA,GAqBqBgK,CAAiCV,GAC1D,IAAKP,EACH,OAGF,MAAMC,EAAcxB,EAAmB/E,KAAKwG,IAA6B,CACvEC,UAAWC,GAAYF,EAAMG,MAC7BC,WAAYC,EAAKL,EAAMG,OAASH,EAAMM,aAEhCxF,QAASkG,EAAoBpM,MAAOqM,GAAcZ,EAE1D,IAAIa,EAAqB,GACrBC,EAAmB,GACnBC,EAAmBH,EAEbjL,EAAAqL,SAASvG,IACjB,MAAMwG,YAAEA,EAAAC,YAAaA,EAAaC,OAAAA,GAAW1G,EAC7C,GAAIyG,IAAgBP,EAGd,GAFiBE,EAAAI,EAEjBE,EAAOV,OAAS,EAAG,CACrB,MAAMlM,EAAQ4M,EAAOhJ,MAClBqE,GACCA,EAAKoE,YAAcG,GAAoBvE,EAAK4E,YAAcL,IAG9DD,EAAmBvM,GAAO6M,WAAaN,EACvCC,EAAmBxM,GAAOqM,WAAaG,CAAA,MAEpBA,EAAA,GACAD,EAAAF,CACrB,IAIJ,MAAMxF,EAAS,IACV4E,EACHhK,UAAWwD,OAAOxD,GAClB0J,cACAjB,WAAYF,EAAgBE,WAAa,EAAI,EAC7CC,UAAWH,EAAgBG,UAAY,EAAI,EAC3CC,kBAAmBJ,EAAgBI,kBAAoB,EAAI,EAC3DC,iBAAkBL,EAAgBK,iBAAmB,EAAI,EACzDnE,QAASoG,EACTK,YAAaP,EACbpM,MAAOuM,EACPF,UAAWG,GAGb,GAAa,QAAT/I,QACIqJ,EAAiBjG,GACd3C,EAAA6I,QAAQxM,EAAO,+CACfkD,GAAS,SAATA,GAAmBkF,EAAa,CACnC,MAAAlJ,GAAEA,GAAOkJ,QAETqE,EAAiB,IAClBnG,EACHpH,GAAIwF,OAAOxF,KAGJyE,EAAA6I,QAAQxM,EAAO,wCAAuC,CAE9C0J,EAAA,CACjBC,YAAY,EACZC,WAAW,EACXC,mBAAmB,EACnBC,kBAAkB,IAEpBlB,GAAQ,SAEF7G,GAAkB,SACjBL,GACPiC,EAAS/B,MAAMF,EAAG,CAClB,QACAuH,GAAoB,EAAK,IA9E7Be,EAgFG,EAkFChE,EAAgCA,CAAC9C,EAAcgI,KACtC,QAAThI,GAAkBoG,EAAoBqC,OAAS,GAChCzC,EAAAgD,SAASrB,IACxB,MAAM6B,EAAe7B,EACrB,GAAIA,EAAM8B,OACR,GAAI/N,EAAW,CACb,MAAMgO,EAAetD,EAAoBuD,QACtCnF,GAA2BA,EAAKsD,OAASH,EAAMG,OAChD,GACW0B,EAAAvB,QAAUyB,EAAazB,SAAW,EAAA,KAC1C,CACL,MAAMyB,EAAetD,EAAoBuD,QACtCnF,GACCA,EAAKsD,OAASH,EAAMG,MAAQtD,EAAKoF,UAAYjC,EAAMiC,UACrD,GACWJ,EAAAvB,QAAUyB,EAAazB,SAAW,EAAA,CACjD,IAKAZ,IACNf,EAAe0B,GACfrC,EAAQ3F,GACR0F,GAAQ,GACRG,GAAiB,EAAK,EAGxBgE,EAAAA,oBAAoB7G,GAAK,MACvBF,oCAmBF1E,EAAAA,WAAU,KACR,MAAM0L,EAA0B/I,KAAKC,MAAMD,KAAKE,UAAUxD,IAElCqM,EAAAd,SACrB5H,IACC,MAAM2I,EAAyB3I,EAOxB,OANP2I,EAAuB1I,MAAQvE,EAAOsE,EAAQE,SAAWF,EAAQC,MAE5D3F,GAAiC,aAApB0F,EAAQ4I,UACxBD,EAAuB9B,QAAU,IAG5B7G,CAAA,IAIX6E,EAAoB6D,GACpB,MAAMpC,EAAcjK,EAAckM,QAAQhC,GAA4BA,EAAM8B,SAIxE,GAFJtD,EAAsBuB,GAEa,IAA/BtB,EAAoBqC,OAAc,CAC9B,MAAAwB,EAASC,EAAUzM,GACzB4I,EAAuB4D,EAAM,IAI9B,CAACxM,EAAe2I,EAAoBqC,OAAQ/M,IAEzC,MAAAyO,EAAqBC,EAAAA,aAAY,KACrC,GAAIlF,EAAa,CACT,MAAAuB,WACJA,EAAAC,UACAA,EAAAC,kBACAA,EAAAC,iBACAA,EAAArK,MACAA,EAAAqM,UACAA,EAAAM,YACAA,EAAAxB,YACAA,GACExC,EAEEmF,EAAiB1M,EAAUgM,QAC9BlH,GAA0BA,EAAQyG,cAAgBA,IAGlC1C,EAAA,CACjBC,WAA2B,IAAfA,EACZC,UAAyB,IAAdA,EACXC,kBAAyC,IAAtBA,EACnBC,iBAAuC,IAArBA,IAGHZ,EAAAgD,SAASsB,IACxB,MAAM3C,EAAQ2C,EACd,GAAI3C,EAAM8B,QAAU/B,EAAYe,OAAS,EACvC,GAAI/M,EAAW,CACP,MAAAoM,EAAOD,GAAYF,EAAMG,MACzByC,EAAoB7C,EAAYvH,MACnCqE,GAA2BA,EAAKoD,YAAcE,IAG3C4B,EAAetD,EAAoBjG,MACtCqE,GAA2BA,EAAKsD,OAASA,IAGxCyC,GACFnD,EAASO,EAAMG,KAAMyC,EAAkBxC,YAAc,IAE/CJ,EAAAM,QAAUsC,EAAkBxC,YAAc,KAEvCX,EAAAO,EAAMG,KAAM,IACrBH,EAAMM,QAAUyB,EAAazB,QAC/B,KACK,CACL,MAAMsC,EAAoB7C,EAAYvH,MACnCqE,GACCA,EAAKoD,YAAcD,EAAMG,MAAQtD,EAAKoD,YAAcD,EAAMiC,UAGxDF,EAAetD,EAAoBuD,QACtCnF,GACCA,EAAKsD,OAASH,EAAMG,MAAQtD,EAAKoF,UAAYjC,EAAMiC,UACrD,GAEEW,GACFnD,EAASO,EAAMG,KAAMyC,EAAkBxC,YAAc,IAE/CJ,EAAAM,QAAUsC,EAAkBxC,YAAc2B,EAAazB,UAEpDb,EAAAO,EAAMG,KAAM,IACrBH,EAAMM,QAAUyB,EAAazB,QAC/B,MAEON,GAAe,YAAfA,EAAMG,KACNV,EAAAO,EAAMG,KAAMoB,QACZvB,GAAe,UAAfA,EAAMG,MAEX,GADKV,EAAAO,EAAMG,KAAMc,GAAarM,GAC9B8N,EAAe,GAAI,CACrB,MAAMlB,OAAEA,GAAWkB,EAAe,GAE9BlB,EAAOV,OAAS,GAClBd,EAAM6C,QAAUrB,EAChBxB,EAAM8C,UAAY,WAClB9C,EAAM+C,UAAW,IAEjB/C,EAAM6C,QAAU,GAChB7C,EAAM8C,UAAY,OAClB9C,EAAM+C,UAAW,EACnB,OAGFtD,EACEO,EAAMG,KACsB,cAA5B5C,EAAYyC,EAAMG,MAAwB,GAAK5C,EAAYyC,EAAMG,MACnE,GAEH,IAEF,CAAC5C,EAAavH,EAAWjC,EAAW0K,EAAqBgB,EAAUpB,IAiDpE,OA/CF5H,EAAAA,WAAU,KACJqH,GAAiB,SAATzF,GAAmBkF,IAAgBU,IAC1BuE,IACnBtE,GAAiB,GAAI,GAEtB,CAACJ,EAAMzF,EAAMkF,EAAaU,EAAeuE,IAE5C/L,EAAAA,WAAU,KACF,MAyBAuM,EAAezD,GAAM,CAAC5E,GAASwF,OAAM9H,KAAAA,MACnC,MAAAyC,QAAEA,GAAYH,EAEP,YAATwF,GAA+B,WAAT9H,GA5BCkJ,KACrB,MAAA0B,EACJjN,EAAUwC,MAAMsC,GAA0BA,EAAQyG,cAAgBA,KAAcC,QAChF,GACI0B,EAAc7E,EAAiB7F,MAClC2K,GAAqD,UAApBA,EAAWhD,OAG3C+C,IACED,EAAUnC,OAAS,GACrBoC,EAAYJ,UAAY,WACxBI,EAAYL,QAAUI,EACtBC,EAAYH,UAAW,IAEvBG,EAAYJ,UAAY,OACxBI,EAAYL,QAAU,GACtBK,EAAYH,UAAW,IAI3BtD,EAAS,QAAS,IAEEnB,EAAA,IAAID,GAAiB,EAOvC+E,CAAoBtI,EAAO,IAGxB,MAAA,IAAMkI,EAAaK,aAAY,GAIrC,CAAChF,EAAkBrI,EAAWuJ,IAG/BrF,EAAAA,KAACoJ,EAAA,CACClG,OAAQU,EACRyF,MAEMpO,EADK,QAATkD,EACW,sCACA,qCAEbmL,YAAarO,EAAO,gCACpBsO,aAActO,EAAO,qCACrBuO,gBAhZsBC,KAClBjE,IACab,EAAA,CACjBC,YAAY,EACZC,WAAW,EACXC,mBAAmB,EACnBC,kBAAkB,IAEpBlB,GAAQ,GACRC,EAAQ,GAAE,EAwYR4F,eA1OsBC,KACpB9P,EACmB8L,IAxEvBV,GAAazI,UACX0H,GAAoB,GAEhB,IACF,MAAM2B,EAAcxB,EAAmB/E,KAAKwG,IAA6B,CACvEG,KAAMH,EAAMiC,QACZtH,MAAO0F,EAAKL,EAAMG,OAASH,EAAMM,aAG3BxF,QAASkG,EAAoBpM,MAAOqM,GAAcZ,EAE1D,IAAIa,EAAqB,GACrBC,EAAmB,GACnBC,EAAmBH,EAEbjL,EAAAqL,SAASvG,IACjB,MAAMwG,YAAEA,EAAAC,YAAaA,EAAaC,OAAAA,GAAW1G,EAC7C,GAAIyG,IAAgBP,EAGd,GAFiBE,EAAAI,EAEjBE,EAAOV,OAAS,EAAG,CACrB,MAAMlM,EAAQ4M,EAAOhJ,MAClBqE,GACCA,EAAKoE,YAAcG,GAAoBvE,EAAK4E,YAAcL,IAG9DD,EAAmBvM,GAAO6M,WAAaN,EACvCC,EAAmBxM,GAAOqM,WAAaG,CAAA,MAEpBA,EAAA,GACAD,EAAAF,CACrB,IAIJ,MAAMxF,EAAS,IACV4E,EACH8C,WAAYpD,EACZjF,QAASoG,EACTK,YAAaP,EACbpM,MAAOuM,EACPF,UAAWG,EACX0C,YAAa,IAGf,GAAa,QAATzL,QACI0L,EAAgBtI,GACb3C,EAAA6I,QAAQxM,EAAO,+CACfkD,GAAS,SAATA,GAAmBkF,EAAa,CACnC,MAAAyG,YAAEA,GAAgBzG,EAEpByG,SACIC,EAAgB,IACjBxI,EACHpH,GAAIwF,OAAOmK,KAGNlL,EAAA6I,QAAQxM,EAAO,wCAAuC,CAEjE4I,GAAQ,SAEF7G,GAAkB,SACjBL,GACPiC,EAAS/B,MAAMF,EAAG,CAClB,QACAuH,GAAoB,EAAK,IAjE7Be,EA0EsB,EAuOpB+E,QAAS/F,EACTgG,gBAAc,EAEblK,SAAA,CAAAlG,GAEGmG,EAAAA,KAAAkK,WAAA,CAAAnK,SAAA,CAACH,EAAAA,IAAA,IAAA,CAAGG,SAAO9E,EAAA,6CAEV2E,EAAAA,IAAA2D,EAAA,CACExD,SAAmBoK,EAAA7K,KAAKqD,IACvB,MAAMyH,MAAEA,EAAAnE,KAAOA,EAAMxG,OAAAA,GAAWkD,EAEhC,cACG,MACC,CAAA5C,SAAA,CAAAH,EAAAA,IAACyK,EAAA,CACCrF,QACEpF,EAAAA,IAAC0K,EAAA,CACCC,QAAS7F,EAAgBuB,GACzBuE,SAAWC,IApNDC,EAACC,EAAgB1E,KAE1BtB,EADR,eAATsB,EACiB,IACdvB,EACHuB,CAACA,GAAO0E,EACR7F,mBAAmB,GAGF,IACdJ,EACHuB,CAACA,GAAO0E,EACR5F,kBAAkB,GACnB,EAyM2C2F,CAAAD,EAAEG,OAAOL,QAAStE,EAAI,IAIpDzG,MAAOvE,EAAOwE,KAEf2K,GACCxK,EAAAA,IAACyK,EAAA,CACCrF,QACEpF,EAAAA,IAAC0K,EAAA,CACCC,QAAS7F,EAAgB0F,EAAMnE,MAC/BuE,SAAUA,KACW7F,EAAA,IACdD,EACH,CAAC0F,EAAMnE,OAAQvB,EAAgB0F,EAAMnE,OACtC,IAIPzG,MAAOvE,EAAOmP,EAAM3K,QACpBS,GAAI,CACFC,QAASuE,EAAgBuB,GAAQ,GAAK,YA3BpCA,EA+BV,SAMVrG,EAAAA,IAACiL,EAAA,CACC5B,WAAY9E,EACZiB,SACAJ,UACAE,YACAK,eAIR,IC3iBMuF,GAAStH,EAAO,MAAPA,EAAc,EAAGuH,oBAC9BA,eACA,4BAA6B,CAC3BtH,YAAa,WAQXuH,GAAOxH,EAAO,MAAPA,EAAc,EAAGyH,aAC5B9K,QAAS,OACT+K,WAAY,SACZC,eAAgB,gBAChBC,UAAWH,EAAOI,QAAQ,OAGrB,SAAS3I,GAAgB4I,GACxB,MACJ3I,KAAM4I,EAAA3I,OACNA,EAAAE,SACAA,EAAAC,aACAA,EACA5F,eAAgBqO,EAAA5N,wBAChBA,GAA0B,EAAAC,wBAC1BA,GAA0B,EAAAvB,eAC1BA,GACEgP,EAEEL,EAAQQ,IACRxQ,EAASC,IAEf,aACGwQ,EACC,CAAA3L,SAAAC,EAAAA,KAAC2L,EAAA,CACCzL,GAAI,CACF0L,MAAO,UACPC,UAAW,cAGZ9L,SAAA,CAAAwL,EAAY/L,OACXI,EAAAA,IAACkM,EAAA,CACCC,QAAQ,KACR7L,GAAI,CACF6K,aACoC,IAAlCQ,EAAYzG,mBAA4D,IAAjCyG,EAAYxG,iBAC/CkG,EAAMI,QAAQ,GACdJ,EAAMI,QAAQ,GACpBO,MAAO,uBAGR7L,SAAYwL,EAAA/L,QAIjBQ,EAAAA,KAAC8K,GAAA,CACCC,aACoC,IAAlCQ,EAAYzG,mBAA4D,IAAjCyG,EAAYxG,iBAC/CkG,EAAMI,QAAQ,GACd,EAGLtL,SAAA,CAAkC,IAAtBwL,EAAAzG,mBACXlF,EAAAA,IAACoM,EAAM,CAAAJ,MAAM,UAAUK,UAAU,sBAC9BlM,SAAO9E,EAAA,+CAGsB,IAAjCsQ,EAAYxG,kBACVnF,EAAAA,IAAAoM,EAAA,CAAMJ,MAAM,UAAUK,UAAU,sBAC9BlM,SAAO9E,EAAA,iDAKd2E,EAAAA,IAACkM,EAAW,CAAAC,QAAQ,QAAShM,SAAA,GAAGwL,EAAYW,aAAaX,EAAYY,mBACpEL,EAAW,CAAAC,QAAQ,QAAShM,SAAAwL,EAAYtR,SAAW,KACnD2F,EAAAA,IAAAkM,EAAA,CAAWC,QAAQ,QAAShM,WAAYqM,eACzCxM,EAAAA,IAACkM,GAAWC,QAAQ,QACjBhM,SAA6B,gBAAjBsM,aAA+B,GAAKd,EAAYc,qBAE9DP,EAAW,CAAAC,QAAQ,QAAShM,SAAA,GAAGwL,EAAY1K,SAAS0K,EAAY7Q,SAAS6Q,EAAYe,YAAYf,EAAY3K,YAC7GhB,EAAAA,IAAAkM,EAAA,CAAWC,QAAQ,QAAShM,WAAYwM,cAExCf,UACER,GACE,CAAAjL,SAAA,EAACzD,GAAkBsB,GAClBgC,EAAAA,IAAC4M,EAAA,CACCT,QAAQ,OACR7L,GAAI,CACFuM,GAAI,QAENC,QAASA,KACP3J,EAAawI,EAAW,EAGzBxL,WAAO,4CAGZC,EAAAA,KAACC,EAAA,CACCC,GAAI,CACFG,KAAM,EACNF,QAAS,OACTgL,eAAgB,YAGhBpL,SAAA,EAAAnC,GAA2BtB,IAC3BsD,EAAAA,IAAC+M,EAAA,CACC,aAAW,OACXC,KAAK,QACL1M,GAAI,CACFuD,YAAa,OAEfiJ,QAASA,KACP9J,EAAO2I,EAAW,EAGpBxL,SAAAH,EAAAA,IAACiN,EAAS,CAAAC,SAAS,eAIrBjP,GAA2BvB,IAC3BsD,EAAAA,IAAC+M,EAAA,CACC,aAAW,SACXC,KAAK,QACLF,QAASA,KACP5J,EAASyI,EAAW,EAGtBxL,SAAAH,EAAAA,IAACmN,EAAW,CAAAD,SAAS,wBA/FxBvB,EAAYpR,GAwG3B,CCpJA,SAAwBmJ,GAAoBgI,GACpC,MAAApI,OACJA,EAAAC,UACAA,EAAAE,YACAA,EAAArG,kBACAA,EAAAoG,aACAA,EAAAjH,UACAA,EAAAG,eACAA,GACEgP,GAEG0B,GAAYC,IACbhS,EAASC,IAiCb,OAAA0E,EAAAA,IAACwJ,EAAA,CACClG,SACAmG,MAAOpO,EAAO,+CACdqO,YAAarO,EAAO,wCACpBsO,aAActO,EAAO,wCACrBuO,gBAAiBA,KACfrG,GAAU,EAAK,EAEjBuG,eAvCiBlN,UACnB,GAAK6G,EAID,IACFD,GAAa,GACbD,GAAU,GAEV,MAAMhJ,GAAEA,EAAK,GAAI2P,YAAAA,EAAc,IAAOzG,EAEjC/G,QAMG4Q,EAAwB,CAC5BpD,sBANIqD,EAAiB,CACrBC,UAAWjT,EACXgC,cAQKyC,EAAA6I,QAAQxM,EAAO,sDAEN+B,UACXyN,GACPrH,GAAa,EAAK,GAclBiK,cAAe,CACbzB,MAAO,WAET3B,gBAAgB,EAEhBlK,SAAAH,EAAAA,IAACK,EAAA,CACCC,GAAI,CACFC,QAAS,OACT+K,WAAY8B,EAAW,QAAU,SACjC7B,eAAgB6B,EAAW,SAAW,QACtCM,MAAON,EAAW,OAAS,QAC3BO,OAAQ,QAGTxN,WAAO,kDAIhB,CCzEA,SAAwBkD,GAAiBqI,GACvC,MAAMpI,OAAEA,EAAQC,UAAAA,EAAAC,aAAWA,cAAcC,EAAarG,kBAAAA,EAAAb,UAAmBA,GAAcmP,GAEhF0B,GAAYC,IAEbhS,EAASC,KAERyD,EAAS6O,GAAc7R,aAE9BY,EAAAA,WAAU,KACRiR,EAAWnK,EAAW,GACrB,CAACA,IAEJ,MAAM7C,EACHnC,GAAmDoM,IAC5C,MAAAF,QAAEA,GAAYE,EAAEG,OAEtB,GAAIjM,EAAS,CACX,MAAM8O,EAAa,IACd9O,GAEO,sBAARN,IACSoP,EAAA3I,kBAAoByF,EAAU,EAAI,EAClCkD,EAAA7I,WAAa2F,EAAU,EAAIkD,EAAW7I,YAEvC,qBAARvG,IACSoP,EAAA1I,iBAAmBwF,EAAU,EAAI,EACjCkD,EAAA5I,UAAY0F,EAAU,EAAIkD,EAAW7I,YAElD4I,EAAWC,EAAU,GAuBzB,OAAA7N,EAAAA,IAACwJ,EAAA,CACClG,SACAmG,MAAOpO,EAAO,gDACdqO,YAAarO,EAAO,qCACpBsO,aAAa,MACbC,gBAAiBA,KACfrG,GAAU,EAAK,EAEjBuG,eA3BqBlN,UACnB,IACF4G,GAAa,GACbD,GAAU,SAEJuE,EAAiB,IAClB/I,EACHxC,cAGOyC,EAAA6I,QAAQxM,EAAO,+CAEN+B,UACXyN,GACPrH,GAAa,EAAK,GAelBrD,SAAAH,EAAAA,IAACK,EAAA,CACCC,GAAI,CACFC,QAAS,OACT+K,WAAY8B,EAAW,QAAU,SACjC7B,eAAgB6B,EAAW,UAAY,QACvCM,MAAON,EAAW,OAAS,QAC3BO,OAAQ,QAGTxN,SACCpB,GAAAiB,EAAAA,IAACK,EAAA,CACCC,GAAI,CACFwN,QAAUV,EAAsB,IAAX,UAGvBjN,gBAAC4N,EACC,CAAA5N,SAAA,CAAAH,EAAAA,IAACyK,EAAA,CACCrF,QACEpF,EAAAA,IAAC0K,EAAA,CACCC,QAAuC,IAA9B5L,EAAQmG,kBACjB0F,SAAUhK,EAAa,uBAG3BhB,MAAOvE,EAAO,0DAEhB2E,EAAAA,IAACyK,EAAA,CACCrF,QACEpF,EAAAA,IAAC0K,EAAA,CACCC,QAAsC,IAA7B5L,EAAQoG,iBACjByF,SAAUhK,EAAa,sBAG3BhB,MAAOvE,EAAO,iEAQ9B,CChFA,MA8CM2S,GAAsBpR,UACtB,IACI,MACAqR,EAjDkBhI,KAC1B,GAA2B,IAAvBA,EAAYe,OAAc,MAAO,GAC/B,MAAAkH,EACJjI,EAAYiC,QAAQhC,GAA+BA,EAAMiI,oBAAqB,GAEhF,GAA8B,IAA1BD,GAAelH,OAAc,MAAO,GAExC,MAAMiH,EAAiBC,EAAcxO,KAAKwG,IACzB,IACVA,EACHkI,QAAS,EACTC,QAASnI,EAAMiI,qBAMbG,EAAwBC,GAAqBN,GAAgBlP,QAS5D,OAPeuP,EAAA5O,KAAK8O,IACXA,EACRxG,QAAS,EAERwG,KAGFF,CAAA,EAuBkBG,QADLC,KAC4BjK,oBAEvC,MADe,IAAIkK,KAAqBV,SAExCpD,GACP7N,EAAUC,MAAM4N,EAAC,CAEnB,MAAO,EAAC,EAGG/N,GAAmBF,MAAO3C,EAAoBiC,KACzD,IAAIqI,EAAuC,GAEvC,IACF,GAAItK,EAAW,CACP,MAAA+B,QAAsBgS,KAExBhS,IAAkCuI,EAAAvI,EAAA,MAGnBuI,OAvCE3H,WACrB,IACF,MAAMgS,kBAAEA,SAA4BC,EAAwB,GAEtD7S,EAAgB4S,EAAkB1G,QACrChC,GAAoD,IAAlBA,EAAMkI,UAKpC,OAFiBG,GAAqBvS,GAAe+C,cAGrD8L,GACP7N,EAAUC,MAAM4N,EAAC,CAEZ,EAwB2BiE,GAmBzB,OAfUvK,EAAA7E,KAAKqI,IACpB,MAAM7B,EAAQ6B,EAWP,MAVmB,YAAtBA,EAAa1B,OACfH,EAAM6C,QAAU7M,EAChBgK,EAAM+C,UAAW,GAGO,UAAtBlB,EAAa1B,OACfH,EAAM8C,UAAY,OAClB9C,EAAM+C,UAAW,GAGZlB,CAAA,IAGFxD,QACAsG,GACP7N,EAAUC,MAAM4N,EAAC,CAEnB,MAAO,EAAC,ELvGJ1M,GAAiB,CACrB4Q,EAAkBC,iCAClBD,EAAkBE,iCAClBF,EAAkBG"}