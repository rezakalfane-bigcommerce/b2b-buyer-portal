{"version":3,"file":"index-legacy-DAv4JuFl.js","sources":["../../src/pages/SalesRepresentative/index.tsx","../../src/pages/SalesRepresentative/config.ts","../../src/pages/SalesRepresentative/utils.ts"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useB3Lang } from '@b3/lang';\nimport { Box, Stack } from '@mui/material';\nimport trim from 'lodash-es/trim';\nimport CustomButton from '@/components/button/CustomButton';\nimport B3Spin from '@/components/spin/B3Spin';\nimport useStorageState from '@/hooks/useStorageState';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport {\n  checkUserBCEmail,\n  checkUserEmail,\n  getB2BAccountFormFields,\n  getB2BAccountSettings,\n  getBCAccountSettings,\n} from '@/shared/service/b2b';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { Fields, ParamProps } from '@/types/accountSetting';\nimport { channelId, snackbar } from '@/utils';\nimport { getAccountFormFields } from '../Registered/config';\nimport { getAccountSettingsFields, getPasswordModifiedFields } from './config';\nimport { initB2BInfo, initBcInfo } from './utils';\nimport B3Request from '@/shared/service/request/b3Fetch';\n\nfunction useData() {\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyInfoId = useAppSelector(({ company }) => company.companyInfo.id);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const companyId = role === 3 && isAgenting ? Number(salesRepCompanyId) : Number(companyInfoId);\n  const isBCUser = !isB2BUser || (role === 3 && !isAgenting);\n\n  const validateEmailValue = async (emailValue: string) => {\n    if (customer.emailAddress === trim(emailValue)) return true;\n    const payload = {\n      email: emailValue,\n      channelId,\n    };\n\n    const { isValid }: { isValid: boolean } = isBCUser\n      ? await checkUserBCEmail(payload)\n      : await checkUserEmail(payload);\n\n    return isValid;\n  };\n\n  const emailValidation = (data: Partial<ParamProps>) => {\n    if (data.email !== customer.emailAddress && !data.currentPassword) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const passwordValidation = (data: Partial<ParamProps>) => {\n    if (data.password !== data.confirmPassword) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return { isBCUser, companyId, customer, validateEmailValue, emailValidation, passwordValidation };\n}\n\nfunction AccountSetting() {\n  const { isBCUser, companyId } =\n    useData();\n\n  const [isFinishUpdate, setIsFinishUpdate] = useStorageState<boolean>(\n    'sf-isFinishUpdate',\n    false,\n    sessionStorage,\n  );\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const b3Lang = useB3Lang();\n  const navigate = useNavigate();\n\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n  const [salesStaff, setSalesStaff] = useState<any[]>([]);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        setLoading(true);\n        const fn = isBCUser ? getBCAccountSettings : getB2BAccountSettings;\n        const params = isBCUser ? {} : { companyId };\n        const key = isBCUser ? 'customerAccountSettings' : 'accountSettings';\n        const accountFormAllFields = await getB2BAccountFormFields(isBCUser ? 1 : 2);\n        const accountFormFields = getAccountFormFields(accountFormAllFields.accountFormFields || []);\n        const contactInformation = (accountFormFields?.contactInformation || []).filter(\n          (item: Partial<Fields>) => item.fieldId !== 'field_email_marketing_newsletter',\n        );\n        const { additionalInformation = [] } = accountFormFields;\n        const { [key]: accountSettings } = await fn(params);\n        const fields = isBCUser\n          ? initBcInfo(accountSettings, contactInformation, additionalInformation)\n          : initB2BInfo(accountSettings, contactInformation, getAccountSettingsFields(), additionalInformation);\n        const passwordModifiedFields = getPasswordModifiedFields();\n        const all = [...fields, ...passwordModifiedFields];\n        const roleItem = all.find((item) => item.name === 'role');\n        if (roleItem?.fieldType) roleItem.fieldType = 'text';\n\n        // --- NEW: Fetch sales staff\n        const { data: salesList = [] } = await B3Request.get(`/api/v3/io/sales-staffs`, \"B2BEditionRest\", { companyId });\n        if (salesList.length > 0) {\n          const fullSalesData = await Promise.all(\n            salesList.map((staff: { id: number }) =>\n              B3Request.get(`/api/v3/io/sales-staffs/${staff.id}`, \"B2BEditionRest\"),\n            ),\n          );\n          setSalesStaff(fullSalesData.map((res) => res.data));\n        }\n      } finally {\n        if (isFinishUpdate) {\n          snackbar.success(b3Lang('accountSettings.notification.detailsUpdated'));\n          setIsFinishUpdate(false);\n        }\n        setLoading(false);\n        setIsVisible(true);\n      }\n    };\n\n    init();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <B3Spin isSpinning={isLoading} background={backgroundColor}>\n      {isVisible && (\n        <Box mt={4}>\n          {salesStaff.length === 0 ? (\n            <CustomButton variant=\"outlined\" fullWidth onClick={() => navigate('/quote')}>\n              Request Sales Assistance\n            </CustomButton>\n          ) : (\n            <Stack direction={'row'}>\n              {salesStaff.map((rep) => (\n                <Box\n                  key={rep.id}\n                  sx={{\n                    p: 2,\n                    m: 2,\n                    border: '1px solid #ddd',\n                    borderRadius: '8px',\n                    backgroundColor: '#fff',\n                  }}\n                >\n                  <Box fontWeight=\"bold\">{rep.name}</Box>\n                  <Box>Email: {rep.email}</Box>\n                  <Box>Phone: {rep.phoneNumber}</Box>\n                </Box>\n              ))}\n            </Stack>\n          )}\n        </Box>\n      )}\n    </B3Spin>\n  );\n}\n\nexport default AccountSetting;\n","export interface GetFilterMoreListProps {\n  fieldId: string;\n  rows?: string | number;\n  name: string;\n  label: string;\n  required: boolean;\n  default: string;\n  fieldType: string;\n  xs: number;\n  variant: string;\n  size: string;\n}\n\nexport const getAccountSettingsFields = (): GetFilterMoreListProps[] => {\n  return [\n    {\n      name: 'company',\n      fieldId: 'field_company',\n      label: 'Company',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'role',\n      fieldId: 'field_role',\n      label: 'Role',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n};\n\nexport const getPasswordModifiedFields = (): GetFilterMoreListProps[] => {\n  return [\n    {\n      name: 'currentPassword',\n      fieldId: 'field_current_password',\n      label: 'Current Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'password',\n      fieldId: 'field_password',\n      label: 'Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'confirmPassword',\n      fieldId: 'field_confirm_password',\n      label: 'Confirm Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n};\n","import Cookies from 'js-cookie';\n\nimport { Fields, ParamProps } from '@/types/accountSetting';\nimport { validatorRules } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport { BigCommerceStorefrontAPIBaseURL } from '@/utils/basicConfig';\n\nimport { deCodeField } from '../Registered/config';\n\nfunction sendUpdateAccountRequest(data: string): Promise<string> {\n  const requestOptions: RequestInit = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: data,\n    mode: 'cors',\n    credentials: 'include',\n  };\n\n  return fetch(\n    `${BigCommerceStorefrontAPIBaseURL}/account.php?action=update_account`,\n    requestOptions,\n  )\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.text();\n    })\n    .then((responseData) => responseData);\n}\n\nconst getXsrfToken = (): string | undefined => {\n  const token = Cookies.get('XSRF-TOKEN');\n\n  if (!token) {\n    return undefined;\n  }\n\n  return decodeURIComponent(token);\n};\n\n// Password and email Change Send emails\nfunction sendEmail(data: any, extraFields: any) {\n  return new Promise<boolean>((resolve, reject) => {\n    const { email, confirmPassword, newPassword, currentPassword } = data;\n\n    const requiredCustomFields =\n      extraFields.filter((item: CustomFieldItems) => item.required && item.custom) || [];\n    const formData = new URLSearchParams();\n    const token = getXsrfToken() || '';\n    formData.append('FormField[1][1]', email);\n    formData.append('FormField[1][24]', currentPassword);\n    formData.append('FormField[1][2]', newPassword);\n    formData.append('FormField[1][3]', confirmPassword);\n    formData.append('authenticity_token', token);\n\n    // extra\n    if (requiredCustomFields.length) {\n      requiredCustomFields.forEach((item: Partial<Fields>) => {\n        if (item.name?.includes('_')) {\n          const key = item.name?.split('_')[1];\n          const { formFields } = data;\n          const val = formFields.find(\n            (field: Partial<Fields>) => field.name === item.bcLabel,\n          ).value;\n          if (item.type === 'date') {\n            const time = val.split('-');\n            if (!val && time.length !== 3) return;\n            const [year, month, day] = time;\n            formData.append(`FormFieldYear[1][${key}]`, year);\n            formData.append(`FormFieldMonth[1][${key}]`, month);\n            formData.append(`FormFieldDay[1][${key}]`, day);\n          } else {\n            formData.append(`FormField[1][${key}]`, val);\n          }\n        }\n      });\n    }\n\n    const requestBody: string = formData.toString();\n\n    sendUpdateAccountRequest(requestBody)\n      .then((response) => {\n        const isFlag = response.includes('alertBox--error');\n        resolve(!isFlag);\n      })\n      .catch((error) => {\n        b2bLogger.error('Error:', error);\n        reject();\n      });\n  });\n}\n\nconst emailValidate = validatorRules(['email']);\n\nexport const initB2BInfo = (\n  accountSettings: any,\n  contactInformation: Partial<Fields>[],\n  accountB2BFormFields: Partial<Fields>[],\n  additionalInformation: Partial<Fields>[],\n) => {\n  const extraFields = accountSettings?.extraFields || [];\n  contactInformation.forEach((item: Partial<Fields>) => {\n    const contactItem = item;\n    if (deCodeField(item?.name || '') === 'first_name') {\n      contactItem.default = accountSettings.firstName;\n    }\n    if (deCodeField(item?.name || '') === 'last_name') {\n      contactItem.default = accountSettings.lastName;\n    }\n    if (deCodeField(item?.name || '') === 'phone') {\n      contactItem.default = accountSettings.phoneNumber;\n    }\n    if (deCodeField(item?.name || '') === 'email') {\n      contactItem.default = accountSettings.email;\n      contactItem.validate = emailValidate;\n    }\n  });\n\n  if (extraFields.length > 0) {\n    extraFields.forEach((field: CustomFieldItems) => {\n      const extraField = field;\n\n      const currentField = contactInformation.find(\n        (item) => deCodeField(item?.name || '') === extraField.fieldName,\n      );\n\n      if (currentField) {\n        currentField.default = extraField.fieldValue;\n      }\n    });\n  }\n\n  accountB2BFormFields.forEach((item: Partial<Fields>) => {\n    const formField = item;\n    if (item.name === 'role') {\n      formField.default = accountSettings.companyRoleName;\n      formField.disabled = true;\n    } else if (item.name === 'company') {\n      formField.default = accountSettings.company;\n      formField.disabled = true;\n    }\n  });\n\n  additionalInformation.forEach((item: Partial<Fields>) => {\n    const formFields = (accountSettings?.formFields || []).find(\n      (field: Partial<Fields>) => field.name === item.bcLabel,\n    );\n    const infoItem = item;\n    if (formFields) infoItem.default = formFields.value;\n  });\n\n  return [...contactInformation, ...accountB2BFormFields, ...additionalInformation];\n};\n\nexport const initBcInfo = (\n  accountSettings: any,\n  contactInformation: Partial<Fields>[],\n  additionalInformation: Partial<Fields>[],\n) => {\n  contactInformation.forEach((item: Partial<Fields>) => {\n    const contactInfoItem = item;\n    if (deCodeField(item?.name || '') === 'first_name') {\n      contactInfoItem.default = accountSettings.firstName;\n    }\n    if (deCodeField(item?.name || '') === 'last_name') {\n      contactInfoItem.default = accountSettings.lastName;\n    }\n    if (deCodeField(item?.name || '') === 'phone') {\n      contactInfoItem.default = accountSettings.phoneNumber;\n    }\n    if (deCodeField(item?.name || '') === 'email') {\n      contactInfoItem.default = accountSettings.email;\n      contactInfoItem.validate = emailValidate;\n    }\n    if (deCodeField(item?.name || '') === 'company') {\n      contactInfoItem.default = accountSettings.company;\n    }\n  });\n\n  additionalInformation.forEach((item: Partial<Fields>) => {\n    const formFields = (accountSettings?.formFields || []).find(\n      (field: Partial<Fields>) => field.name === item.bcLabel,\n    );\n    const infoItem = item;\n    if (formFields) infoItem.default = formFields.value;\n  });\n\n  return [...contactInformation, ...additionalInformation];\n};\n\nexport const b2bSubmitDataProcessing = (\n  data: CustomFieldItems,\n  accountSettings: any,\n  decryptionFields: Partial<Fields>[],\n  extraFields: Partial<Fields>[],\n) => {\n  const userExtraFields = accountSettings?.extraFields || [];\n\n  const param: Partial<ParamProps> = {};\n  param.formFields = [];\n  let pristine = true;\n  let flag = true;\n  let useExtraFieldsFlag = false;\n\n  Object.keys(data).forEach((key: string) => {\n    decryptionFields.forEach((item: Partial<Fields>) => {\n      if (key === item.name) {\n        flag = false;\n        if (deCodeField(item.name) === 'first_name') {\n          if (accountSettings.firstName !== data[item.name]) pristine = false;\n          param.firstName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'last_name') {\n          if (accountSettings.lastName !== data[item.name]) pristine = false;\n          param.lastName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'phone') {\n          if (accountSettings.phoneNumber !== data[item.name]) pristine = false;\n          param.phoneNumber = data[item.name];\n        }\n        if (deCodeField(item.name) === 'email') {\n          if (accountSettings.email !== data[item.name]) pristine = false;\n          param.email = data[item.name];\n        }\n        if (item.custom) {\n          const currentField = userExtraFields.find(\n            (field: CustomFieldItems) => field.fieldName === deCodeField(item?.name || ''),\n          );\n          if (currentField?.fieldValue !== data[item.name]) useExtraFieldsFlag = true;\n        }\n      }\n    });\n    if (useExtraFieldsFlag) {\n      pristine = false;\n    }\n\n    if (flag) {\n      extraFields.forEach((field: Partial<Fields>) => {\n        if (field.fieldId === key && param?.formFields) {\n          const { name } = field;\n          param.formFields.push({\n            name: field?.bcLabel || '',\n            value: data[key],\n          });\n          flag = false;\n          const account = (accountSettings?.formFields || []).find(\n            (formField: Partial<Fields>) => formField.name === field.bcLabel,\n          );\n          if (account && JSON.stringify(account.value) !== JSON.stringify(data[key])) {\n            pristine = false;\n          }\n\n          if (!accountSettings?.formFields?.length && name && !!data[name]) {\n            pristine = false;\n          }\n        }\n      });\n    }\n    if (flag) {\n      if (key === 'password') {\n        param.newPassword = data[key];\n        if (data[key]) pristine = false;\n      } else {\n        param[key] = data[key];\n      }\n    }\n    flag = true;\n  });\n\n  delete param.company;\n\n  delete param.role;\n\n  if (pristine) {\n    return undefined;\n  }\n\n  return param;\n};\n\nexport const bcSubmitDataProcessing = (\n  data: CustomFieldItems,\n  accountSettings: any,\n  decryptionFields: Partial<Fields>[],\n  extraFields: Partial<Fields>[],\n) => {\n  const param: Partial<ParamProps> = {};\n  param.formFields = [];\n  let pristine = true;\n  let flag = true;\n  Object.keys(data).forEach((key: string) => {\n    decryptionFields.forEach((item: Partial<Fields>) => {\n      if (key === item.name) {\n        flag = false;\n        if (deCodeField(item.name) === 'first_name') {\n          if (accountSettings.firstName !== data[item.name]) pristine = false;\n          param.firstName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'last_name') {\n          if (accountSettings.lastName !== data[item.name]) pristine = false;\n          param.lastName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'phone') {\n          if (accountSettings.phoneNumber !== data[item.name]) pristine = false;\n          param.phoneNumber = data[item.name];\n        }\n        if (deCodeField(item.name) === 'email') {\n          if (accountSettings.email !== data[item.name]) pristine = false;\n          param.email = data[item.name];\n        }\n        if (deCodeField(item.name) === 'company') {\n          if (accountSettings.company !== data[item.name]) pristine = false;\n          param.company = data[item.name];\n        }\n      }\n    });\n\n    if (flag) {\n      extraFields.forEach((field: Partial<Fields>) => {\n        if (field.fieldId === key && param?.formFields) {\n          param.formFields.push({\n            name: field?.bcLabel || '',\n            value: data[key],\n          });\n          flag = false;\n          const account = (accountSettings?.formFields || []).find(\n            (formField: Partial<Fields>) => formField.name === field.bcLabel,\n          );\n          if (account && JSON.stringify(account.value) !== JSON.stringify(data[key]))\n            pristine = false;\n        }\n      });\n    }\n\n    if (flag) {\n      if (key === 'password') {\n        param.newPassword = data[key];\n        if (data[key]) pristine = false;\n      } else {\n        param[key] = data[key];\n      }\n    }\n    flag = true;\n  });\n\n  if (pristine) {\n    return undefined;\n  }\n\n  return param;\n};\n\nexport default sendEmail;\n"],"names":["isBCUser","companyId","isB2BUser","useAppSelector","isB2BUserSelector","companyInfoId","company","companyInfo","id","customer","role","salesRepCompanyId","b2bFeatures","masqueradeCompany","isAgenting","Number","validateEmailValue","async","emailAddress","trim","emailValue","payload","email","channelId","isValid","checkUserBCEmail","checkUserEmail","emailValidation","data","currentPassword","passwordValidation","password","confirmPassword","useData","isFinishUpdate","setIsFinishUpdate","useStorageState","sessionStorage","state","portalStyle","backgroundColor","useContext","CustomStyleContext","b3Lang","useB3Lang","navigate","useNavigate","isLoading","setLoading","useState","isVisible","setIsVisible","salesStaff","setSalesStaff","useEffect","fn","getBCAccountSettings","getB2BAccountSettings","params","key","accountFormAllFields","getB2BAccountFormFields","accountFormFields","getAccountFormFields","contactInformation","filter","item","fieldId","additionalInformation","accountSettings","fields","initBcInfo","initB2BInfo","getAccountSettingsFields","passwordModifiedFields","getPasswordModifiedFields","roleItem","find","name","fieldType","salesList","B3Request","get","length","fullSalesData","Promise","all","map","staff","res","snackbar","success","init","jsx","B3Spin","isSpinning","background","children","Box","mt","CustomButton","variant","fullWidth","onClick","Stack","direction","rep","jsxs","sx","p","m","border","borderRadius","fontWeight","phoneNumber","label","required","default","xs","size","emailValidate","validatorRules","accountB2BFormFields","extraFields","forEach","contactItem","deCodeField","firstName","lastName","validate","field","extraField","currentField","fieldName","fieldValue","formField","companyRoleName","disabled","formFields","bcLabel","value","contactInfoItem"],"mappings":"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"}