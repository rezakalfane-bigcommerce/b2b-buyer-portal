{"version":3,"file":"index-legacy-Fc7-1kah.js","sources":["../../src/pages/Dashboard/components/DashboardCard.tsx","../../src/pages/Dashboard/index.tsx","../../src/pages/Dashboard/ActionMenuCell.tsx","../../src/pages/Dashboard/CompanyNameCell/SelectedBadge.tsx","../../src/pages/Dashboard/CompanyNameCell/index.tsx"],"sourcesContent":["import { useB3Lang } from '@b3/lang';\nimport { Box, Button, Card, CardContent, Typography } from '@mui/material';\n\ninterface DashboardCardProps {\n  companyName: string;\n  email: string;\n  isSelected: boolean;\n  action: { label: string; onClick: () => void };\n}\n\nfunction SelectedBadge() {\n  const b3Lang = useB3Lang();\n\n  return (\n    <Box\n      sx={{\n        fontWeight: 400,\n        fontSize: '13px',\n        background: '#ED6C02',\n        display: 'inline-block',\n        p: '2px 7px',\n        color: '#FFFFFF',\n        borderRadius: '10px',\n      }}\n    >\n      {b3Lang('dashboard.selected')}\n    </Box>\n  );\n}\n\nexport function DashboardCard({ companyName, email, isSelected, action }: DashboardCardProps) {\n  return (\n    <Card>\n      <CardContent\n        sx={{\n          color: '#313440',\n        }}\n      >\n        <Typography\n          sx={{\n            fontWeight: 400,\n            fontSize: '24px',\n            color: 'rgba(0, 0, 0, 0.87)',\n          }}\n        >\n          {companyName}\n        </Typography>\n\n        {isSelected && <SelectedBadge />}\n\n        <Box\n          sx={{\n            display: 'flex',\n            fontSize: '16px',\n            mt: '15px',\n            gap: '5px',\n          }}\n        >\n          <Typography\n            sx={{\n              fontWeight: 500,\n            }}\n          >\n            Email:\n          </Typography>\n          <Typography variant=\"body1\">{email}</Typography>\n        </Box>\n      </CardContent>\n\n      <Button\n        sx={{\n          ml: '10px',\n          mb: '10px',\n        }}\n        variant=\"text\"\n        onClick={() => action.onClick()}\n      >\n        {action.label}\n      </Button>\n    </Card>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\n\nimport { usePageMask } from '@/components';\nimport B3FilterSearch from '@/components/filter/B3FilterSearch';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { B3PaginationTable, GetRequestList } from '@/components/table/B3PaginationTable';\nimport { TableColumnItem } from '@/components/table/B3Table';\nimport { useSort } from '@/hooks';\nimport { PageProps } from '@/pages/PageProps';\nimport { superAdminCompanies } from '@/shared/service/b2b';\nimport { useAppSelector } from '@/store';\nimport { endMasquerade, startMasquerade } from '@/utils/masquerade';\n\nimport { DashboardCard } from './components/DashboardCard';\nimport { ActionMenuCell } from './ActionMenuCell';\nimport { CompanyNameCell } from './CompanyNameCell';\n\ninterface ListItem {\n  [key: string]: string;\n}\n\nexport const defaultSortKey = 'companyName';\n\nexport const sortKeys = {\n  companyName: 'companyName',\n  companyAdminName: 'companyAdminName',\n  companyEmail: 'companyEmail',\n};\n\nconst rowsPerPage = [10, 20, 30];\n\nfunction useData() {\n  const customerId = useAppSelector(({ company }) => company.customer.id);\n  const b2bId = useAppSelector(({ company }) => company.customer.b2bId);\n  const salesRepCompanyId = Number(\n    useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id),\n  );\n\n  return { salesRepCompanyId, b2bId, customerId };\n}\n\nfunction Dashboard(props: PageProps) {\n  const showPageMask = usePageMask();\n\n  const { salesRepCompanyId, b2bId, customerId } = useData();\n\n  const { setOpenPage } = props;\n  const b3Lang = useB3Lang();\n\n  const [isRequestLoading, setIsRequestLoading] = useState(false);\n\n  const [filterData, setFilterData] = useState<ListItem>({\n    q: '',\n    orderBy: sortKeys[defaultSortKey],\n  });\n\n  const [handleSetOrderBy, order, orderBy] = useSort(\n    sortKeys,\n    defaultSortKey,\n    filterData,\n    setFilterData,\n    'asc',\n  );\n\n  const location = useLocation();\n\n  const getSuperAdminCompaniesList: GetRequestList<ListItem, ListItem> = async (params) => {\n    let list = { edges: [], totalCount: 0 };\n    if (typeof b2bId === 'number') {\n      list = (await superAdminCompanies(b2bId, params)).superAdminCompanies;\n    }\n\n    return list;\n  };\n\n  const startActing = async (companyId: number) => {\n    try {\n      setIsRequestLoading(true);\n      if (typeof b2bId === 'number') {\n        await startMasquerade({ customerId, companyId });\n      }\n\n      setOpenPage({\n        isOpen: true,\n        openUrl: '/dashboard',\n      });\n\n      setFilterData({\n        ...filterData,\n      });\n    } finally {\n      setIsRequestLoading(false);\n    }\n  };\n\n  const endActing = async () => {\n    try {\n      showPageMask(true);\n      if (typeof b2bId === 'number') {\n        await endMasquerade();\n      }\n      setFilterData({\n        ...filterData,\n      });\n    } finally {\n      showPageMask(false);\n    }\n  };\n\n  useEffect(() => {\n    const params = {\n      ...location,\n    };\n    if (params?.state) {\n      endActing();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location]);\n\n  const handleChange = async (q: string) => {\n    setFilterData({\n      ...filterData,\n      q,\n    });\n  };\n\n  const columnItems: TableColumnItem<ListItem>[] = [\n    {\n      key: 'companyName',\n      title: b3Lang('dashboard.company'),\n      render: ({ companyName, companyId }) => (\n        <CompanyNameCell\n          companyName={companyName}\n          isSelected={Number(companyId) === Number(salesRepCompanyId)}\n        />\n      ),\n      isSortable: true,\n    },\n    {\n      key: 'companyEmail',\n      title: b3Lang('dashboard.email'),\n      isSortable: true,\n    },\n    {\n      key: 'actions',\n      title: b3Lang('dashboard.action'),\n      render: ({ companyId }) => {\n        const isSelected = Number(companyId) === Number(salesRepCompanyId);\n\n        if (isSelected) {\n          return (\n            <ActionMenuCell\n              label={b3Lang('dashboard.endMasqueradeAction')}\n              onClick={() => endActing()}\n            />\n          );\n        }\n\n        return (\n          <ActionMenuCell\n            label={b3Lang('dashboard.masqueradeAction')}\n            onClick={() => startActing(Number(companyId))}\n          />\n        );\n      },\n    },\n  ];\n\n  return (\n    <B3Spin isSpinning={isRequestLoading}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n        }}\n      >\n        <Box\n          sx={{\n            mb: '24px',\n          }}\n        >\n          <B3FilterSearch handleChange={handleChange} />\n        </Box>\n        <B3PaginationTable\n          columnItems={columnItems}\n          rowsPerPageOptions={rowsPerPage}\n          getRequestList={getSuperAdminCompaniesList}\n          searchParams={filterData || {}}\n          isCustomRender={false}\n          requestLoading={setIsRequestLoading}\n          tableKey=\"id\"\n          sortDirection={order}\n          orderBy={orderBy}\n          sortByFn={handleSetOrderBy}\n          renderItem={({ companyName, companyEmail, companyId }) => {\n            const isSelected = Number(companyId) === Number(salesRepCompanyId);\n            const action = isSelected\n              ? {\n                  label: b3Lang('dashboard.endMasqueradeAction'),\n                  onClick: () => {\n                    endActing();\n                  },\n                }\n              : {\n                  label: b3Lang('dashboard.masqueradeAction'),\n                  onClick: () => {\n                    startActing(Number(companyId));\n                  },\n                };\n\n            return (\n              <DashboardCard\n                companyName={companyName}\n                email={companyEmail}\n                isSelected={isSelected}\n                action={action}\n              />\n            );\n          }}\n        />\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default Dashboard;\n","import { useRef, useState } from 'react';\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\nimport { IconButton, Menu, MenuItem } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nexport const StyledMenu = styled(Menu)(() => ({\n  '& .MuiPaper-elevation': {\n    boxShadow:\n      '0px 1px 0px -1px rgba(0, 0, 0, 0.1), 0px 1px 6px rgba(0, 0, 0, 0.07), 0px 1px 4px rgba(0, 0, 0, 0.06)',\n    borderRadius: '4px',\n  },\n}));\n\ninterface Props {\n  label: string;\n  onClick: () => void;\n}\n\nexport function ActionMenuCell({ label, onClick }: Props) {\n  const ref = useRef<HTMLButtonElement | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)} ref={ref}>\n        <MoreHorizIcon />\n      </IconButton>\n      <StyledMenu\n        anchorEl={ref.current}\n        open={isOpen}\n        onClose={() => setIsOpen(false)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <MenuItem\n          sx={{\n            color: 'primary.main',\n          }}\n          onClick={() => {\n            onClick();\n            setIsOpen(false);\n          }}\n        >\n          {label}\n        </MenuItem>\n      </StyledMenu>\n    </>\n  );\n}\n","import { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\n\nexport function SelectedBadge() {\n  const b3Lang = useB3Lang();\n\n  return (\n    <Box\n      sx={{\n        fontWeight: 400,\n        fontSize: '13px',\n        background: '#ED6C02',\n        ml: '16px',\n        p: '2px 7px',\n        color: '#FFFFFF',\n        borderRadius: '10px',\n      }}\n    >\n      {b3Lang('dashboard.selected')}\n    </Box>\n  );\n}\n","import { Box } from '@mui/material';\n\nimport { SelectedBadge } from './SelectedBadge';\n\ninterface Props {\n  companyName: string;\n  isSelected: boolean;\n}\n\nexport function CompanyNameCell({ companyName, isSelected }: Props) {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n      }}\n    >\n      {companyName}\n      {isSelected && <SelectedBadge />}\n    </Box>\n  );\n}\n"],"names":["SelectedBadge","b3Lang","useB3Lang","jsx","Box","sx","fontWeight","fontSize","background","display","p","color","borderRadius","children","DashboardCard","companyName","email","isSelected","action","Card","jsxs","CardContent","Typography","mt","gap","variant","Button","ml","mb","onClick","label","props","showPageMask","usePageMask","salesRepCompanyId","b2bId","customerId","useAppSelector","company","customer","id","Number","b2bFeatures","masqueradeCompany","useData","setOpenPage","isRequestLoading","setIsRequestLoading","useState","filterData","setFilterData","q","orderBy","sortKeys","defaultSortKey","handleSetOrderBy","order","useSort","location","useLocation","startActing","async","startMasquerade","companyId","isOpen","openUrl","endActing","endMasquerade","useEffect","params","state","columnItems","key","title","render","CompanyNameCell","isSortable","ActionMenuCell","B3Spin","isSpinning","flexDirection","flex","B3FilterSearch","handleChange","B3PaginationTable","rowsPerPageOptions","rowsPerPage","getRequestList","list","edges","totalCount","superAdminCompanies","searchParams","isCustomRender","requestLoading","tableKey","sortDirection","sortByFn","renderItem","companyEmail","StyledMenu","styled","Menu","boxShadow","ref","useRef","setIsOpen","Fragment","IconButton","MoreHorizIcon","anchorEl","current","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","alignItems","exports","companyAdminName"],"mappings":"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"}