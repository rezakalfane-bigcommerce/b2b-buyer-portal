{"version":3,"file":"index-tkesji87.js","sources":["../../src/pages/AccountSetting/config.ts","../../src/pages/AccountSetting/utils.ts","../../src/pages/AccountSetting/index.tsx"],"sourcesContent":["export interface GetFilterMoreListProps {\n  fieldId: string;\n  rows?: string | number;\n  name: string;\n  label: string;\n  required: boolean;\n  default: string;\n  fieldType: string;\n  xs: number;\n  variant: string;\n  size: string;\n}\n\nexport const getAccountSettingsFields = (): GetFilterMoreListProps[] => {\n  return [\n    {\n      name: 'company',\n      fieldId: 'field_company',\n      label: 'Company',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'role',\n      fieldId: 'field_role',\n      label: 'Role',\n      required: false,\n      default: '',\n      fieldType: 'text',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n};\n\nexport const getPasswordModifiedFields = (): GetFilterMoreListProps[] => {\n  return [\n    {\n      name: 'currentPassword',\n      fieldId: 'field_current_password',\n      label: 'Current Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'password',\n      fieldId: 'field_password',\n      label: 'Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n    {\n      name: 'confirmPassword',\n      fieldId: 'field_confirm_password',\n      label: 'Confirm Password',\n      required: false,\n      default: '',\n      fieldType: 'password',\n      xs: 12,\n      variant: 'filled',\n      size: 'small',\n    },\n  ];\n};\n","import Cookies from 'js-cookie';\n\nimport { Fields, ParamProps } from '@/types/accountSetting';\nimport { validatorRules } from '@/utils';\nimport b2bLogger from '@/utils/b3Logger';\nimport { BigCommerceStorefrontAPIBaseURL } from '@/utils/basicConfig';\n\nimport { deCodeField } from '../Registered/config';\n\nfunction sendUpdateAccountRequest(data: string): Promise<string> {\n  const requestOptions: RequestInit = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: data,\n    mode: 'cors',\n    credentials: 'include',\n  };\n\n  return fetch(\n    `${BigCommerceStorefrontAPIBaseURL}/account.php?action=update_account`,\n    requestOptions,\n  )\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.text();\n    })\n    .then((responseData) => responseData);\n}\n\nconst getXsrfToken = (): string | undefined => {\n  const token = Cookies.get('XSRF-TOKEN');\n\n  if (!token) {\n    return undefined;\n  }\n\n  return decodeURIComponent(token);\n};\n\n// Password and email Change Send emails\nfunction sendEmail(data: any, extraFields: any) {\n  return new Promise<boolean>((resolve, reject) => {\n    const { email, confirmPassword, newPassword, currentPassword } = data;\n\n    const requiredCustomFields =\n      extraFields.filter((item: CustomFieldItems) => item.required && item.custom) || [];\n    const formData = new URLSearchParams();\n    const token = getXsrfToken() || '';\n    formData.append('FormField[1][1]', email);\n    formData.append('FormField[1][24]', currentPassword);\n    formData.append('FormField[1][2]', newPassword);\n    formData.append('FormField[1][3]', confirmPassword);\n    formData.append('authenticity_token', token);\n\n    // extra\n    if (requiredCustomFields.length) {\n      requiredCustomFields.forEach((item: Partial<Fields>) => {\n        if (item.name?.includes('_')) {\n          const key = item.name?.split('_')[1];\n          const { formFields } = data;\n          const val = formFields.find(\n            (field: Partial<Fields>) => field.name === item.bcLabel,\n          ).value;\n          if (item.type === 'date') {\n            const time = val.split('-');\n            if (!val && time.length !== 3) return;\n            const [year, month, day] = time;\n            formData.append(`FormFieldYear[1][${key}]`, year);\n            formData.append(`FormFieldMonth[1][${key}]`, month);\n            formData.append(`FormFieldDay[1][${key}]`, day);\n          } else {\n            formData.append(`FormField[1][${key}]`, val);\n          }\n        }\n      });\n    }\n\n    const requestBody: string = formData.toString();\n\n    sendUpdateAccountRequest(requestBody)\n      .then((response) => {\n        const isFlag = response.includes('alertBox--error');\n        resolve(!isFlag);\n      })\n      .catch((error) => {\n        b2bLogger.error('Error:', error);\n        reject();\n      });\n  });\n}\n\nconst emailValidate = validatorRules(['email']);\n\nexport const initB2BInfo = (\n  accountSettings: any,\n  contactInformation: Partial<Fields>[],\n  accountB2BFormFields: Partial<Fields>[],\n  additionalInformation: Partial<Fields>[],\n) => {\n  const extraFields = accountSettings?.extraFields || [];\n  contactInformation.forEach((item: Partial<Fields>) => {\n    const contactItem = item;\n    if (deCodeField(item?.name || '') === 'first_name') {\n      contactItem.default = accountSettings.firstName;\n    }\n    if (deCodeField(item?.name || '') === 'last_name') {\n      contactItem.default = accountSettings.lastName;\n    }\n    if (deCodeField(item?.name || '') === 'phone') {\n      contactItem.default = accountSettings.phoneNumber;\n    }\n    if (deCodeField(item?.name || '') === 'email') {\n      contactItem.default = accountSettings.email;\n      contactItem.validate = emailValidate;\n    }\n  });\n\n  if (extraFields.length > 0) {\n    extraFields.forEach((field: CustomFieldItems) => {\n      const extraField = field;\n\n      const currentField = contactInformation.find(\n        (item) => deCodeField(item?.name || '') === extraField.fieldName,\n      );\n\n      if (currentField) {\n        currentField.default = extraField.fieldValue;\n      }\n    });\n  }\n\n  accountB2BFormFields.forEach((item: Partial<Fields>) => {\n    const formField = item;\n    if (item.name === 'role') {\n      formField.default = accountSettings.companyRoleName;\n      formField.disabled = true;\n    } else if (item.name === 'company') {\n      formField.default = accountSettings.company;\n      formField.disabled = true;\n    }\n  });\n\n  additionalInformation.forEach((item: Partial<Fields>) => {\n    const formFields = (accountSettings?.formFields || []).find(\n      (field: Partial<Fields>) => field.name === item.bcLabel,\n    );\n    const infoItem = item;\n    if (formFields) infoItem.default = formFields.value;\n  });\n\n  return [...contactInformation, ...accountB2BFormFields, ...additionalInformation];\n};\n\nexport const initBcInfo = (\n  accountSettings: any,\n  contactInformation: Partial<Fields>[],\n  additionalInformation: Partial<Fields>[],\n) => {\n  contactInformation.forEach((item: Partial<Fields>) => {\n    const contactInfoItem = item;\n    if (deCodeField(item?.name || '') === 'first_name') {\n      contactInfoItem.default = accountSettings.firstName;\n    }\n    if (deCodeField(item?.name || '') === 'last_name') {\n      contactInfoItem.default = accountSettings.lastName;\n    }\n    if (deCodeField(item?.name || '') === 'phone') {\n      contactInfoItem.default = accountSettings.phoneNumber;\n    }\n    if (deCodeField(item?.name || '') === 'email') {\n      contactInfoItem.default = accountSettings.email;\n      contactInfoItem.validate = emailValidate;\n    }\n    if (deCodeField(item?.name || '') === 'company') {\n      contactInfoItem.default = accountSettings.company;\n    }\n  });\n\n  additionalInformation.forEach((item: Partial<Fields>) => {\n    const formFields = (accountSettings?.formFields || []).find(\n      (field: Partial<Fields>) => field.name === item.bcLabel,\n    );\n    const infoItem = item;\n    if (formFields) infoItem.default = formFields.value;\n  });\n\n  return [...contactInformation, ...additionalInformation];\n};\n\nexport const b2bSubmitDataProcessing = (\n  data: CustomFieldItems,\n  accountSettings: any,\n  decryptionFields: Partial<Fields>[],\n  extraFields: Partial<Fields>[],\n) => {\n  const userExtraFields = accountSettings?.extraFields || [];\n\n  const param: Partial<ParamProps> = {};\n  param.formFields = [];\n  let pristine = true;\n  let flag = true;\n  let useExtraFieldsFlag = false;\n\n  Object.keys(data).forEach((key: string) => {\n    decryptionFields.forEach((item: Partial<Fields>) => {\n      if (key === item.name) {\n        flag = false;\n        if (deCodeField(item.name) === 'first_name') {\n          if (accountSettings.firstName !== data[item.name]) pristine = false;\n          param.firstName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'last_name') {\n          if (accountSettings.lastName !== data[item.name]) pristine = false;\n          param.lastName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'phone') {\n          if (accountSettings.phoneNumber !== data[item.name]) pristine = false;\n          param.phoneNumber = data[item.name];\n        }\n        if (deCodeField(item.name) === 'email') {\n          if (accountSettings.email !== data[item.name]) pristine = false;\n          param.email = data[item.name];\n        }\n        if (item.custom) {\n          const currentField = userExtraFields.find(\n            (field: CustomFieldItems) => field.fieldName === deCodeField(item?.name || ''),\n          );\n          if (currentField?.fieldValue !== data[item.name]) useExtraFieldsFlag = true;\n        }\n      }\n    });\n    if (useExtraFieldsFlag) {\n      pristine = false;\n    }\n\n    if (flag) {\n      extraFields.forEach((field: Partial<Fields>) => {\n        if (field.fieldId === key && param?.formFields) {\n          const { name } = field;\n          param.formFields.push({\n            name: field?.bcLabel || '',\n            value: data[key],\n          });\n          flag = false;\n          const account = (accountSettings?.formFields || []).find(\n            (formField: Partial<Fields>) => formField.name === field.bcLabel,\n          );\n          if (account && JSON.stringify(account.value) !== JSON.stringify(data[key])) {\n            pristine = false;\n          }\n\n          if (!accountSettings?.formFields?.length && name && !!data[name]) {\n            pristine = false;\n          }\n        }\n      });\n    }\n    if (flag) {\n      if (key === 'password') {\n        param.newPassword = data[key];\n        if (data[key]) pristine = false;\n      } else {\n        param[key] = data[key];\n      }\n    }\n    flag = true;\n  });\n\n  delete param.company;\n\n  delete param.role;\n\n  if (pristine) {\n    return undefined;\n  }\n\n  return param;\n};\n\nexport const bcSubmitDataProcessing = (\n  data: CustomFieldItems,\n  accountSettings: any,\n  decryptionFields: Partial<Fields>[],\n  extraFields: Partial<Fields>[],\n) => {\n  const param: Partial<ParamProps> = {};\n  param.formFields = [];\n  let pristine = true;\n  let flag = true;\n  Object.keys(data).forEach((key: string) => {\n    decryptionFields.forEach((item: Partial<Fields>) => {\n      if (key === item.name) {\n        flag = false;\n        if (deCodeField(item.name) === 'first_name') {\n          if (accountSettings.firstName !== data[item.name]) pristine = false;\n          param.firstName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'last_name') {\n          if (accountSettings.lastName !== data[item.name]) pristine = false;\n          param.lastName = data[item.name];\n        }\n        if (deCodeField(item.name) === 'phone') {\n          if (accountSettings.phoneNumber !== data[item.name]) pristine = false;\n          param.phoneNumber = data[item.name];\n        }\n        if (deCodeField(item.name) === 'email') {\n          if (accountSettings.email !== data[item.name]) pristine = false;\n          param.email = data[item.name];\n        }\n        if (deCodeField(item.name) === 'company') {\n          if (accountSettings.company !== data[item.name]) pristine = false;\n          param.company = data[item.name];\n        }\n      }\n    });\n\n    if (flag) {\n      extraFields.forEach((field: Partial<Fields>) => {\n        if (field.fieldId === key && param?.formFields) {\n          param.formFields.push({\n            name: field?.bcLabel || '',\n            value: data[key],\n          });\n          flag = false;\n          const account = (accountSettings?.formFields || []).find(\n            (formField: Partial<Fields>) => formField.name === field.bcLabel,\n          );\n          if (account && JSON.stringify(account.value) !== JSON.stringify(data[key]))\n            pristine = false;\n        }\n      });\n    }\n\n    if (flag) {\n      if (key === 'password') {\n        param.newPassword = data[key];\n        if (data[key]) pristine = false;\n      } else {\n        param[key] = data[key];\n      }\n    }\n    flag = true;\n  });\n\n  if (pristine) {\n    return undefined;\n  }\n\n  return param;\n};\n\nexport default sendEmail;\n","import { useContext, useEffect, useMemo, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { useB3Lang } from '@b3/lang';\nimport { Box } from '@mui/material';\nimport trim from 'lodash-es/trim';\n\nimport { B3CustomForm } from '@/components';\nimport CustomButton from '@/components/button/CustomButton';\nimport { b3HexToRgb, getContrastColor } from '@/components/outSideComponents/utils/b3CustomStyles';\nimport B3Spin from '@/components/spin/B3Spin';\nimport { useMobile } from '@/hooks';\nimport useStorageState from '@/hooks/useStorageState';\nimport { CustomStyleContext } from '@/shared/customStyleButton';\nimport {\n  checkUserBCEmail,\n  checkUserEmail,\n  getB2BAccountFormFields,\n  getB2BAccountSettings,\n  getBCAccountSettings,\n  updateB2BAccountSettings,\n  updateBCAccountSettings,\n} from '@/shared/service/b2b';\nimport { isB2BUserSelector, useAppSelector } from '@/store';\nimport { Fields, ParamProps } from '@/types/accountSetting';\nimport { B3SStorage, channelId, snackbar } from '@/utils';\n\nimport { deCodeField, getAccountFormFields } from '../Registered/config';\n\nimport { getAccountSettingsFields, getPasswordModifiedFields } from './config';\nimport { b2bSubmitDataProcessing, bcSubmitDataProcessing, initB2BInfo, initBcInfo } from './utils';\n\nfunction useData() {\n  const isB2BUser = useAppSelector(isB2BUserSelector);\n  const companyInfoId = useAppSelector(({ company }) => company.companyInfo.id);\n  const customer = useAppSelector(({ company }) => company.customer);\n  const role = useAppSelector(({ company }) => company.customer.role);\n  const salesRepCompanyId = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.id);\n  const isAgenting = useAppSelector(({ b2bFeatures }) => b2bFeatures.masqueradeCompany.isAgenting);\n  const companyId = role === 3 && isAgenting ? Number(salesRepCompanyId) : Number(companyInfoId);\n  const isBCUser = !isB2BUser || (role === 3 && !isAgenting);\n\n  const validateEmailValue = async (emailValue: string) => {\n    if (customer.emailAddress === trim(emailValue)) return true;\n    const payload = {\n      email: emailValue,\n      channelId,\n    };\n\n    const { isValid }: { isValid: boolean } = isBCUser\n      ? await checkUserBCEmail(payload)\n      : await checkUserEmail(payload);\n\n    return isValid;\n  };\n\n  const emailValidation = (data: Partial<ParamProps>) => {\n    if (data.email !== customer.emailAddress && !data.currentPassword) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const passwordValidation = (data: Partial<ParamProps>) => {\n    if (data.password !== data.confirmPassword) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return { isBCUser, companyId, customer, validateEmailValue, emailValidation, passwordValidation };\n}\n\nfunction AccountSetting() {\n  const { isBCUser, companyId, customer, validateEmailValue, emailValidation, passwordValidation } =\n    useData();\n\n  const {\n    control,\n    handleSubmit,\n    getValues,\n    formState: { errors },\n    setValue,\n    setError,\n  } = useForm({\n    mode: 'onSubmit',\n  });\n\n  const [isFinishUpdate, setIsFinishUpdate] = useStorageState<boolean>(\n    'sf-isFinishUpdate',\n    false,\n    sessionStorage,\n  );\n\n  const {\n    state: {\n      portalStyle: { backgroundColor = '#FEF9F5' },\n    },\n  } = useContext(CustomStyleContext);\n\n  const b3Lang = useB3Lang();\n\n  const [isMobile] = useMobile();\n\n  const navigate = useNavigate();\n\n  const [accountInfoFormFields, setAccountInfoFormFields] = useState<Partial<Fields>[]>([]);\n  const [decryptionFields, setDecryptionFields] = useState<Partial<Fields>[]>([]);\n  const [extraFields, setExtraFields] = useState<Partial<Fields>[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [accountSettings, setAccountSettings] = useState<any>({});\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        setLoading(true);\n\n        const fn = isBCUser ? getBCAccountSettings : getB2BAccountSettings;\n\n        const params = isBCUser\n          ? {}\n          : {\n              companyId,\n            };\n\n        const key = isBCUser ? 'customerAccountSettings' : 'accountSettings';\n\n        const accountFormAllFields = await getB2BAccountFormFields(isBCUser ? 1 : 2);\n        const accountFormFields = getAccountFormFields(\n          accountFormAllFields.accountFormFields || [],\n        );\n\n        const contactInformation = (accountFormFields?.contactInformation || []).filter(\n          (item: Partial<Fields>) => item.fieldId !== 'field_email_marketing_newsletter',\n        );\n\n        const { additionalInformation = [] } = accountFormFields;\n\n        const { [key]: accountSettings } = await fn(params);\n\n        const fields = isBCUser\n          ? initBcInfo(accountSettings, contactInformation, additionalInformation)\n          : initB2BInfo(\n              accountSettings,\n              contactInformation,\n              getAccountSettingsFields(),\n              additionalInformation,\n            );\n\n        const passwordModifiedFields = getPasswordModifiedFields();\n\n        const all = [...fields, ...passwordModifiedFields];\n\n        const roleItem = all.find((item) => item.name === 'role');\n\n        if (roleItem?.fieldType) roleItem.fieldType = 'text';\n\n        setAccountInfoFormFields(all);\n\n        setAccountSettings(accountSettings);\n\n        setDecryptionFields(contactInformation);\n\n        setExtraFields(additionalInformation);\n      } finally {\n        if (isFinishUpdate) {\n          snackbar.success(b3Lang('accountSettings.notification.detailsUpdated'));\n          setIsFinishUpdate(false);\n        }\n        setLoading(false);\n        setIsVisible(true);\n      }\n    };\n\n    init();\n    // disabling as we only need to run this once and values at starting render are good enough\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleGetUserExtraFields = (\n    data: CustomFieldItems,\n    accountInfoFormFields: Partial<Fields>[],\n  ) => {\n    const userExtraFields = accountInfoFormFields.filter(\n      (item: CustomFieldItems) => item.custom && item.groupId === 1,\n    );\n    return userExtraFields.map((item: CustomFieldItems) => ({\n      fieldName: deCodeField(item?.name || ''),\n      fieldValue: data[item.name],\n    }));\n  };\n\n  const handleAddUserClick = () => {\n    handleSubmit(async (data: CustomFieldItems) => {\n      setLoading(true);\n\n      try {\n        const isValid = await validateEmailValue(data.email);\n\n        if (!isValid) {\n          setError('email', {\n            type: 'custom',\n            message: b3Lang('accountSettings.notification.emailExists'),\n          });\n        }\n\n        const emailFlag = emailValidation(data);\n\n        if (!emailFlag) {\n          snackbar.error(b3Lang('accountSettings.notification.updateEmailPassword'));\n        }\n\n        const passwordFlag = passwordValidation(data);\n\n        if (!passwordFlag) {\n          setError('confirmPassword', {\n            type: 'manual',\n            message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n          });\n          setError('password', {\n            type: 'manual',\n            message: b3Lang('global.registerComplete.passwordMatchPrompt'),\n          });\n        }\n\n        if (isValid && emailFlag && passwordFlag) {\n          const dataProcessingFn = isBCUser ? bcSubmitDataProcessing : b2bSubmitDataProcessing;\n          const payload = dataProcessingFn(data, accountSettings, decryptionFields, extraFields);\n\n          if (payload) {\n            if (!isBCUser) {\n              payload.companyId = companyId;\n              payload.extraFields = handleGetUserExtraFields(data, accountInfoFormFields);\n            }\n\n            if (payload.newPassword === '' && payload.confirmPassword === '') {\n              delete payload.newPassword;\n              delete payload.confirmPassword;\n            }\n          }\n\n          if (!payload) {\n            snackbar.success(b3Lang('accountSettings.notification.noEdits'));\n            return;\n          }\n\n          const requestFn = isBCUser ? updateBCAccountSettings : updateB2BAccountSettings;\n          await requestFn(payload);\n\n          if (\n            (data.password && data.currentPassword) ||\n            customer.emailAddress !== trim(data.email)\n          ) {\n            navigate('/login?loginFlag=loggedOutLogin');\n          } else {\n            B3SStorage.clear();\n            setIsFinishUpdate(true);\n            window.location.reload();\n          }\n        }\n      } finally {\n        setLoading(false);\n      }\n    })();\n  };\n\n  const translatedFields = useMemo(() => {\n    const fieldTranslations: Record<string, string> = {\n      field_first_name: b3Lang('accountSettings.form.firstName'),\n      field_last_name: b3Lang('accountSettings.form.lastName'),\n      field_email: b3Lang('accountSettings.form.email'),\n      field_phone_number: b3Lang('accountSettings.form.phoneNumber'),\n      field_company: b3Lang('accountSettings.form.company'),\n      field_role: b3Lang('accountSettings.form.role'),\n      field_current_password: b3Lang('accountSettings.form.currentPassword'),\n      field_password: b3Lang('accountSettings.form.password'),\n      field_confirm_password: b3Lang('accountSettings.form.confirmPassword'),\n    };\n\n    return accountInfoFormFields.map((item) => ({\n      ...item,\n      label: fieldTranslations[item.fieldId ?? ''] ?? item.label,\n    }));\n  }, [accountInfoFormFields, b3Lang]);\n\n  return (\n    <B3Spin isSpinning={isLoading} background={backgroundColor}>\n      <Box\n        sx={{\n          width: isMobile ? '100%' : '35%',\n          minHeight: isMobile ? '800px' : '300px',\n          '& input, & .MuiFormControl-root .MuiTextField-root, & .MuiSelect-select.MuiSelect-filled, & .MuiTextField-root .MuiInputBase-multiline':\n            {\n              bgcolor: b3HexToRgb('#FFFFFF', 0.87),\n              borderRadius: '4px',\n              borderBottomLeftRadius: '0',\n              borderBottomRightRadius: '0',\n            },\n          '& .MuiButtonBase-root.MuiCheckbox-root:not(.Mui-checked), & .MuiRadio-root:not(.Mui-checked)':\n            {\n              color: b3HexToRgb(getContrastColor(backgroundColor), 0.6),\n            },\n          '& .MuiTypography-root.MuiTypography-body1.MuiFormControlLabel-label, & .MuiFormControl-root .MuiFormLabel-root:not(.Mui-focused)':\n            {\n              color: b3HexToRgb(getContrastColor(backgroundColor), 0.87),\n            },\n          '& .MuiInputLabel-root.MuiInputLabel-formControl:not(.Mui-focused)': {\n            color: b3HexToRgb(getContrastColor('#FFFFFF'), 0.6),\n          },\n        }}\n      >\n        <B3CustomForm\n          formFields={translatedFields}\n          errors={errors}\n          control={control}\n          getValues={getValues}\n          setValue={setValue}\n        />\n\n        <CustomButton\n          sx={{\n            mt: '28px',\n            mb: isMobile ? '20px' : '0',\n            width: '100%',\n            visibility: isVisible ? 'visible' : 'hidden',\n          }}\n          onClick={handleAddUserClick}\n          variant=\"contained\"\n        >\n          {b3Lang('accountSettings.button.saveUpdates')}\n        </CustomButton>\n      </Box>\n    </B3Spin>\n  );\n}\n\nexport default AccountSetting;\n"],"names":["getAccountSettingsFields","getPasswordModifiedFields","emailValidate","validatorRules","initB2BInfo","accountSettings","contactInformation","accountB2BFormFields","additionalInformation","extraFields","item","contactItem","deCodeField","field","extraField","currentField","formField","formFields","infoItem","initBcInfo","contactInfoItem","b2bSubmitDataProcessing","data","decryptionFields","userExtraFields","param","pristine","flag","useExtraFieldsFlag","key","name","account","_a","bcSubmitDataProcessing","useData","isB2BUser","useAppSelector","isB2BUserSelector","companyInfoId","company","customer","role","salesRepCompanyId","b2bFeatures","isAgenting","companyId","isBCUser","emailValue","trim","payload","channelId","isValid","checkUserBCEmail","checkUserEmail","AccountSetting","validateEmailValue","emailValidation","passwordValidation","control","handleSubmit","getValues","errors","setValue","setError","useForm","isFinishUpdate","setIsFinishUpdate","useStorageState","backgroundColor","useContext","CustomStyleContext","b3Lang","useB3Lang","isMobile","useMobile","navigate","useNavigate","accountInfoFormFields","setAccountInfoFormFields","useState","setDecryptionFields","setExtraFields","isLoading","setLoading","setAccountSettings","isVisible","setIsVisible","useEffect","fn","getBCAccountSettings","getB2BAccountSettings","params","accountFormAllFields","getB2BAccountFormFields","accountFormFields","getAccountFormFields","fields","passwordModifiedFields","all","roleItem","snackbar","handleGetUserExtraFields","handleAddUserClick","emailFlag","passwordFlag","updateBCAccountSettings","updateB2BAccountSettings","B3SStorage","translatedFields","useMemo","fieldTranslations","_b","jsx","B3Spin","jsxs","Box","b3HexToRgb","getContrastColor","B3CustomForm","CustomButton"],"mappings":"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"}