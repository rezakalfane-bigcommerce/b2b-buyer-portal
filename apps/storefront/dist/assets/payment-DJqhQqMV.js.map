{"version":3,"file":"payment-DJqhQqMV.js","sources":["../../src/shared/service/b2b/graphql/invoice.ts","../../src/pages/Invoice/utils/payment.ts"],"sourcesContent":["import { convertArrayToGraphql } from '../../../../utils';\nimport B3Request from '../../request/b3Fetch';\n\nconst invoiceList = (data: CustomFieldItems) => `{\n  invoices (\n    search: \"${data.q || ''}\"\n    first: ${data.first}\n    offset: ${data.offset} \n    ${data?.status ? `status: ${convertArrayToGraphql(data.status ? [data.status] : [])}` : ''}\n    ${data?.beginDateAt ? `beginDateAt: \"${data.beginDateAt}\"` : ''}\n    ${data?.endDateAt ? `endDateAt: \"${data.endDateAt}\"` : ''}\n    orderBy: \"${data?.orderBy}\"\n    ${data?.beginDueDateAt ? `beginDueDateAt: \"${data.beginDueDateAt}\"` : ''}\n    ${data?.endDueDateAt ? `endDueDateAt: \"${data.endDueDateAt}\"` : ''}\n    ${data?.companyIds ? `companyIds: ${convertArrayToGraphql(data.companyIds || [])}` : ''}\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node {\n        id,\n        createdAt,\n        updatedAt,\n        storeHash,\n        customerId,\n        externalId,\n        invoiceNumber,\n        dueDate,\n        orderNumber,\n        purchaseOrderNumber,\n        notAllowedPay,\n        details,\n        status,\n        pendingPaymentCount,\n        purchaseOrderNumber,\n        openBalance {\n          code,\n          value,\n        },\n        originalBalance {\n          code,\n          value,\n        },\n        companyInfo {\n          companyId,\n          companyName,\n          companyAddress,\n          companyCountry,\n          companyState,\n          companyCity,\n          companyZipCode,\n          phoneNumber,\n          bcId,\n        },\n        orderUserId,\n      }\n    }\n  }\n}`;\n\nconst invoiceStats = (status: number | string, decimalPlaces: number, companyIds: number[]) => `{\n  invoiceStats (\n    ${status === '' ? '' : `status: ${status},`}\n    decimalPlaces: ${decimalPlaces}\n    ${companyIds.length ? `companyIds: ${convertArrayToGraphql(companyIds || [])}` : ''}\n  ){\n    totalBalance,\n    overDueBalance,\n  }\n}`;\n\nconst getInvoiceDownloadPDF = (invoiceId: number, isPayNow: boolean) => `mutation {\n  invoicePdf (\n    invoiceId: ${invoiceId}\n    ${isPayNow ? `isPayNow: ${isPayNow}` : ''}\n  ){\n    url,\n  }\n}`;\n\nconst invoiceCreateBcCart = (data: any) => `mutation {\n  invoiceCreateBcCart (\n    bcCartData: {\n      lineItems: ${convertArrayToGraphql(data.lineItems)},\n      currency: \"${data.currency}\"\n      details: {\n        memo: \"\"\n      }\n    }\n  ) {\n    result {\n      checkoutUrl\n      cartId\n    }\n  }\n}`;\n\nconst receiptLine = (id: number) => `{\n  allReceiptLines (\n    invoiceId: \"${id}\"\n    first: 50\n    offset: 0\n  ) {\n    edges {\n      node {\n        id\n        paymentType\n        invoiceId\n        amount\n        transactionType\n        referenceNumber\n        createdAt\n      }\n    }\n    totalCount\n  }\n}`;\n\nconst invoiceDetail = (invoiceId: number) => `{\n  invoice (\n    invoiceId: ${invoiceId}\n  ) {\n    id,\n    createdAt,\n    updatedAt,\n    storeHash,\n    customerId,\n    externalId,\n    invoiceNumber,\n    dueDate,\n    orderNumber,\n    purchaseOrderNumber,\n    notAllowedPay,\n    details,\n    status,\n    pendingPaymentCount,\n    purchaseOrderNumber,\n    openBalance {\n      code,\n      value,\n    },\n    originalBalance {\n      code,\n      value,\n    },\n  }\n}`;\n\nconst invoiceReceipt = (id: number) => `{\n  receipt (\n    id: ${id}\n  ) {\n    id,\n    createdAt,\n    updatedAt,\n    storeHash,\n    customerId,\n    externalId,\n    externalCustomerId,\n    totalCode,\n    totalAmount,\n    payerName,\n    payerCustomerId,\n    details,\n    paymentId,\n    transactionType,\n    paymentType,\n    referenceNumber,\n    receiptLineSet {\n      edges {\n        node {\n          id,\n          createdAt,\n          updatedAt,\n          storeHash,\n          customerId,\n          externalId,\n          externalCustomerId,\n          receiptId,\n          invoiceId,\n          amountCode,\n          amount,\n          paymentStatus,\n          paymentType,\n          invoiceNumber,\n          paymentId,\n          transactionType,\n          referenceNumber,\n        }\n      }\n    }\n  }\n}`;\n\nconst exportInvoices = `mutation($invoiceFilterData: InvoiceFilterDataType!, $lang: String!) {\n  invoicesExport (\n    invoiceFilterData: $invoiceFilterData,\n    lang: $lang,\n  ) {\n    url\n  }\n}`;\n\nexport const getInvoiceList = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: invoiceList(data),\n  });\n\nexport const invoiceDownloadPDF = (invoiceId: number, isPayNow: boolean) =>\n  B3Request.graphqlB2B({\n    query: getInvoiceDownloadPDF(invoiceId, isPayNow),\n  });\n\nexport const getInvoiceCheckoutUrl = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: invoiceCreateBcCart(data),\n  });\n\nexport const getInvoicePaymentHistory = (id: number) =>\n  B3Request.graphqlB2B({\n    query: receiptLine(id),\n  });\n\nexport const getInvoiceDetail = (id: number) =>\n  B3Request.graphqlB2B({\n    query: invoiceDetail(id),\n  });\n\nexport const getInvoicePaymentInfo = (id: number) =>\n  B3Request.graphqlB2B({\n    query: invoiceReceipt(id),\n  });\n\nexport const exportInvoicesAsCSV = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: exportInvoices,\n    variables: data,\n  });\n\nexport const getInvoiceStats = (\n  status: number | string,\n  decimalPlaces: number,\n  comapnyIds: number[],\n) =>\n  B3Request.graphqlB2B({\n    query: invoiceStats(status, decimalPlaces, comapnyIds),\n  });\n","import round from 'lodash-es/round';\n\nimport { getInvoiceCheckoutUrl } from '@/shared/service/b2b';\nimport { BcCartData } from '@/types/invoice';\nimport { attemptCheckoutLoginAndRedirect } from '@/utils/b3checkout';\nimport b2bLogger from '@/utils/b3Logger';\n\nexport const getCheckoutUrlAndCart = async (params: BcCartData) => {\n  const {\n    invoiceCreateBcCart: {\n      result: { checkoutUrl, cartId },\n    },\n  } = await getInvoiceCheckoutUrl(params);\n\n  return {\n    checkoutUrl,\n    cartId,\n  };\n};\n\nexport const gotoInvoiceCheckoutUrl = async (\n  params: BcCartData,\n  platform: string,\n  isReplaceCurrentUrl?: boolean,\n) => {\n  const { checkoutUrl, cartId } = await getCheckoutUrlAndCart(params);\n  const handleStencil = () => {\n    if (isReplaceCurrentUrl) {\n      window.location.replace(checkoutUrl);\n    } else {\n      window.location.href = checkoutUrl;\n    }\n  };\n\n  if (platform === 'bigcommerce') {\n    handleStencil();\n    return;\n  }\n\n  try {\n    await attemptCheckoutLoginAndRedirect(cartId, checkoutUrl, isReplaceCurrentUrl);\n  } catch (e) {\n    b2bLogger.error(e);\n    handleStencil();\n  }\n};\n\nexport const formattingNumericValues = (value: number, decimalPlaces: number) =>\n  round(Number(value), decimalPlaces).toFixed(decimalPlaces);\n"],"names":["invoiceList","data","convertArrayToGraphql","invoiceStats","status","decimalPlaces","companyIds","getInvoiceDownloadPDF","invoiceId","isPayNow","invoiceCreateBcCart","receiptLine","id","invoiceDetail","invoiceReceipt","exportInvoices","getInvoiceList","B3Request","invoiceDownloadPDF","getInvoiceCheckoutUrl","getInvoicePaymentHistory","getInvoiceDetail","getInvoicePaymentInfo","exportInvoicesAsCSV","getInvoiceStats","comapnyIds","getCheckoutUrlAndCart","params","checkoutUrl","cartId","gotoInvoiceCheckoutUrl","platform","isReplaceCurrentUrl","handleStencil","attemptCheckoutLoginAndRedirect","e","b2bLogger","formattingNumericValues","value","round"],"mappings":"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"}