{"version":3,"file":"recaptcha-legacy-DMic5P_I.js","sources":["../../src/components/captcha/Captcha.tsx","../../src/components/captcha/frameCaptchaCode.js?raw","../../src/shared/service/b2b/graphql/recaptcha.ts"],"sourcesContent":["import { useEffect, useMemo, useRef } from 'react';\n\nimport { themeFrameSelector, useAppSelector } from '@/store';\n\n// eslint-disable-next-line\nimport FRAME_HANDLER_CODE from './frameCaptchaCode.js?raw'\n\nconst CAPTCHA_URL = 'https://www.google.com/recaptcha/api.js?render=explicit';\nconst CAPTCHA_VARIABLES: Record<string, string> = {\n  PREFIX: '',\n  PARENT_ORIGIN: window.location.origin,\n  CAPTCHA_SUCCESS: 'captcha-success',\n  CAPTCHA_ERROR: 'captcha-error',\n  CAPTCHA_EXPIRED: 'captcha-expired',\n};\n\nexport interface CaptchaProps {\n  siteKey: string;\n  size?: 'compact' | 'normal';\n  theme?: 'dark' | 'light';\n  email?: string;\n  handleGetKey: (arg: string) => void;\n}\n\nexport function loadCaptchaScript(iframeDocument: HTMLIFrameElement['contentDocument']) {\n  if (iframeDocument?.head.querySelector(`script[src=\"${CAPTCHA_URL}\"]`) === null) {\n    const captchaScript = iframeDocument.createElement('script');\n    captchaScript.src = CAPTCHA_URL;\n    iframeDocument.head.appendChild(captchaScript);\n  }\n}\n\nexport function loadCaptchaWidgetHandlers(\n  iframeDocument: HTMLIFrameElement['contentDocument'],\n  widgetId: string,\n) {\n  if (!iframeDocument) return;\n\n  let code = FRAME_HANDLER_CODE;\n\n  CAPTCHA_VARIABLES.PREFIX = widgetId;\n\n  Object.entries(CAPTCHA_VARIABLES).forEach(([key, value]) => {\n    code = code.replace(RegExp(key, 'g'), value);\n  });\n\n  const handlerScript = iframeDocument.createElement('script');\n  handlerScript.textContent = code;\n  iframeDocument.head.appendChild(handlerScript);\n}\n\nexport function generateWidgetId() {\n  return `widget_${Date.now()}`;\n}\n\nexport function Captcha(props: CaptchaProps) {\n  const { theme, size, email, handleGetKey, siteKey } = props;\n  const iframeDocument = useAppSelector(themeFrameSelector);\n  const widgetId = useMemo(() => generateWidgetId(), []);\n  const initialized = useRef(false);\n\n  useEffect(() => {\n    const onMessage = (event: MessageEvent) => {\n      if (event?.data?.startsWith?.(widgetId)) {\n        const message = event.data.slice(widgetId.length);\n        const data = JSON.parse(message);\n\n        const key = data.payload;\n        switch (data.type) {\n          case CAPTCHA_VARIABLES.CAPTCHA_SUCCESS:\n            if (key) {\n              handleGetKey(key);\n            }\n            break;\n\n          default:\n            break;\n        }\n      }\n    };\n\n    window.addEventListener('message', onMessage, false);\n\n    return () => {\n      if (initialized.current) {\n        window.removeEventListener('message', onMessage);\n      }\n    };\n  }, [email, widgetId, handleGetKey]);\n\n  useEffect(() => {\n    if (iframeDocument === undefined || initialized.current) {\n      return;\n    }\n\n    loadCaptchaScript(iframeDocument);\n    loadCaptchaWidgetHandlers(iframeDocument, widgetId);\n    initialized.current = true;\n  }, [iframeDocument, widgetId]);\n\n  return <div id={widgetId} data-sitekey={siteKey} data-theme={theme} data-size={size} />;\n}\n","export default \"/* eslint-disable */\\n\\nwindow.INITIALIZE_CAPTCHA_PREFIX = function () {\\n  if (window.grecaptcha?.render === undefined) {\\n    return\\n  }\\n\\n  if (window.WIDGET_TIMER_PREFIX !== null) {\\n    window.clearInterval(window.WIDGET_TIMER_PREFIX)\\n    window.WIDGET_TIMER_PREFIX = null\\n  }\\n\\n  var sendMessage = function (eventType, payload) {\\n    window.parent.postMessage(\\n      'PREFIX' +\\n        JSON.stringify({\\n          type: eventType,\\n          payload: payload,\\n        }),\\n      'PARENT_ORIGIN'\\n    )\\n  }\\n\\n  window.grecaptcha.render(\\n    'PREFIX',\\n    {\\n      callback: function (token) {\\n        sendMessage('CAPTCHA_SUCCESS', token)\\n      },\\n      'error-callback': function () {\\n        sendMessage('CAPTCHA_ERROR', null)\\n      },\\n      'expired-callback': function () {\\n        sendMessage('CAPTCHA_EXPIRED', null)\\n      },\\n    },\\n    true\\n  )\\n}\\n\\nwindow.WIDGET_TIMER_PREFIX = window.setInterval(\\n  window.INITIALIZE_CAPTCHA_PREFIX,\\n  250\\n)\\n\"","import B3Request from '../../request/b3Fetch';\n\nconst getStorefrontTokenQuery = `query {\n    site {\n        settings {\n            reCaptcha {\n                siteKey\n                isEnabledOnStorefront\n            }\n        }\n    }\n}`;\n\nconst resetPassword = `mutation recaptcha($token: String!, $email: String!) {\n    customer {\n      requestResetPassword(\n        reCaptchaV2: { \n            token: $token\n        },\n        input: {\n          email: $email,\n        }\n      ) {\n        errors {\n          ... on ValidationError {\n            message\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const requestResetPassword = (token: string, email: string): Promise<void> =>\n  B3Request.graphqlBCProxy({\n    query: resetPassword,\n    variables: { token, email },\n  });\n\ninterface CaptchaConfig {\n  siteKey: string;\n  isEnabledOnStorefront: boolean;\n}\n\nexport const getStorefrontToken = (): Promise<CaptchaConfig | undefined> =>\n  B3Request.graphqlBCProxy({\n    query: getStorefrontTokenQuery,\n  }).then((res) => res?.data?.site?.settings?.reCaptcha);\n"],"names":["props","theme","size","email","handleGetKey","siteKey","iframeDocument","useAppSelector","themeFrameSelector","widgetId","useMemo","Date","now","initialized","useRef","useEffect","onMessage","event","data","startsWith","message","slice","length","JSON","parse","key","payload","type","CAPTCHA_VARIABLES","CAPTCHA_SUCCESS","window","addEventListener","current","removeEventListener","head","querySelector","CAPTCHA_URL","captchaScript","createElement","src","appendChild","loadCaptchaScript","code","FRAME_HANDLER_CODE","PREFIX","Object","entries","forEach","value","replace","RegExp","handlerScript","textContent","loadCaptchaWidgetHandlers","jsx","id","PARENT_ORIGIN","location","origin","CAPTCHA_ERROR","CAPTCHA_EXPIRED","exports","token","B3Request","graphqlBCProxy","query","variables","then","res","site","settings","reCaptcha"],"mappings":"sPAuDO,SAAiBA,GACtB,MAAMC,MAAEA,EAAOC,KAAAA,EAAAC,MAAMA,EAAOC,aAAAA,EAAAC,QAAcA,GAAYL,EAChDM,EAAiBC,EAAeC,GAChCC,EAAWC,EAAQA,SAAA,IANlB,UAAUC,KAAKC,SAM6B,IAC7CC,EAAcC,UAAO,GAyCpB,OAvCPC,EAAAA,WAAU,KACF,MAAAC,EAAaC,IACjB,GAAIA,GAAOC,MAAMC,aAAaV,GAAW,CACvC,MAAMW,EAAUH,EAAMC,KAAKG,MAAMZ,EAASa,QACpCJ,EAAOK,KAAKC,MAAMJ,GAElBK,EAAMP,EAAKQ,QACTR,EAAKS,OACNC,EAAkBC,iBACjBJ,GACFrB,EAAaqB,EAMnB,GAMJ,OAFOK,OAAAC,iBAAiB,UAAWf,GAAW,GAEvC,KACDH,EAAYmB,SACPF,OAAAG,oBAAoB,UAAWjB,EAAS,CAEnD,GACC,CAACb,EAAOM,EAAUL,IAErBW,EAAAA,WAAU,UACe,IAAnBT,GAAgCO,EAAYmB,UAnE7C,SAA2B1B,GAChC,GAA2E,OAAvEA,GAAgB4B,KAAKC,cAAc,eAAeC,OAA2B,CACzE,MAAAC,EAAgB/B,EAAegC,cAAc,UACnDD,EAAcE,IAAMH,EACL9B,EAAA4B,KAAKM,YAAYH,EAAa,CAEjD,CAiEII,CAAkBnC,GA/DN,SACdA,EACAG,GAEA,IAAKH,EAAgB,OAErB,IAAIoC,EAAOC,EAEXf,EAAkBgB,OAASnC,EAEpBoC,OAAAC,QAAQlB,GAAmBmB,SAAQ,EAAEtB,EAAKuB,MAC/CN,EAAOA,EAAKO,QAAQC,OAAOzB,EAAK,KAAMuB,EAAK,IAGvC,MAAAG,EAAgB7C,EAAegC,cAAc,UACnDa,EAAcC,YAAcV,EACbpC,EAAA4B,KAAKM,YAAYW,EAClC,CA+CIE,CAA0B/C,EAAgBG,GAC1CI,EAAYmB,SAAU,EAAA,GACrB,CAAC1B,EAAgBG,IAEb6C,MAAC,OAAIC,GAAI9C,EAAU,eAAcJ,EAAS,aAAYJ,EAAO,YAAWC,GACjF,ICrGe,MAAAyC,EAAA,29BDOTP,EAAc,0DACdR,EAA4C,CAChDgB,OAAQ,GACRY,cAAe1B,OAAO2B,SAASC,OAC/B7B,gBAAiB,kBACjB8B,cAAe,gBACfC,gBAAiB,mBEoBiBC,EAAA,KAAA,CAACC,EAAe3D,IAClD4D,EAAUC,eAAe,CACvBC,MAtBkB,kWAuBlBC,UAAW,CAAEJ,QAAO3D,aAQU0D,EAAA,KAAA,IAChCE,EAAUC,eAAe,CACvBC,MA5C4B,yKA6C3BE,MAAMC,GAAQA,GAAKlD,MAAMmD,MAAMC,UAAUC"}