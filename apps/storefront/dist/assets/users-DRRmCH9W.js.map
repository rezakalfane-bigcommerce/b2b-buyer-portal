{"version":3,"file":"users-DRRmCH9W.js","sources":["../../src/shared/service/b2b/graphql/users.ts"],"sourcesContent":["import { UserTypes } from '@/types';\n\nimport { convertArrayToGraphql, storeHash } from '../../../../utils';\nimport B3Request from '../../request/b3Fetch';\n\nconst getUsersQl = (data: CustomFieldItems) => `{\n  users (\n    first: ${data.first}\n    search: \"${data.q || ''}\"\n    offset: ${data.offset}\n    companyId: ${data.companyId}\n    ${data.companyRoleId === '' ? '' : `companyRoleId: ${data.companyRoleId}`}\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node{\n        id,\n        createdAt,\n        updatedAt,\n        firstName,\n        lastName,\n        email,\n        phone,\n        bcId,\n        role,\n        uuid,\n        extraFields{\n          fieldName\n          fieldValue\n        }\n        companyRoleId,\n        companyRoleName,\n        masqueradingCompanyId,\n        companyInfo {\n          companyId,\n          companyName,\n          companyAddress,\n          companyCountry,\n          companyState,\n          companyCity,\n          companyZipCode,\n          phoneNumber,\n          bcId,\n        },\n      }\n    }\n  }\n}`;\n\nconst addOrUpdateUsersQl = (data: CustomFieldItems) => `mutation{\n  ${data?.userId ? 'userUpdate' : 'userCreate'} (\n    userData: {\n      companyId: ${data.companyId}\n      ${data?.email ? `email: \"${data.email}\"` : ''}\n      firstName: \"${data.firstName || ''}\"\n      lastName: \"${data.lastName || ''}\"\n      phone: \"${data.phone || ''}\"\n      ${data?.companyRoleId ? `companyRoleId: ${data.companyRoleId}` : ''}\n      ${data?.userId ? `userId: ${data.userId}` : ''}\n      ${data?.addChannel ? `addChannel: ${data.addChannel}` : ''}\n      extraFields: ${convertArrayToGraphql(data?.extraFields || [])}\n      ${data?.companyRoleName ? `companyRoleName: ${data.companyRoleName}` : ''}\n    }\n  ){\n    user{\n      id,\n      bcId,\n    }\n  }\n}`;\n\nconst deleteUsersQl = (data: CustomFieldItems) => `mutation{\n  userDelete (\n    companyId: ${data.companyId}\n    userId: ${data.userId}\n  ){\n    message\n  }\n}`;\n\nconst checkUserB2BEmail = (data: CustomFieldItems) => `{\n  userEmailCheck (\n    email: \"${data.email}\"\n    companyId: ${data.companyId || null}\n    storeHash: \"${storeHash}\"\n    channelId: ${data.channelId || null}\n  ){\n    userType,\n    userInfo{\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      companyName\n      originChannelId\n      forcePasswordReset\n    }\n  }\n}`;\n\nconst checkCustomerBCEmail = (data: CustomFieldItems) => `{\n  customerEmailCheck (\n    email: \"${data.email}\"\n    storeHash: \"${storeHash}\"\n    channelId: ${data.channelId || null}\n  ){\n    userType,\n  }\n}`;\n\nconst getUserExtraFields = () => `{\n  userExtraFields {\n    fieldName\n    fieldType\n    isRequired\n    defaultValue\n    maximumLength\n    numberOfRows\n    maximumValue\n    listOfValue\n    visibleToEnduser\n    labelName\n  }\n}`;\n\nexport const getUsers = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: getUsersQl(data),\n  });\n\nexport const getUsersExtraFieldsInfo = () =>\n  B3Request.graphqlB2B({\n    query: getUserExtraFields(),\n  });\n\nexport const addOrUpdateUsers = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: addOrUpdateUsersQl(data),\n  });\n\nexport const deleteUsers = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: deleteUsersQl(data),\n  });\n\nexport const checkUserEmail = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: checkUserB2BEmail(data),\n  }).then((res) => ({\n    ...res.userEmailCheck,\n    isValid: res.userEmailCheck.userType === UserTypes.DOES_NOT_EXIST,\n  }));\n\nexport const checkUserBCEmail = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: checkCustomerBCEmail(data),\n  }).then((res) => ({\n    ...res.customerEmailCheck,\n    isValid: res.customerEmailCheck.userType !== UserTypes.B2C,\n  }));\n"],"names":["getUsersQl","data","addOrUpdateUsersQl","convertArrayToGraphql","deleteUsersQl","checkUserB2BEmail","storeHash","checkCustomerBCEmail","getUserExtraFields","getUsers","B3Request","getUsersExtraFieldsInfo","addOrUpdateUsers","deleteUsers","checkUserEmail","res","UserTypes","checkUserBCEmail"],"mappings":"6IAKA,MAAMA,EAAcC,GAA2B,4BAElC,OAAAA,EAAK,MAAK,mBACR,OAAAA,EAAK,GAAK,GAAE,mBACb,OAAAA,EAAK,OAAM,qBACR,OAAAA,EAAK,UAAS,UACzB,OAAAA,EAAK,gBAAkB,GAAK,GAAK,kBAAkB,OAAAA,EAAK,eAAe,ktBA0CvEC,EAAsBD,GAA2B,gBACnD,OAAAA,GAAA,MAAAA,EAAM,OAAS,aAAe,aAAY,0CAE3B,OAAAA,EAAK,UAAS,YACzB,OAAAA,GAAA,MAAAA,EAAM,MAAQ,WAAW,OAAAA,EAAK,MAAK,KAAM,GAAE,wBAC/B,OAAAA,EAAK,WAAa,GAAE,wBACrB,OAAAA,EAAK,UAAY,GAAE,qBACtB,OAAAA,EAAK,OAAS,GAAE,aACxB,OAAAA,GAAA,MAAAA,EAAM,cAAgB,kBAAkB,OAAAA,EAAK,eAAkB,GAAE,YACjE,OAAAA,GAAA,MAAAA,EAAM,OAAS,WAAW,OAAAA,EAAK,QAAW,GAAE,YAC5C,OAAAA,GAAA,MAAAA,EAAM,WAAa,eAAe,OAAAA,EAAK,YAAe,GAAE,yBAC3C,OAAAE,GAAsBF,GAAA,YAAAA,EAAM,cAAe,EAAE,EAAC,YAC3D,OAAAA,GAAA,MAAAA,EAAM,gBAAkB,oBAAoB,OAAAA,EAAK,iBAAoB,GAAE,mEAUzEG,EAAiBH,GAA2B,6CAEjC,OAAAA,EAAK,UAAS,kBACjB,OAAAA,EAAK,OAAM,+BAMnBI,EAAqBJ,GAA2B,sCAExC,OAAAA,EAAK,MAAK,sBACP,OAAAA,EAAK,WAAa,KAAI,sBACrB,OAAAK,EAAS,sBACV,OAAAL,EAAK,WAAa,KAAI,kNAiBjCM,EAAwBN,GAA2B,0CAE3C,OAAAA,EAAK,MAAK,uBACN,OAAAK,EAAS,sBACV,OAAAL,EAAK,WAAa,KAAI,iCAMjCO,EAAqB,IAAM,8MAepBC,EAAYR,GACvBS,EAAU,WAAW,CACnB,MAAOV,EAAWC,CAAI,CACxB,CAAC,EAEUU,EAA0B,IACrCD,EAAU,WAAW,CACnB,MAAOF,EAAmB,CAC5B,CAAC,EAEUI,EAAoBX,GAC/BS,EAAU,WAAW,CACnB,MAAOR,EAAmBD,CAAI,CAChC,CAAC,EAEUY,EAAeZ,GAC1BS,EAAU,WAAW,CACnB,MAAON,EAAcH,CAAI,CAC3B,CAAC,EAEUa,EAAkBb,GAC7BS,EAAU,WAAW,CACnB,MAAOL,EAAkBJ,CAAI,CAC/B,CAAC,EAAE,KAAMc,IAAS,CAChB,GAAGA,EAAI,eACP,QAASA,EAAI,eAAe,WAAaC,EAAU,cACrD,EAAE,EAESC,EAAoBhB,GAC/BS,EAAU,WAAW,CACnB,MAAOH,EAAqBN,CAAI,CAClC,CAAC,EAAE,KAAMc,IAAS,CAChB,GAAGA,EAAI,mBACP,QAASA,EAAI,mBAAmB,WAAaC,EAAU,GACzD,EAAE"}