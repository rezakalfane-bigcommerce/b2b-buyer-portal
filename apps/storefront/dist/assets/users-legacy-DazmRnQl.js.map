{"version":3,"file":"users-legacy-DazmRnQl.js","sources":["../../src/shared/service/b2b/graphql/users.ts"],"sourcesContent":["import { UserTypes } from '@/types';\n\nimport { convertArrayToGraphql, storeHash } from '../../../../utils';\nimport B3Request from '../../request/b3Fetch';\n\nconst getUsersQl = (data: CustomFieldItems) => `{\n  users (\n    first: ${data.first}\n    search: \"${data.q || ''}\"\n    offset: ${data.offset}\n    companyId: ${data.companyId}\n    ${data.companyRoleId === '' ? '' : `companyRoleId: ${data.companyRoleId}`}\n  ){\n    totalCount,\n    pageInfo{\n      hasNextPage,\n      hasPreviousPage,\n    },\n    edges{\n      node{\n        id,\n        createdAt,\n        updatedAt,\n        firstName,\n        lastName,\n        email,\n        phone,\n        bcId,\n        role,\n        uuid,\n        extraFields{\n          fieldName\n          fieldValue\n        }\n        companyRoleId,\n        companyRoleName,\n        masqueradingCompanyId,\n        companyInfo {\n          companyId,\n          companyName,\n          companyAddress,\n          companyCountry,\n          companyState,\n          companyCity,\n          companyZipCode,\n          phoneNumber,\n          bcId,\n        },\n      }\n    }\n  }\n}`;\n\nconst addOrUpdateUsersQl = (data: CustomFieldItems) => `mutation{\n  ${data?.userId ? 'userUpdate' : 'userCreate'} (\n    userData: {\n      companyId: ${data.companyId}\n      ${data?.email ? `email: \"${data.email}\"` : ''}\n      firstName: \"${data.firstName || ''}\"\n      lastName: \"${data.lastName || ''}\"\n      phone: \"${data.phone || ''}\"\n      ${data?.companyRoleId ? `companyRoleId: ${data.companyRoleId}` : ''}\n      ${data?.userId ? `userId: ${data.userId}` : ''}\n      ${data?.addChannel ? `addChannel: ${data.addChannel}` : ''}\n      extraFields: ${convertArrayToGraphql(data?.extraFields || [])}\n      ${data?.companyRoleName ? `companyRoleName: ${data.companyRoleName}` : ''}\n    }\n  ){\n    user{\n      id,\n      bcId,\n    }\n  }\n}`;\n\nconst deleteUsersQl = (data: CustomFieldItems) => `mutation{\n  userDelete (\n    companyId: ${data.companyId}\n    userId: ${data.userId}\n  ){\n    message\n  }\n}`;\n\nconst checkUserB2BEmail = (data: CustomFieldItems) => `{\n  userEmailCheck (\n    email: \"${data.email}\"\n    companyId: ${data.companyId || null}\n    storeHash: \"${storeHash}\"\n    channelId: ${data.channelId || null}\n  ){\n    userType,\n    userInfo{\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      companyName\n      originChannelId\n      forcePasswordReset\n    }\n  }\n}`;\n\nconst checkCustomerBCEmail = (data: CustomFieldItems) => `{\n  customerEmailCheck (\n    email: \"${data.email}\"\n    storeHash: \"${storeHash}\"\n    channelId: ${data.channelId || null}\n  ){\n    userType,\n  }\n}`;\n\nconst getUserExtraFields = () => `{\n  userExtraFields {\n    fieldName\n    fieldType\n    isRequired\n    defaultValue\n    maximumLength\n    numberOfRows\n    maximumValue\n    listOfValue\n    visibleToEnduser\n    labelName\n  }\n}`;\n\nexport const getUsers = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: getUsersQl(data),\n  });\n\nexport const getUsersExtraFieldsInfo = () =>\n  B3Request.graphqlB2B({\n    query: getUserExtraFields(),\n  });\n\nexport const addOrUpdateUsers = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: addOrUpdateUsersQl(data),\n  });\n\nexport const deleteUsers = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: deleteUsersQl(data),\n  });\n\nexport const checkUserEmail = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: checkUserB2BEmail(data),\n  }).then((res) => ({\n    ...res.userEmailCheck,\n    isValid: res.userEmailCheck.userType === UserTypes.DOES_NOT_EXIST,\n  }));\n\nexport const checkUserBCEmail = (data: CustomFieldItems) =>\n  B3Request.graphqlB2B({\n    query: checkCustomerBCEmail(data),\n  }).then((res) => ({\n    ...res.customerEmailCheck,\n    isValid: res.customerEmailCheck.userType !== UserTypes.B2C,\n  }));\n"],"names":["getUsersQl","data","first","q","offset","companyId","companyRoleId","addOrUpdateUsersQl","userId","email","firstName","lastName","phone","addChannel","convertArrayToGraphql","extraFields","companyRoleName","deleteUsersQl","checkUserB2BEmail","storeHash","channelId","checkCustomerBCEmail","B3Request","graphqlB2B","query","exports","then","res","userEmailCheck","isValid","userType","UserTypes","DOES_NOT_EXIST","customerEmailCheck","B2C"],"mappings":"oPAKA,MAAMA,EAAcC,GAA2B,4BAElCA,EAAKC,uBACHD,EAAKE,GAAK,oBACXF,EAAKG,0BACFH,EAAKI,kBACO,KAAvBJ,EAAKK,cAAuB,GAAK,kBAAkBL,EAAKK,guBA0CxDC,EAAsBN,GAA2B,gBACnDA,GAAMO,OAAS,aAAe,qDAEfP,EAAKI,oBAChBJ,GAAMQ,MAAQ,WAAWR,EAAKQ,SAAW,yBAC7BR,EAAKS,WAAa,yBACnBT,EAAKU,UAAY,sBACpBV,EAAKW,OAAS,cACtBX,GAAMK,cAAgB,kBAAkBL,EAAKK,gBAAkB,aAC/DL,GAAMO,OAAS,WAAWP,EAAKO,SAAW,aAC1CP,GAAMY,WAAa,eAAeZ,EAAKY,aAAe,0BACzCC,EAAsBb,GAAMc,aAAe,cACxDd,GAAMe,gBAAkB,oBAAoBf,EAAKe,kBAAoB,oEAUvEC,EAAiBhB,GAA2B,6CAEjCA,EAAKI,0BACRJ,EAAKO,oCAMbU,EAAqBjB,GAA2B,sCAExCA,EAAKQ,0BACFR,EAAKI,WAAa,yBACjBc,sBACDlB,EAAKmB,WAAa,qNAiB7BC,EAAwBpB,GAA2B,0CAE3CA,EAAKQ,2BACDU,sBACDlB,EAAKmB,WAAa,2CAqBVnB,GACvBqB,EAAUC,WAAW,CACnBC,MAAOxB,EAAWC,OAGiBwB,EAAA,KAAA,IACrCH,EAAUC,WAAW,CACnBC,MAtB6B,yNAyBAvB,GAC/BqB,EAAUC,WAAW,CACnBC,MAAOjB,EAAmBN,cAGFA,GAC1BqB,EAAUC,WAAW,CACnBC,MAAOP,EAAchB,cAGMA,GAC7BqB,EAAUC,WAAW,CACnBC,MAAON,EAAkBjB,KACxByB,MAAMC,IAAS,IACbA,EAAIC,eACPC,QAASF,EAAIC,eAAeE,WAAaC,EAAUC,4BAGtB/B,GAC/BqB,EAAUC,WAAW,CACnBC,MAAOH,EAAqBpB,KAC3ByB,MAAMC,IAAS,IACbA,EAAIM,mBACPJ,QAASF,EAAIM,mBAAmBH,WAAaC,EAAUG"}