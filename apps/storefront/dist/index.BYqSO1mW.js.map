{"version":3,"mappings":"6vCAGMA,EAAuD,CAC3D,MAAO,IACP,YAAa,uDACb,QAAS,oDACT,WAAY,sDACd,EAEA,OAAO,IAAM,CACX,GAAG,OAAO,IACV,qBAAuBC,GAAa,WAIlC,MAAMC,GAA2BC,GAAAC,GAAAC,EAAA,OAAO,KAAP,YAAAA,EAAW,UAAX,YAAAD,EAAoB,cAApB,KAAAD,EAAmCG,EAAY,WAChF,MAAO,GAAG,OAAAN,EAA0BE,CAAW,GAAI,OAAAD,EAAQ,CAE/D,GAEC,gBAA2B,CACpB,MAAE,UAAAM,EAAW,QAAAC,EAAS,4BAAAC,EAA6B,YAAAC,GAAgB,MAAAC,EAAA,0BAAAJ,EAAA,QAAAC,EAAA,4BAAAC,EAAA,YAAAC,CAAA,OAAM,QAC7E,qCACF,8GAGI,OAAO,SAAS,KAAK,WAAW,IAAI,EAC9BF,EAAA,GAGRC,EAA4BD,CAAO,EAEzBD,EAAA,EACH,wBAAiB,eAAgBG,CAAW,EAE5C,WAAI,0BAA0B,eAAiB,IAAM,CAC9CA,EAAA,EACZ,WAAW,IAAM,cAAAL,EAAA,OAAO,IAAI,0BAA0B,qBAArC,YAAAA,EAAyD,SAAS,CAAC,CACtF,EAEJ,GAAG","names":["ENVIRONMENT_CDN_BASE_PATH","filename","environment","_c","_b","_a","Environment","bindLinks","initApp","requestIdleCallbackFunction","unbindLinks","__vitePreload"],"ignoreList":[],"sources":["../src/main.ts"],"sourcesContent":["import { Environment, EnvSpecificConfig } from '@/types';\n\n// TODO: update the following to BC cdn when migration is completed\nconst ENVIRONMENT_CDN_BASE_PATH: EnvSpecificConfig<string> = {\n  local: '/',\n  integration: 'https://microapps.integration.zone/b2b-buyer-portal/',\n  staging: 'https://cdn.bundleb2b.net/b2b/staging/storefront/',\n  production: 'https://cdn.bundleb2b.net/b2b/production/storefront/',\n};\n\nwindow.b2b = {\n  ...window.b2b,\n  __get_asset_location: (filename) => {\n    // this function is called at runtime and intentionally references `window.B3`\n    // so that the same runtime files can dynamically choose the cdn base url location\n    // based on environment it is deployed to\n    const environment: Environment = window.B3?.setting?.environment ?? Environment.Production;\n    return `${ENVIRONMENT_CDN_BASE_PATH[environment]}${filename}`;\n  },\n};\n\n(async function bootstrap() {\n  const { bindLinks, initApp, requestIdleCallbackFunction, unbindLinks } = await import(\n    './load-functions'\n  );\n\n  // check if the accessed url contains a hashtag\n  if (window.location.hash.startsWith('#/')) {\n    initApp();\n  } else {\n    // load the app when the browser is free\n    requestIdleCallbackFunction(initApp);\n    // and bind links to load the app\n    bindLinks();\n    window.addEventListener('beforeunload', unbindLinks);\n    // and observe global flag to simulate click\n    window.b2b.initializationEnvironment.isInitListener = () => {\n      unbindLinks();\n      setTimeout(() => window.b2b.initializationEnvironment.clickedLinkElement?.click(), 0);\n    };\n  }\n})();\n"],"file":"index.BYqSO1mW.js"}